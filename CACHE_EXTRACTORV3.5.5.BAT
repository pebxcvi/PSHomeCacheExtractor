@ECHO OFF
CHCP 65001 > NUL
TITLE PSHomeCacheExtractor
SETLOCAL ENABLEEXTENSIONS DISABLEDELAYEDEXPANSION
::   CUR DIR
SET "SRC1=%~DP0"
SETLOCAL ENABLEDELAYEDEXPANSION
CALL SET "REMSLASH=%%SRC1:~0,-1%%"
CALL SET "TEMP=%REMSLASH:\=" & SET "TEMP=%"
SET "TEMP=!REMSLASH:\%TEMP%=!"
CALL SET "TEMP2=%TEMP:\=" & SET "TEMP2=%"
SET "TEMP2=!TEMP:\%TEMP2%=!"
ENDLOCAL & SET "TEMP=%TEMP%" & SET "TEMP2=%TEMP2%
IF EXIST "%SRC1%BIN" (
    SET "LOCALPATH=%SRC1%BIN"
) ELSE IF EXIST "%TEMP%\BIN" (
    SET "LOCALPATH=%TEMP%\BIN"
) ELSE IF EXIST "%TEMP2%\BIN" (
    SET "LOCALPATH=%TEMP2%\BIN"
) ELSE (
    SET "LOCALPATH=%SRC1%BIN"
)
:: DEFINF
SET "DEINF=%LOCALPATH%\DEINF2.0\DEINF2.0.exe"
:: FFPROBE
SET "FFPROBE=%LOCALPATH%\ffprobe.exe"
:: JREPL
SET "JREPLBAT=%LOCALPATH%\JREPL\JREPL.BAT"
SET "JREPLStrings=%LOCALPATH%\JREPL\JREPLStrings.txt"
:: PYTHON LIB
SET "DLL2=%LOCALPATH%\PSHomeCacheTools\python311.dll"
SET "LIB=%LOCALPATH%\PSHomeCacheTools\lib"
:: FILE ANALYSIS
SET "FILE_ANALYSIS=%LOCALPATH%\PSHomeCacheTools\file_analysis.exe"
:: CHECKER FOR NEW OBJECTS
SET  OBJ_CHECK=1
SET "OBJCHECKER=%LOCALPATH%\PSHomeCacheTools\check_for_new_objects.exe"
SET "OBJLISTPATH=Q:\PSHOME-INT\PSHomeCacheDepot\OBJECTS\OBJECT_QUERY.txt"
SET "OBJOUTPUT=log_OBJECTSDEFS_NEW.log"
:: NEW CACHE COPY EXE
SET "CACHE_COPY_SINGLE_EXE=%LOCALPATH%\PSHomeCacheTools\cache_copy_single.exe"
SET "CACHE_COPY_COMBINED_EXE=%LOCALPATH%\PSHomeCacheTools\cache_copy_combined.exe"
:: LOG THUMBNAILS EXE
SET "LOG_THUMBNAILS=%LOCALPATH%\PSHomeCacheTools\log_thumbnails.exe"
SET "THUMBS=log_THUMBNAILS_ALL.log"
:: LOG SDATS EXE
SET "LOG_SDATS=%LOCALPATH%\PSHomeCacheTools\log_sdats.exe"
SET "SCENES=log_SCENES_ALL.log"
SET "OBJECTS=log_OBJECTDEFS_ALL.log"
:: INFLOG MERGER
SET "INFLOG_MERGER=%LOCALPATH%\PSHomeCacheTools\merge_inflogs.exe"
SET "LOGTXT=logs_ALL.txt"
:: CUSTOM QUERY
SET "CUSTOM_QUERY=%LOCALPATH%\PSHomeCacheTools\custom_query.exe"
::   TIMESTAMP
SET YY=%DATE:~10,4%
SET MM=%DATE:~4,2%
SET DD=%DATE:~7,2%
SET TIMESTAMP=%YY%%MM%%DD%
::   LOG FILES
SET "CACHEVERSLOG=log_CACHE_VERS.log"
SET "DUPES=log_DUPE_INF_PATH.log"
SET "NOFILES=log_NO_FILE_FOR_INF.log"
SET "CUSTOMINFLOG=logs_ALL_Custom.txt"
SET "DCFILES=log_DescContent.log"
SET "CDNFILES=log_CDNContent.log"
SET "NEWFILES=log_NEWContent_%TIMESTAMP%.log"
SET "PSN_ID=PSN_IDS.TXT"
SET "SDATFILE=log_SDATs.log"
SET "INFFILE=log_INFs.log"
SET "OTHFILE=log_OTH.log"
SET "URIHASHES=log_URIHashes.log"
SET "BADINF=log_BAD_INFs.log"
SET "BADINFSDAT=log_BAD_INF_SDATs.log"
SET "BADINFOTH=log_BAD_INF_OTHERs.log"
SET "NOINFSDAT=log_NO_INF_SDATs.log"
SET "NOINFOTH=log_NO_INF_OTHERs.log"
SET "FINALREPORT=log_ANALYSIS.log"


IF NOT EXIST "%LOCALPATH%" ECHO BIN FOLDER NOT FOUND @ %LOCALPATH% OR %TEMP%\BIN OR %TEMP2%\BIN. & GOTO END
SETLOCAL ENABLEDELAYEDEXPANSION
SET "3RDPARTYFILES="
IF NOT EXIST "%FFPROBE%" SET "3RDPARTYFILES=!3RDPARTYFILES! ffprobe.exe->https://github.com/BtbN/FFmpeg-Builds/releases
IF NOT EXIST "%DEINF%" SET "3RDPARTYFILES=!3RDPARTYFILES! DEINF2.0.EXE"
IF NOT EXIST "%DLL2%" SET "3RDPARTYFILES=!3RDPARTYFILES! python311.dll"
IF NOT EXIST "%LIB%" SET "3RDPARTYFILES=!3RDPARTYFILES! lib"
IF NOT EXIST "%FILE_ANALYSIS%" SET "3RDPARTYFILES=!3RDPARTYFILES! file_analysis.exe"
IF NOT EXIST "%CACHE_COPY_SINGLE_EXE%" SET "3RDPARTYFILES=!3RDPARTYFILES! cache_copy_single.exe"
IF NOT EXIST "%CACHE_COPY_COMBINED_EXE%" SET "3RDPARTYFILES=!3RDPARTYFILES! cache_copy_combined.exe"
IF NOT EXIST "%LOG_THUMBNAILS%" SET "3RDPARTYFILES=!3RDPARTYFILES! log_thumbnails.exe"
IF NOT EXIST "%LOG_SDATS%" SET "3RDPARTYFILES=!3RDPARTYFILES! log_sdats.exe"
IF NOT EXIST "%INFLOG_MERGER%" SET "3RDPARTYFILES=!3RDPARTYFILES! merge_inflogs.exe"
IF NOT EXIST "%CUSTOM_QUERY%" SET "3RDPARTYFILES=!3RDPARTYFILES! custom_query.exe"
IF NOT "!3RDPARTYFILES!" == "" (
    ECHO DEPENDENCIES NOT FOUND AT %LOCALPATH% OR %TEMP%\BIN OR %TEMP2%\BIN:
    FOR %%F IN (!3RDPARTYFILES!) DO (
        ECHO    %%F
    )
    GOTO END
)
ENDLOCAL

IF NOT EXIST "%JREPLBAT%" (
	CALL :CREATE_JREPL > "%JREPLBAT%"
) 

:SINGLE_OR_UNLIMITED
FOR /F "TOKENS=*" %%A IN ('DIR /B /A:D "%SRC1%*" ^| FINDSTR /V ARCHIVE ^| FINDSTR /V INFLOGS ^| FINDSTR /V ANALYSISLOGS ^| FINDSTR /V /RC:"\<BIN\>" ^| FINDSTR /V /RC:"\<__MACOSX\>"') DO (
		@ECHO OFF
		SET "A=%%A"
		SETLOCAL ENABLEDELAYEDEXPANSION
		SET V=FALSE
		IF /I !A! == NPIA00005 SET V=TRUE
		IF /I !A! == NPIA00010 SET V=TRUE
		IF /I !A! == NPEA00013 SET V=TRUE
    IF !V! == TRUE (
    	CALL :CACHE_SINGLE
    ) ELSE (
			FOR /F "TOKENS=*" %%B IN ('DIR /B /A:D "%SRC1%!A!\*"') DO (
				SET "B=%%B"
				SETLOCAL ENABLEDELAYEDEXPANSION
				SET V=FALSE
				IF /I !B! == NPIA00005 SET V=TRUE
				IF /I !B! == NPIA00010 SET V=TRUE
				IF /I !B! == NPEA00013 SET V=TRUE
   			IF !V! == TRUE (
					CALL :CACHE_UNLIMITED
				) ELSE (
					FOR /F "TOKENS=*" %%B IN ('DIR /B /A:D "%SRC1%!A!\!B!\*"') DO (
						SET "B=%%B"
						SETLOCAL ENABLEDELAYEDEXPANSION
						SET V=FALSE
						IF /I !B! == NPIA00005 SET V=TRUE
						IF /I !B! == NPIA00010 SET V=TRUE
						IF /I !B! == NPEA00013 SET V=TRUE
   					IF !V! == TRUE (
							CALL :CACHE_UNLIMITED
						) ELSE (
				 			BREAK
						)
			)
				)
			)
    )
    ENDLOCAL
)

:CACHE_SINGLE

SET LOOP1=0
:CREATE_INF_LOGS_SINGLE
FOR /F "TOKENS=*" %%A IN ('DIR /B /A:D "%SRC1%*" ^| FINDSTR /V ARCHIVE ^| FINDSTR /V INFLOGS ^| FINDSTR /V ANALYSISLOGS ^| FINDSTR /V /RC:"\<BIN\>" ^| FINDSTR /V /RC:"\<__MACOSX\>"') DO (
		@ECHO OFF
		SET "A=%%A"
		SETLOCAL ENABLEDELAYEDEXPANSION
		SET V=FALSE
		IF /I !A! == NPIA00005 SET V=TRUE
		IF /I !A! == NPIA00010 SET V=TRUE
		IF /I !A! == NPEA00013 SET V=TRUE
    IF !V! == TRUE (
	  	FOR /F "TOKENS=*" %%B IN ('DIR /B /A:D "%SRC1%!A!\*"') DO (
	  		SET "B=%%B"
	  		IF !B! == USRDIR (
	  				IF EXIST "%~DP0!A!\!B!\DATALOG.DAT" DEL "%~DP0!A!\!B!\DATALOG.DAT"
	  				FOR /F "TOKENS=*" %%C IN ('DIR /B /A:D "%SRC1%!A!\!B!\*"') DO (
	  					SET "C=%%C"
	  					IF !C! == CACHE (
	  							FOR /F "TOKENS=*" %%D IN ('DIR /B /A:D "%SRC1%!A!\!B!\!C!\*"') DO (
	  									SET "D=%%D"
	  									IF EXIST "%SRC1%INFLOGS\log_!D!.txt" (
	  										ECHO INFLOGS\log_!D!.txt ALREADY CREATED
	  									) ELSE (
	  										CALL "%DEINF%" "%~DP0!A!\!B!\!C!\!D!" -l -lo "%SRC1%INFLOGS\log_!D!.txt"
	  										IF EXIST "%SRC1%INFLOGS\log_!D!.txt" ECHO CREATED INFLOGS\log_!D!.txt
	  									)
									)
							) ELSE (
		 						BREAK
							)
						)
				) ELSE (
		 			BREAK
				)
	  	)
		) ELSE (
			BREAK
		)
		ENDLOCAL
)

:INF_LOG_COUNTER_SINGLE
SETLOCAL ENABLEEXTENSIONS
SET COUNT=0
FOR /F %%A IN ('DIR /B /A:-D "%SRC1%INFLOGS\*.TXT" ^| FINDSTR /V %LOGTXT% ^| FINDSTR /V %CUSTOMINFLOG%') DO SET /A COUNT+=1
ECHO.
ECHO TOTAL INF LOGS TO BE MERGED: %COUNT%
ECHO.
SET /A LOOP1=%LOOP1%+1
IF "%LOOP1%"=="3" GOTO MERGE_AND_CLEAN_UP_SINGLE
IF %COUNT% NEQ 10 GOTO CREATE_INF_LOGS_SINGLE
ENDLOCAL

:MERGE_AND_CLEAN_UP_SINGLE

IF EXIST "%SRC1%%LOGTXT%" MOVE "%SRC1%%LOGTXT%" "%SRC1%INFLOGS" >NUL

FOR /F "TOKENS=*" %%A IN ('DIR /B /A:-D "%SRC1%INFLOGS\%LOGTXT%" 2^>NUL') DO (
		@ECHO OFF
		SET "A=%%A"
		SETLOCAL ENABLEDELAYEDEXPANSION
		ECHO INFLOGS\%LOGTXT% ALREADY CREATED... SKIPPING THE MERGE AND CLEAN UP.
		IF EXIST "%SRC1%INFLOGS\!A!" CALL :START_FOUR
		ENDLOCAL
)

FOR /F "TOKENS=*" %%Z IN ('DIR /B /A:D "%SRC1%*" ^| FINDSTR /V ARCHIVE ^| FINDSTR /V INFLOGS ^| FINDSTR /V ANALYSISLOGS ^| FINDSTR /V /RC:"\<BIN\>" ^| FINDSTR /V /RC:"\<__MACOSX\>"') DO (
		SET "Z=%%Z"
		CALL :CONT_MERGE_AND_CLEAN_UP_SINGLE
)

ECHO.
IF EXIST "%SRC1%INFLOGS\%LOGTXT%" ECHO FINAL INFLOG CREATED @ INFLOGS\%LOGTXT%
GOTO START_FOUR
CMD /K

:CONT_MERGE_AND_CLEAN_UP_SINGLE

CALL SET "Z=%%Z%%"
CALL SET "REMSLASH=%%SRC1:~0,-1%%"
SET "SRCFOLDER=%REMSLASH:\=" & SET "SRCFOLDER=%"

SETLOCAL ENABLEDELAYEDEXPANSION

SET V=FALSE
IF /I !Z! == NPIA00005 SET V=TRUE
IF /I !Z! == NPIA00010 SET V=TRUE
IF /I !Z! == NPEA00013 SET V=TRUE
IF !V! == TRUE (

		IF EXIST "!REMSLASH!\INFLOGS" (
		
			ECHO INITIATING THE INFLOG MERGE AND CLEAN UP FOR !SRCFOLDER!...
			ECHO.

			CALL "%INFLOG_MERGER%" "!REMSLASH!\INFLOGS" "!REMSLASH!\INFLOGS\%LOGTXT%" "!REMSLASH!\INFLOGS\%LOGTXT%" "!Z!" "!SRCFOLDER!"
		)
		
) ELSE (
	BREAK
)

ENDLOCAL
EXIT /B

:START_FOUR
SET CHOICE=
ECHO.
ECHO.
ECHO.^|-------------------^|
ECHO.^| SINGLE CACHE MODE ^|
ECHO.^|-------------------^|
ECHO.
ECHO.
ECHO 0.  CREATE OBJECT/SCENE THUMBNAIL LOG
ECHO 1.  CREATE OBJECT/SCENE SDAT LOGS
ECHO 2.  COPY CACHE ONLY
ECHO 3.  COPY CACHE ONLY USING CUSTOM QUERIES
ECHO 4.  CREATE OBJECT/SCENE SDAT LOGS THEN COPY CACHE
ECHO 5.  VERBOSE MODE - NO COPYING. ONLY SHOW CMD AND LOG OUTPUTS
ECHO 6.  DELETE FINAL INFLOG
ECHO 7.  RENAME OBJECT SDAT's AND ODC's IN THE ARCHIVE TO THEIR UUID
ECHO 8.  RENAME OBJECT/SCENE THUMBNAILS IN THE ARCHIVE TO THEIR UUID/SCENEID
ECHO 9.  GET CACHE VERSION FROM LASTRUN.TXT/PARAM.SFO
ECHO 10. DELETE RESERVED FILES
ECHO 11. SUSPEND CMD
ECHO.
ECHO.
SET /P CHOICE=ENTER A NUMBER TO PERFORM AN ACTION: 
ECHO.

SETLOCAL ENABLEDELAYEDEXPANSION
SET "NOSPACES=!CHOICE: =!"
IF "!NOSPACES!"=="" GOTO START_FOUR
ENDLOCAL

IF NOT '%CHOICE%'=='' SET CHOICE=%CHOICE:~0,2%
IF '%CHOICE%'=='0' GOTO CHOICE_ZERO_SINGLE
IF '%CHOICE%'=='1' GOTO CHOICE_ONE_SINGLE
IF '%CHOICE%'=='2' GOTO CHOICE_TWO_SINGLE
IF '%CHOICE%'=='3' GOTO CHOICE_THREE_SINGLE
IF '%CHOICE%'=='4' GOTO CHOICE_FOUR_SINGLE
IF '%CHOICE%'=='5' GOTO CHOICE_FIVE_SINGLE
IF '%CHOICE%'=='6' GOTO CHOICE_SIX_SINGLE
IF '%CHOICE%'=='7' GOTO CHOICE_SEVEN_SINGLE
IF '%CHOICE%'=='8' GOTO CHOICE_EIGHT_SINGLE
IF '%CHOICE%'=='9' GOTO CHOICE_NINE_SINGLE
IF '%CHOICE%'=='10' GOTO CHOICE_TEN_SINGLE
IF '%CHOICE%'=='11' GOTO CHOICE_ELEVEN_SINGLE

ECHO "%CHOICE%" IS NOT VALID, TRY AGAIN
ECHO.
GOTO START_FOUR

:CHOICE_ZERO_SINGLE
CALL :CREATE_LOGS_THUMBNAILS_SINGLE
GOTO CHOICE_THREE_END

:CHOICE_ONE_SINGLE
SET SWITCH_SINGLE=0
SET VERBOSE_SINGLE=0
CALL :CREATE_LOGS_SINGLE
GOTO CHOICE_THREE_END

:CHOICE_TWO_SINGLE
SET SWITCH_SINGLE=0
SET VERBOSE_SINGLE=0
CALL :COPY_CACHE_SINGLE
GOTO CHOICE_THREE_END

:CHOICE_THREE_SINGLE
CALL :COPY_CACHE_SINGLE_CUSTOM
GOTO CHOICE_THREE_END

:CHOICE_FOUR_SINGLE
SET SWITCH_SINGLE=1
SET VERBOSE_SINGLE=0
CALL :COPY_CACHE_SINGLE
GOTO CHOICE_THREE_END

:CHOICE_FIVE_SINGLE
SET SWITCH_SINGLE=0
SET VERBOSE_SINGLE=1
CALL :COPY_CACHE_SINGLE
GOTO CHOICE_THREE_END

:CHOICE_SIX_SINGLE
CALL :DELETE_FINAL_INF_LOG_SINGLE
GOTO CHOICE_THREE_END

:CHOICE_SEVEN_SINGLE
CALL :RENAME_OBJECT_SDAT_COPY_CACHE_SINGLE
GOTO CHOICE_THREE_END

:CHOICE_EIGHT_SINGLE
CALL :RENAME_THUMBNAILS_COPY_CACHE_SINGLE
GOTO CHOICE_THREE_END

:CHOICE_NINE_SINGLE
CALL :GET_CACHE_VERSIONS_SINGLE
GOTO CHOICE_THREE_END

:CHOICE_TEN_SINGLE
CALL :REMOVE_RESERVED_SINGLE
GOTO CHOICE_THREE_END

:CHOICE_ELEVEN_SINGLE
CMD /K
GOTO CHOICE_THREE_END

:CHOICE_THREE_END
CMD /K


:CREATE_LOGS_THUMBNAILS_SINGLE
ECHO INITIATING THUMBNAIL LOG CREATION...
ECHO.

FOR /F "TOKENS=*" %%A IN ('DIR /B "%SRC1%*" ^| FINDSTR /V ARCHIVE ^| FINDSTR /V INFLOGS ^| FINDSTR /V ANALYSISLOGS ^| FINDSTR /V /RC:"\<BIN\>" ^| FINDSTR /V /RC:"\<__MACOSX\>"') DO (
		@ECHO OFF
		SET "A=%%A"
		CALL :THUMBNAIL_LOG_CREATION_SINGLE
)

GOTO START_FOUR
CMD /K

:THUMBNAIL_LOG_CREATION_SINGLE

CALL SET "A=%%A%%"
CALL SET "REMSLASH=%SRC1:~0,-1%"
SET "SRCFOLDER=%REMSLASH:\=" & SET "SRCFOLDER=%"

SETLOCAL ENABLEDELAYEDEXPANSION
SET Z=FALSE
IF /I !A! == NPIA00005 SET Z=TRUE
IF /I !A! == NPIA00010 SET Z=TRUE
IF /I !A! == NPEA00013 SET Z=TRUE
IF /I !A! == %THUMBS% SET Z=TRUE
IF !Z! == TRUE (
	IF EXIST "!REMSLASH!\%THUMBS%" (
		IF /I !A! == %THUMBS% (
	  	ECHO !A! ALREADY CREATED... SKIPPING...
	  )
	) ELSE (
	 	IF EXIST "!REMSLASH!\INFLOGS\%LOGTXT%" (
	 		CALL :STARTTIMER
	 		CALL "%LOG_THUMBNAILS%" "!REMSLASH!\INFLOGS\%LOGTXT%" "!REMSLASH!\%THUMBS%"
	 		CALL :STOPTIMER
	 		IF EXIST "%SRC1%%THUMBS%" ECHO %THUMBS% CREATED IN ROOT ^( !HOURS!h:!MINS!m:!SECS!s ^)
	 	) ELSE (
	 		ECHO %LOGTXT% NOT FOUND @ INFLOGS\%LOGTXT%... SKIPPING...
	 	)
	)
) ELSE (
 	BREAK
)
ENDLOCAL
EXIT /B


:CREATE_LOGS_SINGLE
ECHO INITIATING OBJECT/SCENE LOG CREATION...
ECHO.

FOR /F "TOKENS=*" %%A IN ('DIR /B "%SRC1%*" ^| FINDSTR /V ARCHIVE ^| FINDSTR /V INFLOGS ^| FINDSTR /V ANALYSISLOGS ^| FINDSTR /V /RC:"\<BIN\>" ^| FINDSTR /V /RC:"\<__MACOSX\>"') DO (
		@ECHO OFF
		SET "A=%%A"
		CALL :OBJECT_LOG_CREATION_SINGLE
)

IF NOT EXIST "%SRC1%%OBJECTS%" ( 
	ECHO.
	ECHO UNABLE TO LOCATE %OBJECTS% @ %SRC1%
	ECHO.
	GOTO SCENE_LOG_SINGLE
)

IF EXIST "%SRC1%%OBJECTS%" ( 
	IF NOT EXIST "%OBJLISTPATH%" (
		ECHO.
		ECHO UNABLE TO LOCATE OBJECT_QUERY.txt @ %OBJLISTPATH%
		ECHO.
 	 GOTO SCENE_LOG_SINGLE
	)
)

IF %OBJ_CHECK% EQU 1 (
	IF NOT EXIST "%OBJCHECKER%" ECHO check_for_new_objects.exe NOT FOUND & GOTO SCENE_LOG_SINGLE
	IF EXIST "%SRC1%%OBJOUTPUT%" (
		ECHO.
		ECHO %OBJOUTPUT% ALREADY CREATED... SKIPPING...
		ECHO.
		GOTO SCENE_LOG_SINGLE
	)
	ECHO.
	ECHO CHECKING FOR NEW OBJECTS ...
	CALL :STARTTIMER
	CALL "%OBJCHECKER%" --log_objects_file "%SRC1%%OBJECTS%" --object_query_file "%OBJLISTPATH%" --output_log_file "%SRC1%%OBJOUTPUT%"
	CALL :STOPTIMER
	IF EXIST "%SRC1%%OBJOUTPUT%" (
		ECHO %OBJOUTPUT% CREATED IN ROOT ^( !HOURS!h:!MINS!m:!SECS!s ^)
		ECHO.
	)
)

GOTO SCENE_LOG_SINGLE
CMD /K

:OBJECT_LOG_CREATION_SINGLE

CALL SET "A=%%A%%"
CALL SET "REMSLASH=%SRC1:~0,-1%"
SET "SRCFOLDER=%REMSLASH:\=" & SET "SRCFOLDER=%"

SETLOCAL ENABLEDELAYEDEXPANSION
SET Z=FALSE
IF /I !A! == NPIA00005 SET Z=TRUE
IF /I !A! == NPIA00010 SET Z=TRUE
IF /I !A! == NPEA00013 SET Z=TRUE
IF /I !A! == %OBJECTS% SET Z=TRUE
IF !Z! == TRUE (
	IF EXIST "!REMSLASH!\%OBJECTS%" (
		IF /I !A! == %OBJECTS% (
	  	ECHO !A! ALREADY CREATED... SKIPPING...
	  )
	) ELSE (
	 	IF EXIST "!REMSLASH!\INFLOGS\%LOGTXT%" (
	 		ECHO CREATING OBJECT LOG FOR !SRCFOLDER!..
	 		CALL :STARTTIMER
	 		CALL "%LOG_SDATS%" "!REMSLASH!\INFLOGS\%LOGTXT%" "!REMSLASH!\%OBJECTS%" --cachename "!SRCFOLDER!" --objects "!REMSLASH!\!A!\USRDIR\CACHE\OBJECTDEFS"
	 		CALL :STOPTIMER
	 		IF EXIST "!REMSLASH!\%OBJECTS%" (
	 			ECHO %OBJECTS% CREATED IN ROOT ^( !HOURS!h:!MINS!m:!SECS!s ^)
	 		) ELSE (
	 			ECHO NO OBJECT SDATS TO LOG... SKIPPING...
	 		)
	 	) ELSE (
	 		ECHO %LOGTXT% NOT FOUND @ INFLOGS\%LOGTXT%... SKIPPING...
	 	)
	)
) ELSE (
 	BREAK
)
ENDLOCAL
EXIT /B

:SCENE_LOG_SINGLE
FOR /F "TOKENS=*" %%A IN ('DIR /B "%SRC1%*" ^| FINDSTR /V ARCHIVE ^| FINDSTR /V INFLOGS ^| FINDSTR /V ANALYSISLOGS ^| FINDSTR /V /RC:"\<BIN\>" ^| FINDSTR /V /RC:"\<__MACOSX\>"') DO (
		@ECHO OFF
		SET "A=%%A"
		CALL :SCENE_LOG_CREATION_SINGLE
)

IF %SWITCH_SINGLE% EQU 1 (
	GOTO COPY_CACHE_ONLY_SINGLE
) ELSE (
	GOTO START_FOUR
)

CMD/K

:SCENE_LOG_CREATION_SINGLE

CALL SET "A=%%A%%"
CALL SET "REMSLASH=%SRC1:~0,-1%"
SET "SRCFOLDER=%REMSLASH:\=" & SET "SRCFOLDER=%"

SETLOCAL ENABLEDELAYEDEXPANSION

SET Z=FALSE
IF /I !A! == NPIA00005 SET Z=TRUE
IF /I !A! == NPIA00010 SET Z=TRUE
IF /I !A! == NPEA00013 SET Z=TRUE
IF /I !A! == %SCENES% SET Z=TRUE
IF !Z! == TRUE (
	IF EXIST "!REMSLASH!\%SCENES%" (
			IF /I !A! == %SCENES% (
	  		ECHO !A! ALREADY CREATED... SKIPPING...
	  	)
	 ) ELSE (
	 	IF EXIST "!REMSLASH!\INFLOGS\%LOGTXT%" (
	 		ECHO CREATING SCENE LOG FOR !SRCFOLDER!...
	 		CALL :STARTTIMER
	 		CALL "%LOG_SDATS%" "!REMSLASH!\INFLOGS\%LOGTXT%" "!REMSLASH!\%SCENES%" --cachename "!SRCFOLDER!" --scenes "!REMSLASH!\!A!\USRDIR\CACHE\SCENES"
	 		CALL :STOPTIMER
	 		IF EXIST "!REMSLASH!\%SCENES%" (
	 			ECHO %SCENES% CREATED IN ROOT ^( !HOURS!h:!MINS!m:!SECS!s ^)
	 		) ELSE (
	 			ECHO NO SCENE SDATS TO LOG... SKIPPING...
	 		)
	 	) ELSE (
	 		ECHO %LOGTXT% NOT FOUND @ INFLOGS\%LOGTXT%... SKIPPING...
	 	)
	 )
) ELSE (
 	BREAK
)
ENDLOCAL
EXIT /B

:COPY_CACHE_SINGLE

IF %SWITCH_SINGLE% EQU 1 (
	GOTO CREATE_LOGS_SINGLE
) ELSE (
	GOTO COPY_CACHE_ONLY_SINGLE
)

:COPY_CACHE_ONLY_SINGLE

FOR /F "TOKENS=*" %%A IN ('DIR /B /A:D "%SRC1%*ARCHIVE*" 2^>NUL') DO (
		@ECHO OFF
		SET "A=%%A"
		SETLOCAL ENABLEDELAYEDEXPANSION
		SET V=FALSE
		IF /I !A! == ARCHIVE SET V=TRUE
    IF !V! == TRUE (
    	ECHO CACHE ARCHIVE ALREADY CREATED... 
    	CALL :DELETE_ARCHIVE_PROMPT_SINGLE 
    ) ELSE (
      CALL :CONTINUE_CACHE_COPY_SINGLE
    )
		ENDLOCAL
)

IF NOT EXIST "%SRC1%ARCHIVE" GOTO CONTINUE_CACHE_COPY_SINGLE

:DELETE_ARCHIVE_PROMPT_SINGLE
ECHO.
SET /P "AREYOUSURE=DELETE ARCHIVE FOLDER (Y/[N])? "
IF /I "%AREYOUSURE%" EQU "Y" (
	RMDIR /S /Q "%SRC1%ARCHIVE"
	GOTO CONTINUE_CACHE_COPY_SINGLE
) ELSE IF /I "%AREYOUSURE%" EQU "N" (
		IF %VERBOSE_SINGLE% EQU 1 (
			GOTO CONTINUE_CACHE_COPY_SINGLE
		) ELSE (
			GOTO CACHE_COPIED_SINGLE
		)
) ELSE (
	GOTO DELETE_ARCHIVE_PROMPT_SINGLE
)

:CONTINUE_CACHE_COPY_SINGLE

IF %VERBOSE_SINGLE% EQU 1 (
	CALL :CONTINUE_CACHE_ANALYSIS_SINGLE
)

CALL :PROMPT_CACHE_ANALYSIS_SINGLE


:CONTINUE_CACHE_ANALYSIS_SINGLE

ECHO.
ECHO ANALYZING AND COMPARING CACHE FILES...
ECHO.

IF EXIST "%SRC1%ANALYSISLOGS" RMDIR /S /Q "%SRC1%ANALYSISLOGS"
IF NOT EXIST "%SRC1%ANALYSISLOGS" MKDIR "%SRC1%ANALYSISLOGS"

CALL :STARTTIMER

FOR /F "TOKENS=*" %%A IN ('DIR /B /A:D "%SRC1%*" ^| FINDSTR /V ARCHIVE ^| FINDSTR /V INFLOGS ^| FINDSTR /V ANALYSISLOGS ^| FINDSTR /V /RC:"\<BIN\>" ^| FINDSTR /V /RC:"\<__MACOSX\>"') DO (
	@ECHO OFF
	SET "A=%%A"
	SETLOCAL ENABLEDELAYEDEXPANSION
	SET V=FALSE
	IF /I !A! == NPIA00005 SET V=TRUE
	IF /I !A! == NPIA00010 SET V=TRUE
	IF /I !A! == NPEA00013 SET V=TRUE
  IF !V! == TRUE (
		FOR /F "TOKENS=*" %%B IN ('DIR /B /A:D "%SRC1%!A!\*"') DO (
			SET "B=%%B"
			IF !B! == USRDIR (
					FOR /F "TOKENS=*" %%C IN ('DIR /B /A:D "%SRC1%!A!\!B!\*"') DO (
						SET "C=%%C"
						IF !C! == CACHE (
								  FOR /F "TOKENS=*" %%J IN ('DIR /B /A:D "%SRC1%!A!\!B!\!C!\*"') DO (
									SET "J=%%J"
									SET Z=FALSE
									IF /I !J! == GLOBALS SET Z=TRUE
									IF /I !J! == OBJECTDEFS SET Z=TRUE
									IF /I !J! == SCENES SET Z=TRUE
									IF /I !J! == VIDEOS SET Z=TRUE
									IF /I !J! == OBJECTTHUMBS SET Z=TRUE
									IF /I !J! == OBJECTDYNAMIC SET Z=TRUE
									IF /I !J! == WORLDMAP SET Z=TRUE
  									IF !Z! == TRUE (
											 SET "EXT[0]=.sdat"
											 SET "EXT[1]=.bar"
											 (
											 FOR /L %%K IN (0, 1, 1) DO (
  										 		FOR /F "TOKENS=* DELIMS=" %%K IN ('DIR /B "%SRC1%!A!\!B!\!C!\!J!\*_DAT*!EXT[%%K]!" 2^>NUL ^| FINDSTR /I /V "GLOBALS.*\.bar"') DO (
  										  	SET "K=%%K"
  										  	SET "NAME1=%%~NK"
  										  	SET "SDAT=!NAME1:_DAT=!"
  										 		ECHO(!SDAT!
  										 )))>>"%SRC1%ANALYSISLOGS\%SDATFILE%"
  										 (
  										 FOR /F "TOKENS=* DELIMS=" %%X IN ('DIR /B "%SRC1%!A!\!B!\!C!\!J!\*_DAT*"  2^>NUL ^| FINDSTR /I /V .sdat ^| FINDSTR /I /V "OBJECTDEFS.*\.bar" ^| FINDSTR /I /V "SCENES.*\.bar"') DO (
  										  SET "X=%%X"
  										  SET "NAME2=%%~NX"
  										  SET "OTH=!NAME2:_DAT=!"
  										 	ECHO(!OTH!
  										 ))>>"%SRC1%ANALYSISLOGS\%OTHFILE%"
  										 (
  										 FOR /F "TOKENS=* DELIMS=" %%L IN ('DIR /B /A:-D "%SRC1%!A!\!B!\!C!\!J!\*_INF*" 2^>NUL') DO (
  										  SET "L=%%L"
  										  SET "INF=!L:_INF=!"
  										 	ECHO(!INF!
  										 ))>>"%SRC1%ANALYSISLOGS\%INFFILE%"
  										 (
  										 FOR /F "TOKENS=1 USEBACKQ DELIMS=|" %%M IN ("%SRC1%INFLOGS\%LOGTXT%") DO (
  										 	SET "M=%%M"
  										 ECHO(%%M
  										 ))>"%SRC1%ANALYSISLOGS\%URIHASHES%"
  										 FOR /F "TOKENS=*" %%N IN ('FINDSTR /L /V /G:"%SRC1%ANALYSISLOGS\%INFFILE%" "%SRC1%ANALYSISLOGS\%SDATFILE%"') DO ECHO %%N	!J!	SDAT	NOINF>>"%SRC1%ANALYSISLOGS\%NOINFSDAT%"
  										 FOR /F "TOKENS=*" %%N IN ('FINDSTR /L /V /G:"%SRC1%ANALYSISLOGS\%INFFILE%" "%SRC1%ANALYSISLOGS\%OTHFILE%"') DO ECHO %%N	!J!	OTH	NOINF>>"%SRC1%ANALYSISLOGS\%NOINFOTH%"
											 FINDSTR /L /V /G:"%SRC1%ANALYSISLOGS\%URIHASHES%" "%SRC1%ANALYSISLOGS\%INFFILE%" >> "%SRC1%ANALYSISLOGS\%BADINF%"
											 FOR /F "TOKENS=*" %%O IN ('FINDSTR /L /G:"%SRC1%ANALYSISLOGS\%SDATFILE%" "%SRC1%ANALYSISLOGS\%BADINF%"') DO ECHO %%O	!J!	SDAT	BADINF>>"%SRC1%ANALYSISLOGS\%BADINFSDAT%"
											 FOR /F "TOKENS=*" %%P IN ('FINDSTR /L /V /G:"%SRC1%ANALYSISLOGS\%SDATFILE%" "%SRC1%ANALYSISLOGS\%BADINF%"') DO ECHO %%P	!J!	OTH	BADINF>>"%SRC1%ANALYSISLOGS\%BADINFOTH%"
											 IF EXIST "%SRC1%ANALYSISLOGS\%BADINF%" DEL "%SRC1%ANALYSISLOGS\%BADINF%"
											 (TYPE "%SRC1%ANALYSISLOGS\%NOINFSDAT%" "%SRC1%ANALYSISLOGS\%BADINFSDAT%" "%SRC1%ANALYSISLOGS\%BADINFOTH%" "%SRC1%ANALYSISLOGS\%NOINFOTH%">"%SRC1%ANALYSISLOGS\%FINALREPORT%")>nul 2>&1
											 IF EXIST "%SRC1%ANALYSISLOGS\%NOINFSDAT%" DEL "%SRC1%ANALYSISLOGS\%NOINFSDAT%"
											 IF EXIST "%SRC1%ANALYSISLOGS\%NOINFOTH%" DEL "%SRC1%ANALYSISLOGS\%NOINFOTH%"
											 IF EXIST "%SRC1%ANALYSISLOGS\%BADINFSDAT%" DEL "%SRC1%ANALYSISLOGS\%BADINFSDAT%"
											 IF EXIST "%SRC1%ANALYSISLOGS\%BADINFOTH%" DEL "%SRC1%ANALYSISLOGS\%BADINFOTH%"
											 SORT /UNIQUE "%SRC1%ANALYSISLOGS\%FINALREPORT%" /O "%SRC1%ANALYSISLOGS\%FINALREPORT%"
											 FOR /F "TOKENS=1,2,3,4 USEBACKQ DELIMS=	" %%Q IN ("%SRC1%ANALYSISLOGS\%FINALREPORT%") DO (
  										 	SET "Q=%%Q"
  										 	SET "R=%%R"
  										 	SET "S=%%S"
  										 	SET "T=%%T"
  										 	IF !J! == !R! (
  										 			IF !S! == SDAT (
															SET "EXT[0]=.sdat"
															SET "EXT[1]=.bar"
															FOR /L %%U IN (0, 1, 1) DO (
																FOR /F "TOKENS=* DELIMS=" %%U IN ('DIR /B "%SRC1%!A!\!B!\!C!\!R!\*!Q!_DAT*!EXT[%%U]!" 2^>NUL ^| FINDSTR /I /V "GLOBALS.*\.bar"') DO (
  										 						SET "TMPU=%%U"
  	 															SET "U=%%~NXU"
																	CALL :SETSIZE "%SRC1%!A!\!B!\!C!\!R!\!U!"
																	IF !SIZE! EQU 0 (
																		IF EXIST "%SRC1%ARCHIVE\unknown\sdats\!R!\corrupted\!U!" (
  										 								BREAK
  										 							) ELSE (
  										 								XCOPY "%SRC1%!A!\!B!\!C!\!R!\!U!" "%SRC1%ARCHIVE\unknown\sdats\!R!\corrupted\" /Y >NUL
  										 								ECHO COPIED sdats/!R!/corrupted/!U! - UNKNOWN CORRUPTED SDAT/BAR
  										 							)
																	) ELSE (
																		IF EXIST "%SRC1%ARCHIVE\unknown\sdats\!R!\!U!" (
  										 								BREAK
  										 							) ELSE (
  										 								XCOPY "%SRC1%!A!\!B!\!C!\!R!\!U!" "%SRC1%ARCHIVE\unknown\sdats\!R!\" /Y >NUL
  										 								ECHO COPIED sdats/!R!/!U! - UNKNOWN SDAT/BAR
  										 							)
																	)
  										 					)
  										 				)
  										 			) ELSE (
  										 				FOR /F "TOKENS=* DELIMS=" %%W IN ('DIR /B "%SRC1%!A!\!B!\!C!\!R!\*!Q!_DAT*" 2^>NUL ^| FINDSTR /I /V .sdat ^| FINDSTR /I /V "OBJECTDEFS.*\.bar" ^| FINDSTR /I /V "SCENES.*\.bar"') DO (
  										 					SET "TMPW=%%W"
  										 					SET "W=%%~NXW"
																CALL :SETSIZE "%SRC1%!A!\!B!\!C!\!R!\!W!"
																IF !SIZE! EQU 0 (
																	IF EXIST "%SRC1%ARCHIVE\unknown\others\!R!\corrupted\!W!" (
  										 							BREAK
  										 						) ELSE (
  										 							XCOPY "%SRC1%!A!\!B!\!C!\!R!\!W!" "%SRC1%ARCHIVE\unknown\others\!R!\corrupted\" /Y >NUL
  										 							ECHO COPIED others/!R!/corrupted/!W! - UNKNOWN OTHER CORRUPTED FILES
  										 						)
																) ELSE (
  										 				 		IF EXIST "%SRC1%ARCHIVE\unknown\others\!R!\!W!" (
  										 							BREAK
  										 						) ELSE (
  										 							XCOPY "%SRC1%!A!\!B!\!C!\!R!\!W!" "%SRC1%ARCHIVE\unknown\others\!R!\" /Y >NUL
  										 							ECHO COPIED others/!R!/!W! - UNKNOWN OTHER FILES
  										 						)
																)
  										 				)
  										 			)
  										 	) ELSE (
  										 		BREAK
  										 	)
  										 )
                  	) ELSE (
                   		BREAK
                  	)
                  )
						) ELSE (
	 						BREAK
						)
					)
			) ELSE (
	 			BREAK
			)
		)
	) ELSE (
	 	BREAK
	)
	ENDLOCAL
)

CALL :STOPTIMER
CALL :DISPLAYTIMERRESULT

ECHO ANALYSIS COMPLETE. CHECK %FINALREPORT%

:CONTINUE_CACHE_COPY_ONLY_SINGLE

IF %VERBOSE_SINGLE% EQU 1 (
	CALL :PROMPT_VERBOSE_MODE_SINGLE
)

:CONTINUE_VERBOSE_MODE_SINGLE

SETLOCAL ENABLEDELAYEDEXPANSION

CALL SET "REMSLASH=%SRC1:~0,-1%"

SET "CACHENAME=%REMSLASH:\=" & SET "CACHENAME=%"

SET "DUPESPATH=!REMSLASH!\ARCHIVE\%DUPES%"
SET "NOFILESPATH=!REMSLASH!\ARCHIVE\%NOFILES%"

IF %VERBOSE_SINGLE% EQU 1 (
	ECHO INITIATING CACHE COPY SIMULATION...
	ECHO PLEASE WAIT... SIMULATING CACHE COPY FOR !CACHENAME!
	ECHO.
) ELSE (
	ECHO INITIATING CACHE COPY...
	ECHO PLEASE WAIT... COPYING CACHE FOR !CACHENAME!
)

IF EXIST "%NOFILESPATH%" DEL "%NOFILESPATH%"
IF EXIST "%DUPESPATH%" DEL "%DUPESPATH%"

FOR /F "TOKENS=*" %%A IN ('DIR /B /A:D "%SRC1%*" ^| FINDSTR /V ARCHIVE ^| FINDSTR /V INFLOGS ^| FINDSTR /V ANALYSISLOGS ^| FINDSTR /V DATA ^| FINDSTR /V /RC:"\<BIN\>" ^| FINDSTR /V /RC:"\<__MACOSX\>"') DO FOR /F "TOKENS=*" %%B IN ('DIR /B /A:D /S "%SRC1%%%A\*CACHE*" 2^>NUL ^| FINDSTR /V /RC:"\<__MACOSX\>"') DO (
	SET "A=%%A"
	SET "B=%%B"
	SET TRIG1=FALSE
	IF /I !A! == NPIA00005 SET TRIG1=TRUE
	IF /I !A! == NPIA00010 SET TRIG1=TRUE
	IF /I !A! == NPEA00013 SET TRIG1=TRUE
	IF !TRIG1! == TRUE (

		IF %VERBOSE_SINGLE% EQU 1 (
		
			CALL "%CACHE_COPY_SINGLE_EXE%" "!REMSLASH!" "!CACHENAME!" "!CACHENAME!" "!B!" "!REMSLASH!\INFLOGS\%LOGTXT%" "%FFPROBE%" "!DUPESPATH!" "!NOFILESPATH!" --verbose --debug
			
		) ELSE (
		
			CALL "%CACHE_COPY_SINGLE_EXE%" "!REMSLASH!" "!CACHENAME!" "!CACHENAME!" "!B!" "!REMSLASH!\INFLOGS\%LOGTXT%" "%FFPROBE%" "!DUPESPATH!" "!NOFILESPATH!"
		
		)
		
	)
)

ENDLOCAL

IF %VERBOSE_SINGLE% EQU 1 (
	ECHO.
	ECHO SIMULATION COMPLETE.
	GOTO START_FOUR
) ELSE (
	ECHO.
	ECHO CACHE COPY HAS BEEN COMPLETED.
)

:CACHE_COPIED_SINGLE

GOTO PROMPT_RENAME_SDATS_SINGLE

:PROMPT_RENAME_SDATS_SINGLE
ECHO.
SET /P "AREYOUSURE=WOULD YOU LIKE TO RENAME OBJECT SDAT's AND ODC's TO UUID_T### (Y/[N])? "
IF /I "%AREYOUSURE%"=="Y" (
	GOTO RENAME_OBJECT_SDAT_COPY_CACHE_SINGLE
) ELSE IF /I "%AREYOUSURE%"=="N" (
	GOTO PROMPT_RENAME_THUMBNAILS_SINGLE
) ELSE (
	GOTO PROMPT_RENAME_SDATS_SINGLE
)

:RENAME_OBJECT_SDAT_COPY_CACHE_SINGLE

CALL :STARTTIMER

SET EXT[0]=.sdat
SET EXT[1]=.odc

FOR /L %%I IN (0, 1, 1) DO (
	CALL SET Z1=%%EXT[%%I]%%
	FOR /F "TOKENS=*" %%A IN ('DIR /B /A:D "%SRC1%ARCHIVE\*" 2^>NUL') DO FOR /F "TOKENS=*" %%B IN ('DIR /B /S "%SRC1%ARCHIVE\%%A\*object*%%Z1%%" 2^>NUL') DO (
			SET "A=%%A"
			SET "B=%%B"
			SET "C=%%~NXB"
			SET "D=%%~NB"
			SET "E=%%~DPB"
			CALL :CONT_RENAME_SDATS_SINGLE
	)
)

ECHO DONE.
CALL :STOPTIMER
CALL :DISPLAYTIMERRESULT
GOTO PROMPT_RENAME_THUMBNAILS_SINGLE
CMD /K

:CONT_RENAME_SDATS_SINGLE

CALL SET "A=%%A%%"
CALL SET "B=%%B%%"
CALL SET "C=%%C%%"
CALL SET "D=%%D%%"
CALL SET "E=%%E%%"
CALL SET "F=%%Z1%%"

SET "SUBSTR1=%C:_=" & REM."%"
SET "SUBSTR2=%C:_=" & SET "SUBSTR2=%"

SETLOCAL ENABLEDELAYEDEXPANSION

SET "G=!B:%SRC1%ARCHIVE\=!"

SET I=1
SET "PATH=!G!"
SET "PATH!I!=%PATH:\=" & SET /A I+=1 & SET "PATH!I!=%"

IF /I !PATH5! == objects (
	IF /I !SUBSTR2! == object!Z1! (
		IF EXIST "!E!!PATH6!_T000!Z1!" (
			ECHO !PATH6!\!PATH7! ALREADY NAME TO !PATH6!_T000!Z1!.
		) ELSE (
 			REN "!B!" "!PATH6!_T000!Z1!"
 			ECHO !PATH6!\!PATH7! WAS RENAMED TO !PATH6!_T000!Z1!.
		)
	) ELSE (
		IF EXIST "!E!!PATH6!_!SUBSTR2!" (
			ECHO !PATH6!\!PATH7! ALREADY NAMED TO !PATH6!_!SUBSTR2!.
		) ELSE (
 			REN "!B!" "!PATH6!_!SUBSTR2!"
 			ECHO !PATH6!\!PATH7! WAS RENAMED TO !PATH6!_!SUBSTR2!.
		)
	)
) ELSE IF /I !PATH7! == objects (
	IF /I !SUBSTR2! == object!Z1! (
		IF EXIST "!E!!PATH8!_T000!Z1!" (
			ECHO !PATH8!\!PATH9! ALREADY NAME TO !PATH8!_T000!Z1!.
		) ELSE (
 			REN "!B!" "!PATH8!_T000!Z1!"
 			ECHO !PATH8!\!PATH9! WAS RENAMED TO !PATH8!_T000!Z1!.
		)
	) ELSE (
		IF EXIST "!E!!PATH8!_!SUBSTR2!" (
			ECHO !PATH8!\!PATH9! ALREADY NAMED TO !PATH8!_!SUBSTR2!.
		) ELSE (
 			REN "!B!" "!PATH8!_!SUBSTR2!"
 			ECHO !PATH8!\!PATH9! WAS RENAMED TO !PATH8!_!SUBSTR2!.
		)
	)
) ELSE (
	BREAK
)
ENDLOCAL
EXIT /B

:PROMPT_RENAME_THUMBNAILS_SINGLE
ECHO.
SET /P "AREYOUSURE=WOULD YOU LIKE TO RENAME OBJECT THUMBNAILS TO UUID_T###(S/L) (Y/[N])? "
IF /I "%AREYOUSURE%"=="Y" (
	GOTO RENAME_THUMBNAILS_COPY_CACHE_SINGLE
) ELSE IF /I "%AREYOUSURE%"=="N" (
	GOTO START_FOUR
) ELSE (
	GOTO PROMPT_RENAME_THUMBNAILS_SINGLE
)

:RENAME_THUMBNAILS_COPY_CACHE_SINGLE

CALL :STARTTIMER

SET THUMBSIZE[0].STR=large
SET THUMBSIZE[0].LET=L
SET THUMBSIZE[1].STR=small
SET THUMBSIZE[1].LET=S

FOR /L %%I IN (0, 1, 1) DO (
	CALL SET Z1=%%THUMBSIZE[%%I].STR%%
	CALL SET Z2=%%THUMBSIZE[%%I].LET%%
	FOR /F "TOKENS=*" %%A IN ('DIR /B /A:D "%SRC1%ARCHIVE\*" 2^>NUL') DO FOR /F "TOKENS=*" %%B IN ('DIR /B /S "%SRC1%ARCHIVE\%%A\*%%Z1%%*.png" 2^>NUL') DO (
			SET "A=%%A"
			SET "B=%%B"
			SET "C=%%~NXB"
			SET "D=%%~NB"
			SET "E=%%~DPB"
			CALL :CONT_RENAME_THUMBNAILS_SINGLE
	)
)

ECHO DONE.
CALL :STOPTIMER
CALL :DISPLAYTIMERRESULT
GOTO START_FOUR
CMD /K

:CONT_RENAME_THUMBNAILS_SINGLE

CALL SET "A=%%A%%"
CALL SET "B=%%B%%"
CALL SET "C=%%C%%"
CALL SET "D=%%D%%"
CALL SET "E=%%E%%"
CALL SET "F=%%Z1%%"

SET "SUBSTR1=%C:_=" & REM."%"
SET "SUBSTR2=%C:_=" & SET "SUBSTR2=%"

SETLOCAL ENABLEDELAYEDEXPANSION

SET "G=!B:%SRC1%ARCHIVE\=!"
SET "VER=!SUBSTR2:.png=!"

SET I=1
SET "PATH=!G!"
SET "PATH!I!=%PATH:\=" & SET /A I+=1 & SET "PATH!I!=%"

IF /I !PATH5! == objects (
	IF /I !SUBSTR2! == !Z1!.png (
		IF EXIST "!E!!PATH6!_T000!Z2!.png" (
			ECHO !PATH6!\!PATH7! ALREADY NAME TO !PATH6!_T000!Z2!.png.
		) ELSE (
 			REN "!B!" "!PATH6!_T000!Z2!.png"
 			ECHO !PATH6!\!PATH7! WAS RENAMED TO !PATH6!_T000!Z2!.png.
		)
	) ELSE (
		IF EXIST "!E!!PATH6!_!VER!!Z2!.png" (
			ECHO !PATH6!\!PATH7! ALREADY NAMED TO !PATH6!_!VER!!Z2!.png.
		) ELSE (
 			REN "!B!" "!PATH6!_!VER!!Z2!.png"
 			ECHO !PATH6!\!PATH7! WAS RENAMED TO !PATH6!_!VER!!Z2!.png.
		)
	)
) ELSE IF /I !PATH5! == scenes (
	IF /I !SUBSTR2! == !Z1!.png (
		IF EXIST "!E!!PATH6!_T000!Z2!.png" (
			ECHO !PATH6!\!PATH7! ALREADY NAME TO !PATH6!_T000!Z2!.png.
		) ELSE (
 			REN "!B!" "!PATH6!_T000!Z2!.png"
 			ECHO !PATH6!\!PATH7! WAS RENAMED TO !PATH6!_T000!Z2!.png.
		)
	) ELSE (
		IF EXIST "!E!!PATH6!_!VER!!Z2!.png" (
			ECHO !PATH6!\!PATH7! ALREADY NAMED TO !PATH6!_!VER!!Z2!.png.
		) ELSE (
 			REN "!B!" "!PATH6!_!VER!!Z2!.png"
 			ECHO !PATH6!\!PATH7! WAS RENAMED TO !PATH6!_!VER!!Z2!.png.
		)
	)
) ELSE IF /I !PATH7! == objects (
	IF /I !SUBSTR2! == !Z1!.png (
		IF EXIST "!E!!PATH8!_T000!Z2!.png" (
			ECHO !PATH8!\!PATH9! ALREADY NAME TO !PATH8!_T000!Z2!.png.
		) ELSE (
 			REN "!B!" "!PATH6!_T000!Z2!.png"
 			ECHO !PATH8!\!PATH9! WAS RENAMED TO !PATH8!_T000!Z2!.png.
		)
	) ELSE (
		IF EXIST "!E!!PATH8!_!VER!!Z2!.png" (
			ECHO !PATH8!\!PATH9! ALREADY NAMED TO !PATH8!_!VER!!Z2!.png.
		) ELSE (
 			REN "!B!" "!PATH8!_!VER!!Z2!.png"
 			ECHO !PATH8!\!PATH9! WAS RENAMED TO !PATH8!_!VER!!Z2!.png.
		)
	)
) ELSE IF /I !PATH7! == scenes (
	IF /I !SUBSTR2! == !Z1!.png (
		IF EXIST "!E!!PATH8!_T000!Z2!.png" (
			ECHO !PATH8!\!PATH9! ALREADY NAME TO !PATH8!_T000!Z2!.png.
		) ELSE (
 			REN "!B!" "!PATH8!_T000!Z2!.png"
 			ECHO !PATH8!\!PATH9! WAS RENAMED TO !PATH8!_T000!Z2!.png.
		)
	) ELSE (
		IF EXIST "!E!!PATH8!_!VER!!Z2!.png" (
			ECHO !PATH8!\!PATH9! ALREADY NAMED TO !PATH8!_!VER!!Z2!.png.
		) ELSE (
 			REN "!B!" "!PATH8!_!VER!!Z2!.png"
 			ECHO !PATH8!\!PATH9! WAS RENAMED TO !PATH8!_!VER!!Z2!.png.
		)
	)
) ELSE (
	BREAK
)

ENDLOCAL
EXIT /B

:COPY_CACHE_SINGLE_CUSTOM

(SET \n=^^^
%= THIS EMPTY LINE IS NECESSARY. =%
)

IF EXIST "%SRC1%ARCHIVE" (
	GOTO DELETE_ARCHIVE_PROMPT_CACHE_SINGLE_CUSTOM
) ELSE (
	MKDIR "%SRC1%ARCHIVE"
	GOTO CONT_1_CACHE_SINGLE_CUSTOM
)

:DELETE_ARCHIVE_PROMPT_CACHE_SINGLE_CUSTOM
ECHO.
SET /P "AREYOUSURE=DELETE ARCHIVE FOLDER (Y/[N])? "
ECHO.
IF /I "%AREYOUSURE%" EQU "Y" (
	RMDIR /S /Q "%SRC1%ARCHIVE"
	GOTO CONT_1_CACHE_SINGLE_CUSTOM
) ELSE IF /I "%AREYOUSURE%" EQU "N" (
	GOTO CONT_1_CACHE_SINGLE_CUSTOM
) ELSE (
	GOTO DELETE_ARCHIVE_PROMPT_CACHE_SINGLE_CUSTOM
)

:CONT_1_CACHE_SINGLE_CUSTOM

IF NOT EXIST "%JREPLStrings%" (
	CALL :CREATE_JREPLStrings > "%JREPLStrings%"
)

GOTO CONT_2_CACHE_SINGLE_CUSTOM

:RECALC_JREPL_STRINGS_CACHE_SINGLE_CUSTOM

IF EXIST "%JREPLStrings%" (
	CALL :CREATE_JREPLStrings > "%JREPLStrings%"
)

:CONT_2_CACHE_SINGLE_CUSTOM

SETLOCAL ENABLEDELAYEDEXPANSION

CALL SET "REMSLASH=%%SRC1:~0,-1%%"
SET "CACHENAME=%REMSLASH:\=" & SET "CACHENAME=%"

SET COUNTSTR=0
FOR /F "TOKENS=1,2,3,4 USEBACKQ DELIMS=	" %%A IN ("%JREPLStrings%") DO (
   SET /A COUNTSTR+=1
   SET "JREPLSTR[!COUNTSTR!].Search=%%A"
   SET "JREPLSTR[!COUNTSTR!].Replace=%%B"
   SET "JREPLSTR[!COUNTSTR!].Option=%%C"
   SET "JREPLSTR[!COUNTSTR!].Folder=%%D"
   SET "JREPLSTR[!COUNTSTR!].Count=!COUNTSTR!"
   SET "ALLVALUES=!ALLVALUES!!COUNTSTR! "
   ECHO !COUNTSTR!. %%D
)

SET LASTOPT=%COUNTSTR%

FOR /L %%J IN (1, 1, %LASTOPT%) DO (
	SET X=FALSE
	IF "!JREPLSTR[%%J].Folder!"=="SCENELISTS" SET X=TRUE
	IF "!JREPLSTR[%%J].Folder!"=="OBJECTCATALOGUES" SET X=TRUE
	IF "!JREPLSTR[%%J].Folder!"=="NAVIGATORS" SET X=TRUE
	IF "!JREPLSTR[%%J].Folder!"=="COMMERCE POINTS" SET X=TRUE
	IF "!JREPLSTR[%%J].Folder!"=="CONFIGS" SET X=TRUE
	IF "!JREPLSTR[%%J].Folder!"=="CONFIG XML" SET X=TRUE
	IF "!JREPLSTR[%%J].Folder!"=="MOTD-90B" SET X=TRUE
	IF "!JREPLSTR[%%J].Folder!"=="MOTD-F14" SET X=TRUE
	IF "!JREPLSTR[%%J].Folder!"=="NEWSVIEWER-EB6" SET X=TRUE
	IF "!JREPLSTR[%%J].Folder!"=="SCREENS" SET X=TRUE
	IF "!JREPLSTR[%%J].Folder!"=="RSS FEEDS" SET X=TRUE
	IF "!JREPLSTR[%%J].Folder!"=="SCENE VERSION XMLS" SET X=TRUE
	IF "!JREPLSTR[%%J].Folder!"=="PROFANITYDICTIONARIES" SET X=TRUE
	IF "!JREPLSTR[%%J].Folder!"=="SERVICE IDS" SET X=TRUE
	IF "!JREPLSTR[%%J].Folder!"=="AVATAR PFP" SET X=TRUE
	IF "!JREPLSTR[%%J].Folder!"=="HELPTEXT" SET X=TRUE
	IF "!JREPLSTR[%%J].Folder!"=="CLUBHOUSE XML" SET X=TRUE
	IF "!JREPLSTR[%%J].Folder!"=="XML" SET X=TRUE
	IF !X! == TRUE (
		SET "PRESENTNUM=!JREPLSTR[%%J].Count!"
		SET "PRESENTSTR=!JREPLSTR[%%J].Folder!"
		SET "OPT=!OPT!!PRESENTNUM! "
		SET "PRESENT=!PRESENT!!PRESENTSTR!!\n!"
		SET "PRESENT=!PRESENT:^=!"
	)
)

:GETOPTIONS_CACHE_SINGLE_CUSTOM
SET "OP=!OPT!"
ECHO.
ECHO PREPEND "Q" TO ANY OPTION TO QUERY ONLY (e.g., Q1 Q2 Q3)
ECHO PRESS ENTER TO QUERY THE PRESENT
ECHO PRESS P TO SEE PRESENT
ECHO PRESS 0 TO QUERY ALL W/O COPYING CACHE
ECHO PRESS A TO QUERY ALL AND COPY CACHE
ECHO PRESS R TO RECREATE JREPLStrings.txt
ECHO PRESS X TO GO BACK TO MAIN MENU
ECHO.
SET /P "OP=PICK JREPL STRING TO QUERY (e.g., 1 2 3) : "
ECHO.

SET "NOSPACES=!OP: =!"
IF "!NOSPACES!"=="" GOTO GETOPTIONS_CACHE_SINGLE_CUSTOM

IF [!OP!]==[] GOTO GETOPTIONS_CACHE_SINGLE_CUSTOM

IF /I "%OP%"=="P" ECHO !PRESENT! & GOTO GETOPTIONS_CACHE_SINGLE_CUSTOM

IF !OP! EQU 0 (
	FOR /L %%Q IN (1, 1, %LASTOPT%) DO (
		SET "SEARCH=!JREPLSTR[%%Q].Search!"
		SET "REPLACE=!JREPLSTR[%%Q].Replace!"
		SET "BLOCKLIST=!JREPLSTR[%%Q].Option!"
		SET "FOLDER=!JREPLSTR[%%Q].Folder!"
		ECHO QUERYING %LOGTXT% FOR !FOLDER!...
		IF NOT EXIST "%SRC1%ARCHIVE\!FOLDER!\!CACHENAME!" MKDIR "%SRC1%ARCHIVE\!FOLDER!\!CACHENAME!"
    CALL "%CUSTOM_QUERY%" "!SEARCH!" "!REPLACE!" "!BLOCKLIST!" "%SRC1%INFLOGS\%LOGTXT%" "%SRC1%ARCHIVE\!FOLDER!\!CACHENAME!\%CUSTOMINFLOG%"
    CALL :SETSIZE "%SRC1%ARCHIVE\!FOLDER!\!CACHENAME!\%CUSTOMINFLOG%"
    
    IF !SIZE! EQU 0 (
     	ECHO NO RESULTS FOR !FOLDER!
    	IF EXIST "%SRC1%ARCHIVE\!FOLDER!" RMDIR /S /Q "%SRC1%ARCHIVE\!FOLDER!"
    ) ELSE (
			IF EXIST "%SRC1%ARCHIVE\!FOLDER!\!CACHENAME!\%CUSTOMINFLOG%" ECHO %CUSTOMINFLOG% CREATED FOR !FOLDER!
    )
	)
	ENDLOCAL
	GOTO START_FOUR
)

IF /I "%OP%"=="X" ENDLOCAL & GOTO START_FOUR
IF /I "%OP%"=="R" ENDLOCAL & GOTO RECALC_JREPL_STRINGS_CACHE_SINGLE_CUSTOM
IF /I "%OP%"=="A" SET "OP=%ALLVALUES%"

FOR %%A IN (!OP!) DO (

   SET CUROPT=%%A
   SET FIRSTCHAR=!CUROPT:~0,1!

   IF /I "!FIRSTCHAR!"=="Q" (
   	SET CUROPT=!CUROPT:~1!
   	SET SKIPCOPY=1
   ) ELSE (
   	SET CUROPT=%%A
   	SET SKIPCOPY=0
   )
  CALL SET "COUNT=%%JREPLSTR[!CUROPT!].Count%%"
	CALL SET "SEARCH=%%JREPLSTR[!CUROPT!].Search%%"
	CALL SET "REPLACE=%%JREPLSTR[!CUROPT!].Replace%%"
	CALL SET "BLOCKLIST=%%JREPLSTR[!CUROPT!].Option%%"
	CALL SET "FOLDER=%%JREPLSTR[!CUROPT!].Folder%%"
	SET B=FALSE
	IF !COUNT! GTR %LASTOPT% SET B=TRUE
	IF !COUNT! NEQ +!COUNT! SET B=TRUE
	IF !COUNT! LSS 0 SET B=TRUE
	IF !B! == TRUE (
		SET "INVALOPTION=!CUROPT!" & ECHO INVALID OPTION !CUROPT!
	) ELSE (
		ECHO QUERYING %LOGTXT% FOR !FOLDER!...
		IF NOT EXIST "%SRC1%ARCHIVE\!FOLDER!\!CACHENAME!" MKDIR "%SRC1%ARCHIVE\!FOLDER!\!CACHENAME!"
    CALL "%CUSTOM_QUERY%" "!SEARCH!" "!REPLACE!" "!BLOCKLIST!" "%SRC1%INFLOGS\%LOGTXT%" "%SRC1%ARCHIVE\!FOLDER!\!CACHENAME!\%CUSTOMINFLOG%"
    CALL :SETSIZE "%SRC1%ARCHIVE\!FOLDER!\!CACHENAME!\%CUSTOMINFLOG%"
    
    IF !SIZE! EQU 0 (
      ECHO NO RESULTS FOR !FOLDER!
    	IF EXIST "%SRC1%ARCHIVE\!FOLDER!" RMDIR /S /Q "%SRC1%ARCHIVE\!FOLDER!"
    ) ELSE (
    	IF EXIST "%SRC1%ARCHIVE\!FOLDER!\!CACHENAME!\%CUSTOMINFLOG%"  ECHO %CUSTOMINFLOG% CREATED FOR !FOLDER!
    	IF !SKIPCOPY! EQU 0 (
    	   ECHO INITIATING CACHE COPY FOR !FOLDER!...
    	   FOR /F "TOKENS=*" %%A IN ('DIR /B /A:D "%SRC1%*" ^| FINDSTR /V ARCHIVE ^| FINDSTR /V INFLOGS ^| FINDSTR /V ANALYSISLOGS ^| FINDSTR /V DATA ^| FINDSTR /V /RC:"\<BIN\>" ^| FINDSTR /V /RC:"\<__MACOSX\>"') DO FOR /F "TOKENS=*" %%B IN ('DIR /B /A:D /S "%SRC1%%%A\*CACHE*" 2^>NUL ^| FINDSTR /V /RC:"\<__MACOSX\>"') DO (
    	   	SET "A=%%A"
    	   	SET "B=%%B"
			   	SET TRIG1=FALSE
			   	IF /I !A! == NPIA00005 SET TRIG1=TRUE
			   	IF /I !A! == NPIA00010 SET TRIG1=TRUE
			   	IF /I !A! == NPEA00013 SET TRIG1=TRUE
			   	IF !TRIG1! == TRUE (
			   	
			   		SET "DUPESPATH=!REMSLASH!\ARCHIVE\!FOLDER!\!CACHENAME!\%DUPES%"
			   		SET "NOFILESPATH=!REMSLASH!\ARCHIVE\!FOLDER!\!CACHENAME!\%NOFILES%"
			   	
    	   		IF EXIST "%NOFILESPATH%" DEL "%NOFILESPATH%"
    	   		IF EXIST "%DUPESPATH%" DEL "%DUPESPATH%"
    	   		
			   		ECHO PLEASE WAIT... COPYING !FOLDER! FOR !CACHENAME!
			   		
			   		CALL "%CACHE_COPY_SINGLE_EXE%" "!REMSLASH!" "!FOLDER!" "!CACHENAME!" "!B!" "!REMSLASH!\ARCHIVE\!FOLDER!\!CACHENAME!\%CUSTOMINFLOG%" "%FFPROBE%" "!DUPESPATH!" "!NOFILESPATH!" --customquery
         
			   	)
    	   )
    	)
    )
	)
)

ENDLOCAL
GOTO START_FOUR
CMD /K

::    CALL "%JREPLBAT%" SEARCH REPLACE /V /JMATCHQ /I /XSEQ /EXC BLOCKLIST /F "%SRC1%INFLOGS\%LOGTXT%" /O "%SRC1%ARCHIVE\!FOLDER!\!CACHENAME!\%CUSTOMINFLOG%"	
::    CALL "%CUSTOM_QUERY%" "!REMSLASH!" "!FOLDER!" "!CACHENAME!" "%SRC1%INFLOGS\%LOGTXT%" "%SRC1%ARCHIVE\!FOLDER!\!CACHENAME!\%CUSTOMINFLOG%"

:PROMPT_VERBOSE_MODE_SINGLE
ECHO.
SET /P "AREYOUSURE=WOULD YOU LIKE TO SIMULATE THE CACHE COPY (Y/[N])? "
IF /I "%AREYOUSURE%" EQU "Y" (
	GOTO CONTINUE_VERBOSE_MODE_SINGLE
) ELSE IF /I "%AREYOUSURE%" EQU "N" (
	GOTO START_FOUR
) ELSE (
	GOTO PROMPT_VERBOSE_MODE_SINGLE
)
EXIT /B


:PROMPT_CACHE_ANALYSIS_SINGLE
ECHO.
SET /P "AREYOUSURE=WOULD YOU LIKE TO ANALYZE CACHES FOR NO INFs/BAD INFs AND CORRUPT FILES (Y/[N])? "
IF /I "%AREYOUSURE%" EQU "Y" (
	GOTO CONTINUE_CACHE_ANALYSIS_SINGLE
) ELSE IF /I "%AREYOUSURE%" EQU "N" (
	GOTO CONTINUE_CACHE_COPY_ONLY_SINGLE
) ELSE (
	GOTO PROMPT_CACHE_ANALYSIS_SINGLE
)
EXIT /B


:DELETE_FINAL_INF_LOG_SINGLE
FOR /F "TOKENS=*" %%A IN ('DIR /B /A:-D "%SRC1%INFLOGS\%LOGTXT%" 2^>NUL') DO (
		@ECHO OFF
		SET "A=%%A"
		SETLOCAL ENABLEDELAYEDEXPANSION
		IF EXIST "%SRC1%INFLOGS\!A!" DEL "%SRC1%INFLOGS\!A!"
		ENDLOCAL
)
ECHO FINAL INF LOG DELETED.
ECHO.
GOTO MERGE_AND_CLEAN_UP_SINGLE
CMD /K

:REMOVE_RESERVED_SINGLE
FOR /F "TOKENS=*" %%A IN ('DIR /B /A:D "%SRC1%*" ^| FINDSTR /V ARCHIVE ^| FINDSTR /V INFLOGS ^| FINDSTR /V ANALYSISLOGS ^| FINDSTR /V /RC:"\<BIN\>" ^| FINDSTR /V /RC:"\<__MACOSX\>"') DO (
		@ECHO OFF
		SET "A=%%A"
		SETLOCAL ENABLEDELAYEDEXPANSION
		SET V=FALSE
		IF /I !A! == NPIA00005 SET V=TRUE
		IF /I !A! == NPIA00010 SET V=TRUE
		IF /I !A! == NPEA00013 SET V=TRUE
    IF !V! == TRUE (
    	FOR /F "TOKENS=*" %%B IN ('DIR /B /S  "%SRC1%!A!\*RESERVED*" 2^>NUL ^| FINDSTR /I /V /RC:"\<RESERVED.cyberducksegment\>"') DO (
				SET "B=%%B"
				SET "C=!B:%SRC1%=!"
				IF EXIST "!B!" (
					ECHO DELETING !C! ...
 					DEL "!B!"
				) ELSE (
					BREAK
				)
    	)
    ) ELSE (
    	BREAK
    )
ENDLOCAL
)
ECHO ALL RESERVED FILES HAVE BEEN DELETED.
GOTO START_FOUR
CMD /K


:GET_CACHE_VERSIONS_SINGLE

IF EXIST "%SRC1%%CACHEVERSLOG%" BREAK > "%SRC1%%CACHEVERSLOG%"

(ECHO CACHE	LASTRUN	PARAM	IDs	FOLDER	COREDATA.SHARC SHA1	COREDATA.BAR SHA1)>>"%SRC1%%CACHEVERSLOG%

FOR /F "TOKENS=*" %%A IN ('DIR /B /A:D "%SRC1%*" ^| FINDSTR /V ARCHIVE ^| FINDSTR /V INFLOGS ^| FINDSTR /V ANALYSISLOGS ^| FINDSTR /V /RC:"\<BIN\>" ^| FINDSTR /V /RC:"\<__MACOSX\>"') DO FOR /F "TOKENS=*" %%B IN ('DIR /B /A:D /S "%SRC1%%%A\*USRDIR*" ^| FINDSTR /V DATA ^| FINDSTR /V __MACOSX') DO (
		@ECHO OFF
		SET "A=%%A"
		SET "B=%%B"
		CALL :CONT_GET_CACHE_VER_SINGLE
)

ECHO CACHE VERSION HAVE BEEN LOGGED.
GOTO START_FOUR
CMD /K

:CONT_GET_CACHE_VER_SINGLE

CALL SET "A=%%A%%"
CALL SET "B=%%B%%"
CALL SET "C=%SRC1:~0,-1%"

CALL SET "REMLOCALDIR=%%B:%SRC1%%A%\=%%"
CALL SET "REMUSRDIR=%%B:\USRDIR=%%"

SET "CACHENAME=%C:\=" & SET "CACHENAME=%"

SETLOCAL ENABLEDELAYEDEXPANSION

SET TRIG1=FALSE
IF /I !A! == NPIA00005 SET TRIG1=TRUE
IF /I !A! == NPIA00010 SET TRIG1=TRUE
IF /I !A! == NPEA00013 SET TRIG1=TRUE
IF !TRIG1! == TRUE (
	IF EXIST "!REMUSRDIR!\PARAM.SFO" (
		IF /I !REMLOCALDIR! == USRDIR (
			ECHO !CACHENAME! : PASRSING PARAM.SFO ...
			CALL "%JREPLBAT%" "VERSION(.*?)HM" "$txt=$1" /I /XSEQ /JMATCHQ /F "!REMUSRDIR!\PARAM.SFO" /M /O "!REMUSRDIR!\VER.SFO"
			CALL "%JREPLBAT%" "\x00" "" /M /F "!REMUSRDIR!\VER.SFO" /O -
			CALL "%JREPLBAT%" "\x01" "" /M /F "!REMUSRDIR!\VER.SFO" /O -
			CALL "%JREPLBAT%" "\x08" "" /M /F "!REMUSRDIR!\VER.SFO" /O -
			CALL "%JREPLBAT%" "\x0A" "" /M /F "!REMUSRDIR!\VER.SFO" /O -
			CALL "%JREPLBAT%" "\x0D" "" /M /F "!REMUSRDIR!\VER.SFO" /RTN PARAMVER
			CALL "%JREPLBAT%" "\x00\x00NP(.*?)\x00\x00" "$txt='NP'+$1" /I /XSEQ /JMATCHQ /F "!REMUSRDIR!\PARAM.SFO" /M /O "!REMUSRDIR!\IDS.SFO"
			CALL "%JREPLBAT%" "\x00" "" /M /F "!REMUSRDIR!\IDS.SFO" /O -
			CALL "%JREPLBAT%" "\x0A" "" /M /F "!REMUSRDIR!\IDS.SFO" /O -
			CALL "%JREPLBAT%" "\x0D" "" /M /F "!REMUSRDIR!\IDS.SFO" /RTN ID
		)
	)
	IF EXIST "!REMUSRDIR!\VER.SFO" DEL "!REMUSRDIR!\VER.SFO"
	IF EXIST "!REMUSRDIR!\IDS.SFO" DEL "!REMUSRDIR!\IDS.SFO"
	DIR /B /A:-D "!B!\LASTRUN.TXT" 2>NUL >NUL
	IF !ERRORLEVEL! EQU 0 (
		ECHO !CACHENAME! : PASRSING LASTRUN.TXT ...
 		FOR /F "TOKENS=* USEBACKQ DELIMS=" %%C IN ("!B!\LASTRUN.TXT") DO (
			SET "LASTRUNVER=%%C"
 		)
	)
  IF EXIST "!B!\COREDATA.SHARC" (
  	CALL :GET_FILE_INFO "!B!\COREDATA.SHARC"
		SET "SHARC_SHA1=!SHA1HASH!"
  )
  IF EXIST "!B!\COREDATA.BAR" (
  	CALL :GET_FILE_INFO "!B!\COREDATA.BAR"
		SET "BAR_SHA1=!SHA1HASH!"
  )
	IF /I !REMLOCALDIR! == USRDIR (
		(ECHO !CACHENAME!	!LASTRUNVER!	!PARAMVER!	!ID!	!A!	!SHARC_SHA1!	!BAR_SHA1!)>>"%SRC1%%CACHEVERSLOG%"
	)
) ELSE (
	BREAK
)

ENDLOCAL
EXIT /B


:CACHE_UNLIMITED

:START_ONE
ECHO.
ECHO.
ECHO.^|----------------------^|
ECHO.^| UNLIMITED CACHE MODE ^|
ECHO.^|----------------------^|
ECHO.
ECHO.
ECHO 1. ARCHIVE CACHES SEPARATE
ECHO 2. ARCHIVE CACHES COMBINED
ECHO 3. SUSPEND CMD
ECHO.
ECHO ENTER 1O TO SKIP INFLOG CHECK FOR ARCHIVE CACHES SEPARATE
ECHO.ENTER 2O TO SKIP INFLOG CHECK FOR ARCHIVE CACHES COMBINED
ECHO.
SET /P CHOICE=ENTER A NUMBER TO PERFORM AN ACTION: 
ECHO.

SETLOCAL ENABLEDELAYEDEXPANSION
SET "NOSPACES=!CHOICE: =!"
IF "!NOSPACES!"=="" GOTO START_ONE
ENDLOCAL

IF NOT '%CHOICE%'=='' SET CHOICE=%CHOICE:~0,2%
IF '%CHOICE%'=='1' GOTO ARCHIVE_ONE
IF /I '%CHOICE%'=='1O' GOTO ARCHIVE_ONE_OVERRIDE
IF '%CHOICE%'=='2' GOTO ARCHIVE_TWO
IF /I '%CHOICE%'=='2O' GOTO ARCHIVE_TWO_OVERRIDE
IF '%CHOICE%'=='3' GOTO ARCHIVE_THREE


ECHO "%CHOICE%" IS NOT VALID, TRY AGAIN
ECHO.
GOTO START_ONE

:ARCHIVE_ONE
CALL :OPTION_ONE
GOTO ARCHIVE_END

:ARCHIVE_ONE_OVERRIDE
CALL :START_TWO
GOTO ARCHIVE_END

:ARCHIVE_TWO
CALL :OPTION_TWO
GOTO ARCHIVE_END

:ARCHIVE_TWO_OVERRIDE
CALL :START_THREE
GOTO ARCHIVE_END

:ARCHIVE_THREE
CMD /K
GOTO ARCHIVE_END

:ARCHIVE_END
CMD /K

:OPTION_ONE
SET LOOP2=0
:CREATE_INF_LOGS_UNLIMITED_SEP

FOR /F "TOKENS=*" %%A IN ('DIR /B /A:D "%SRC1%*" ^| FINDSTR /V ARCHIVE ^| FINDSTR /V INFLOGS ^| FINDSTR /V ANALYSISLOGS ^| FINDSTR /V /RC:"\<BIN\>" ^| FINDSTR /V /RC:"\<__MACOSX\>"') DO FOR /F "TOKENS=*" %%B IN ('DIR /B /A:D "%SRC1%%%A\*" ^| FINDSTR /V /RC:"\<__MACOSX\>"') DO (
		@ECHO OFF
		SET "A=%%A"
		SET "B=%%B"
		SETLOCAL ENABLEDELAYEDEXPANSION
		SET V=FALSE
		IF /I !B! == NPIA00005 SET V=TRUE
		IF /I !B! == NPIA00010 SET V=TRUE
		IF /I !B! == NPEA00013 SET V=TRUE
    IF !V! == TRUE (
	  	FOR /F "TOKENS=*" %%C IN ('DIR /B /A:D "%SRC1%!A!\!B!\*"') DO (
	  		SET "C=%%C"
	  		IF !C! == USRDIR (
	  				IF EXIST "%~DP0!A!\!B!\!C!\DATALOG.DAT" DEL "%~DP0!A!\!B!\!C!\DATALOG.DAT"
	  				FOR /F "TOKENS=*" %%D IN ('DIR /B /A:D "%SRC1%!A!\!B!\!C!\*"') DO (
	  					SET "D=%%D"
	  					IF !D! == CACHE (
	  							FOR /F "TOKENS=*" %%E IN ('DIR /B /A:D "%SRC1%!A!\!B!\!C!\!D!\*"') DO (
	  									SET "E=%%E"
	  									IF EXIST "%SRC1%!A!\INFLOGS\log_!E!.txt" (
	  										ECHO !A!\INFLOGS\log_!E!.txt ALREADY CREATED
	  									) ELSE (
	  										CALL "%DEINF%" "%~DP0!A!\!B!\!C!\!D!\!E!" -l -lo "%SRC1%!A!\INFLOGS\log_!E!.txt"
	  										IF EXIST "%SRC1%!A!\INFLOGS\log_!E!.txt" ECHO CREATED !A!\INFLOGS\log_!E!.txt
	  									)
									)
							) ELSE (
		 						BREAK
							)
						)
				) ELSE (
		 			BREAK
				)
	  	)
		) ELSE (
			FOR /F "TOKENS=*" %%F IN ('DIR /B /A:D "%SRC1%!A!\!B!\*" ^| FINDSTR /V ARCHIVE ^| FINDSTR /V INFLOGS ^| FINDSTR /V ANALYSISLOGS ^| FINDSTR /V /RC:"\<BIN\>" ^| FINDSTR /V /RC:"\<__MACOSX\>"') DO (
				SET "F=%%F"
				SET Z=FALSE
				IF /I !F! == NPIA00005 SET Z=TRUE
				IF /I !F! == NPIA00010 SET Z=TRUE
				IF /I !F! == NPEA00013 SET Z=TRUE
   			IF !Z! == TRUE (
	  			FOR /F "TOKENS=*" %%G IN ('DIR /B /A:D "%SRC1%!A!\!B!\!F!\*"') DO (
	  				SET "G=%%G"
	  				IF !G! == USRDIR (
	  						FOR /F "TOKENS=*" %%H IN ('DIR /B /A:D "%SRC1%!A!\!B!\!F!\!G!\*"') DO (
	  							SET "H=%%H"
	  							IF !H! == CACHE (
	  									FOR /F "TOKENS=*" %%I IN ('DIR /B /A:D "%SRC1%!A!\!B!\!F!\!G!\!H!\*"') DO (
	  											SET "I=%%I"
	  											IF EXIST "%SRC1%!A!\!B!\INFLOGS\log_!I!.txt" (
	  												ECHO !A!\INFLOGS\log_!I!.txt ALREADY CREATED
	  											) ELSE (
	  												CALL "%DEINF%" "%~DP0!A!\!B!\!F!\!G!\!H!\!I!" -l -lo "%SRC1%!A!\!B!\INFLOGS\log_!I!.txt"
	  												IF EXIST "%SRC1%!A!\!B!\INFLOGS\log_!I!.txt" ECHO CREATED !A!\INFLOGS\log_!I!.txt
	  											)
	  											
											)
									) ELSE (
		 								BREAK
									)
								)
						) ELSE (
		 					BREAK
						)
	  			)
				) ELSE (
		 			BREAK
				)
			)
		)
	 	ENDLOCAL
)


:INF_LOG_COUNTER_UNLIMITED_SEP

SETLOCAL ENABLEEXTENSIONS ENABLEDELAYEDEXPANSION

SET COUNTFOLDER=0
FOR /F "TOKENS=*" %%N IN ('DIR /B /A:D "%SRC1%*" ^| FINDSTR /V ARCHIVE ^| FINDSTR /V INFLOGS ^| FINDSTR /V ANALYSISLOGS ^| FINDSTR /V /RC:"\<BIN\>" ^| FINDSTR /V /RC:"\<__MACOSX\>"') DO SET /A COUNTFOLDER+=1

SET COUNTFILE=0
FOR /F "TOKENS=*" %%O IN ('DIR /B /A:D "%SRC1%*" ^| FINDSTR /V ARCHIVE ^| FINDSTR /V INFLOGS ^| FINDSTR /V ANALYSISLOGS ^| FINDSTR /V /RC:"\<BIN\>" ^| FINDSTR /V /RC:"\<__MACOSX\>"') DO FOR /F "TOKENS=* DELIMS=" %%P IN ('DIR /B /A:-D "%SRC1%%%O\INFLOGS\*.txt" 2^>NUL ^| FINDSTR /V %LOGTXT% ^| FINDSTR /V %CUSTOMINFLOG%') DO SET /A COUNTFILE+=1

SET COUNTFILED=0
FOR /F "TOKENS=*" %%R IN ('DIR /B /A:D "%SRC1%*" ^| FINDSTR /V ARCHIVE ^| FINDSTR /V INFLOGS ^| FINDSTR /V ANALYSISLOGS ^| FINDSTR /V /RC:"\<BIN\>" ^| FINDSTR /V /RC:"\<__MACOSX\>"') DO FOR /F "TOKENS=*" %%S IN ('DIR /B /A:D "%SRC1%%%R\*" ^| FINDSTR /V ARCHIVE ^| FINDSTR /V INFLOGS ^| FINDSTR /V ANALYSISLOGS ^| FINDSTR /V /RC:"\<BIN\>" ^| FINDSTR /V /RC:"\<__MACOSX\>"') DO FOR /F "TOKENS=* DELIMS=" %%T IN ('DIR /B /A:-D "%SRC1%%%R\%%S\INFLOGS\*.txt" 2^>NUL ^| FINDSTR /V %LOGTXT% ^| FINDSTR /V %CUSTOMINFLOG%') DO SET /A COUNTFILED+=1

SET /A CF1=COUNTFOLDER
SET /A CF2=COUNTFILE+COUNTFILED
SET /A DIV=!CF2!/!CF1!
ECHO.
ECHO TOTAL CACHES: !CF1!
ECHO TOTAL INF LOGS TO BE MERGED: !CF2!
ECHO.
SET /A LOOP2=%LOOP2%+1
IF "%LOOP2%"=="3" GOTO MERGE_AND_CLEAN_UP_UNLIMITED_SEP
IF %DIV% NEQ 10 GOTO CREATE_INF_LOGS_UNLIMITED_SEP
ENDLOCAL

:MERGE_AND_CLEAN_UP_UNLIMITED_SEP
(
FOR /F "TOKENS=*" %%A IN ('DIR /B /A:D "%SRC1%*" ^| FINDSTR /V ARCHIVE ^| FINDSTR /V INFLOGS ^| FINDSTR /V ANALYSISLOGS ^| FINDSTR /V /RC:"\<BIN\>" ^| FINDSTR /V /RC:"\<__MACOSX\>"') DO FOR /F "TOKENS=*" %%B IN ('DIR /B /S /A:D "%SRC1%%%A\*INFLOGS*" 2^>NUL') DO (
		@ECHO OFF
		SETLOCAL ENABLEDELAYEDEXPANSION
		SET "A=%%A"
		SET "B=%%B"
		SET "C=!B:%SRC1%=!"
		SET "D=!C:\INFLOGS=!"
		IF EXIST "%SRC1%!D!%LOGTXT%" MOVE "%SRC1%!D!%LOGTXT%" "!B!\%LOGTXT%" >NUL
		ECHO !D!
		ENDLOCAL
))>dirs.txt

FOR /F "TOKENS=* USEBACKQ DELIMS=" %%A IN ("%SRC1%dirs.txt") DO FOR /F "TOKENS=* DELIMS=" %%B IN ('DIR /B /A:D "%SRC1%%%A\*" 2^>NUL ^| FINDSTR /V ARCHIVE ^| FINDSTR /V INFLOGS ^| FINDSTR /V ANALYSISLOGS ^| FINDSTR /V /RC:"\<BIN\>" ^| FINDSTR /V /RC:"\<__MACOSX\>"') DO (
		@ECHO OFF
		SET "A=%%A"
		SET "B=%%B"
		CALL :CONT_MERGE_AND_CLEAN_UP_UNLIMITED_SEP
)

IF EXIST "%SRC1%dirs.txt" DEL "%SRC1%dirs.txt"
ECHO.
ECHO ALL INFLOGS CREATED
GOTO START_TWO
CMD /K

:CONT_MERGE_AND_CLEAN_UP_UNLIMITED_SEP

CALL SET "A=%%A%%"
CALL SET "B=%%B%%"
CALL SET "REMSLASH=%%SRC1:~0,-1%%"

SET "SRCFOLDER=%A:\=" & REM."%"

SETLOCAL ENABLEDELAYEDEXPANSION

SET Z=FALSE
IF /I !B! == NPIA00005 SET Z=TRUE
IF /I !B! == NPIA00010 SET Z=TRUE
IF /I !B! == NPEA00013 SET Z=TRUE
IF !Z! == TRUE (
	IF EXIST "%SRC1%!A!\INFLOGS\%LOGTXT%" (


		ECHO !SRCFOLDER!\INFLOGS\%LOGTXT% ALREADY CREATED... SKIPPING...

	) ELSE (
		ECHO.
		IF EXIST "!REMSLASH!\!A!\INFLOGS" (
		
			ECHO INITIATING THE INFLOG MERGE AND CLEAN UP FOR !SRCFOLDER!...
			ECHO.
		
			CALL "%INFLOG_MERGER%" "!REMSLASH!\!A!\INFLOGS" "!REMSLASH!\!A!\INFLOGS\%LOGTXT%" "!REMSLASH!\!A!\INFLOGS\%LOGTXT%" "!B!" "!SRCFOLDER!"
		
			ECHO.
			IF EXIST "!REMSLASH!\!A!\INFLOGS\%LOGTXT%" ECHO FINAL INFLOG CREATED @ !SRCFOLDER!\INFLOGS\%LOGTXT%
			ECHO.
		)
	)
) ELSE (
 	BREAK
)

ENDLOCAL
EXIT /B

:START_TWO
SET CHOICE=
ECHO.
ECHO.
ECHO.^|---------------------------------^|
ECHO.^| UNLIMITED CACHE MODE - SEPARATE ^|
ECHO.^|---------------------------------^|
ECHO.
ECHO.
ECHO 0.  CREATE OBJECT/SCENE THUMBNAIL LOG
ECHO 1.  CREATE OBJECT/SCENE SDAT LOGS ( ENTER 1O TO DELETE LOGS )
ECHO 2.  COPY CACHES ONLY
ECHO 3.  CREATE OBJECT/SCENE SDAT LOGS THEN COPY CACHES
ECHO 4.  VERBOSE MODE - NO COPYING. ONLY SHOW CMD AND LOG OUTPUTS
ECHO 5.  DELETE FINAL INFLOGS
ECHO 6.  RENAME OBJECT SDAT's AND ODC's IN THE ARCHIVE TO THEIR UUID
ECHO 7.  RENAME OBJECT/SCENE THUMBNAILS IN THE ARCHIVE TO THEIR UUID/SCENEID
ECHO 8.  DELETE RESERVED FILES
ECHO 9.  GET CACHE VERSIONS FROM LASTRUN.TXT/PARAM.SFO
ECHO 10. GO BACK
ECHO 11. SUSPEND CMD
ECHO.
ECHO.
ECHO.^|--------------------------^|
ECHO.^| DOUBLE FOLDERS SUPPORTED ^|
ECHO.^|--------------------------^|
ECHO.
ECHO.
SET /P CHOICE=ENTER A NUMBER TO PERFORM AN ACTION: 
ECHO.

SETLOCAL ENABLEDELAYEDEXPANSION
SET "NOSPACES=!CHOICE: =!"
IF "!NOSPACES!"=="" GOTO START_TWO
ENDLOCAL

IF NOT '%CHOICE%'=='' SET CHOICE=%CHOICE:~0,2%
IF '%CHOICE%'=='0' GOTO CHOICE_ZERO_UNLIMITED_SEP
IF '%CHOICE%'=='1' GOTO CHOICE_ONE_UNLIMITED_SEP
IF /I '%CHOICE%'=='1O' GOTO CHOICE_ONE_UNLIMITED_SEP_OVERRIDE
IF '%CHOICE%'=='2' GOTO CHOICE_TWO_UNLIMITED_SEP
IF '%CHOICE%'=='3' GOTO CHOICE_THREE_UNLIMITED_SEP
IF '%CHOICE%'=='4' GOTO CHOICE_FOUR_UNLIMITED_SEP
IF '%CHOICE%'=='5' GOTO CHOICE_FIVE_UNLIMITED_SEP
IF '%CHOICE%'=='6' GOTO CHOICE_SIX_UNLIMITED_SEP
IF '%CHOICE%'=='7' GOTO CHOICE_SEVEN_UNLIMITED_SEP
IF '%CHOICE%'=='8' GOTO CHOICE_EIGHT_UNLIMITED_SEP
IF '%CHOICE%'=='9' GOTO CHOICE_NINE_UNLIMITED_SEP
IF '%CHOICE%'=='10' GOTO CHOICE_TEN_UNLIMITED_SEP
IF '%CHOICE%'=='11' GOTO CHOICE_ELEVEN_UNLIMITED_SEP

ECHO "%CHOICE%" IS NOT VALID, TRY AGAIN
ECHO.
GOTO START_TWO

:CHOICE_ZERO_UNLIMITED_SEP
CALL :CREATE_LOGS_THUMBNAILS_UNLIMITED_SEP
GOTO CHOICE_ONE_END

:CHOICE_ONE_UNLIMITED_SEP
SET SWITCH_UNLIMITED_SEP=0
SET VERBOSE_UNLIMITED_SEP=0
SET DELFLAG=0
CALL :CREATE_LOGS_UNLIMITED_SEP
GOTO CHOICE_ONE_END

:CHOICE_ONE_UNLIMITED_SEP_OVERRIDE
SET SWITCH_UNLIMITED_SEP=0
SET VERBOSE_UNLIMITED_SEP=0
SET DELFLAG=1
CALL :CREATE_LOGS_UNLIMITED_SEP
GOTO CHOICE_ONE_END

:CHOICE_TWO_UNLIMITED_SEP
SET SWITCH_UNLIMITED_SEP=0
SET VERBOSE_UNLIMITED_SEP=0
CALL :COPY_CACHE_UNLIMITED_SEP
GOTO CHOICE_ONE_END

:CHOICE_THREE_UNLIMITED_SEP
SET SWITCH_UNLIMITED_SEP=1
SET VERBOSE_UNLIMITED_SEP=0
CALL :COPY_CACHE_UNLIMITED_SEP
GOTO CHOICE_ONE_END

:CHOICE_FOUR_UNLIMITED_SEP
SET SWITCH_UNLIMITED_SEP=0
SET VERBOSE_UNLIMITED_SEP=1
CALL :COPY_CACHE_UNLIMITED_SEP
GOTO CHOICE_ONE_END

:CHOICE_FIVE_UNLIMITED_SEP
CALL :DELETE_FINAL_INF_LOG_UNLIMITED_SEP
GOTO CHOICE_ONE_END

:CHOICE_SIX_UNLIMITED_SEP
CALL :RENAME_OBJECT_SDAT_COPY_CACHE_UNLIMITED_SEP
GOTO CHOICE_ONE_END

:CHOICE_SEVEN_UNLIMITED_SEP
CALL :RENAME_THUMBNAILS_COPY_CACHE_UNLIMITED_SEP
GOTO CHOICE_ONE_END

:CHOICE_EIGHT_UNLIMITED_SEP
CALL :REMOVE_RESERVED_UNLIMITED_SEP
GOTO CHOICE_ONE_END

:CHOICE_NINE_UNLIMITED_SEP
CALL :GET_CACHE_VERSIONS_UNLIMITED_SEP
GOTO CHOICE_ONE_END

:CHOICE_TEN_UNLIMITED_SEP
CALL :START_ONE
GOTO CHOICE_ONE_END

:CHOICE_ELEVEN_UNLIMITED_SEP
CMD /K
GOTO CHOICE_ONE_END

:CHOICE_ONE_END
CMD /K


:CREATE_LOGS_THUMBNAILS_UNLIMITED_SEP
ECHO INITIATING THUMBNAIL LOG CREATION...
ECHO.
SET DELFLAG=0
ECHO DELFLAG = %DELFLAG%
ECHO.

(
FOR /F "TOKENS=*" %%A IN ('DIR /B /A:D "%SRC1%*" ^| FINDSTR /V ARCHIVE ^| FINDSTR /V INFLOGS ^| FINDSTR /V ANALYSISLOGS ^| FINDSTR /V /RC:"\<BIN\>" ^| FINDSTR /V /RC:"\<__MACOSX\>"') DO FOR /F "TOKENS=*" %%B IN ('DIR /B /S /A:D "%SRC1%%%A\*INFLOGS*" 2^>NUL') DO (
		@ECHO OFF
		SETLOCAL ENABLEDELAYEDEXPANSION
		SET "A=%%A"
		SET "B=%%B"
		SET "C=!B:%SRC1%=!"
		SET "D=!C:\INFLOGS=!"
		ECHO !D!
		ENDLOCAL
))>dirs.txt

FOR /F "TOKENS=* USEBACKQ DELIMS=" %%A IN ("%SRC1%dirs.txt") DO FOR /F "TOKENS=* DELIMS=" %%B IN ('DIR /B /A:D "%SRC1%%%A\*" 2^>NUL ^| FINDSTR /V ARCHIVE ^| FINDSTR /V INFLOGS ^| FINDSTR /V ANALYSISLOGS ^| FINDSTR /V /RC:"\<BIN\>" ^| FINDSTR /V /RC:"\<__MACOSX\>"') DO (
		@ECHO OFF
		SET "A=%%A"
		SET "B=%%B"
		CALL :THUMBNAIL_LOG_CREATION_UNLIMITED_SEP
)

IF EXIST "%SRC1%dirs.txt" DEL "%SRC1%dirs.txt"
GOTO START_TWO
CMD /K

:THUMBNAIL_LOG_CREATION_UNLIMITED_SEP

CALL SET "A=%%A%%"
CALL SET "B=%%B%%"
CALL SET "REMSLASH=%SRC1:~0,-1%"
SET "SRCFOLDER=%A:\=" & REM."%"

SETLOCAL ENABLEDELAYEDEXPANSION

SET Z=FALSE
IF /I !B! == NPIA00005 SET Z=TRUE
IF /I !B! == NPIA00010 SET Z=TRUE
IF /I !B! == NPEA00013 SET Z=TRUE
IF !Z! == TRUE (
	IF EXIST "!REMSLASH!\!A!\%THUMBS%" (
	   	ECHO !SRCFOLDER!\%THUMBS% ALREADY CREATED... SKIPPING...
	   	ECHO.
	   	IF !DELFLAG! EQU 1 DEL "!REMSLASH!\!A!\%THUMBS%"
	) ELSE (
		IF EXIST "!REMSLASH!\!A!\INFLOGS\%LOGTXT%" (
			ECHO CREATING THUMBNAIL LOG CREATION FOR !SRCFOLDER!...
			CALL :STARTTIMER
			CALL "%LOG_THUMBNAILS%" "!REMSLASH!\!A!\INFLOGS\%LOGTXT%" "!REMSLASH!\!A!\%THUMBS%"
			CALL :STOPTIMER
			IF EXIST "!REMSLASH!\!A!\%THUMBS%" (
				ECHO THUMBNAIL LOG CREATED @ !SRCFOLDER!\%THUMBS% ^( !HOURS!h:!MINS!m:!SECS!s ^)
				ECHO.
			) 
		) ELSE (
			ECHO %LOGTXT% NOT FOUND @ !SRCFOLDER!\INFLOGS\%LOGTXT%... SKIPPING...
			ECHO.
		)
	)
) ELSE (
 	BREAK
)
ENDLOCAL
EXIT /B

:CREATE_LOGS_UNLIMITED_SEP
ECHO INITIATING OBJECT/SCENE LOG CREATION...
ECHO.
ECHO DELFLAG = %DELFLAG%
ECHO.
(
FOR /F "TOKENS=*" %%A IN ('DIR /B /A:D "%SRC1%*" ^| FINDSTR /V ARCHIVE ^| FINDSTR /V INFLOGS ^| FINDSTR /V ANALYSISLOGS ^| FINDSTR /V /RC:"\<BIN\>" ^| FINDSTR /V /RC:"\<__MACOSX\>"') DO FOR /F "TOKENS=*" %%B IN ('DIR /B /S /A:D "%SRC1%%%A\*INFLOGS*" 2^>NUL') DO (
		@ECHO OFF
		SETLOCAL ENABLEDELAYEDEXPANSION
		SET "A=%%A"
		SET "B=%%B"
		SET "C=!B:%SRC1%=!"
		SET "D=!C:\INFLOGS=!"
		ECHO !D!
		ENDLOCAL
))>dirs.txt

FOR /F "TOKENS=* USEBACKQ DELIMS=" %%A IN ("%SRC1%dirs.txt") DO FOR /F "TOKENS=* DELIMS=" %%B IN ('DIR /B /A:D "%SRC1%%%A\*" 2^>NUL ^| FINDSTR /V ARCHIVE ^| FINDSTR /V INFLOGS ^| FINDSTR /V ANALYSISLOGS ^| FINDSTR /V /RC:"\<BIN\>" ^| FINDSTR /V /RC:"\<__MACOSX\>"') DO (
		@ECHO OFF
		SET "A=%%A"
		SET "B=%%B"
		CALL :OBJECT_LOG_CREATION_UNLIMITED_SEP
)

GOTO SCENE_LOG_UNLIMITED_SEP
CMD /K

:OBJECT_LOG_CREATION_UNLIMITED_SEP

CALL SET "A=%%A%%"
CALL SET "B=%%B%%"
CALL SET "REMSLASH=%%SRC1:~0,-1%%"
SET "SRCFOLDER=%A:\=" & REM."%" 

SETLOCAL ENABLEDELAYEDEXPANSION

SET Z=FALSE
IF /I !B! == NPIA00005 SET Z=TRUE
IF /I !B! == NPIA00010 SET Z=TRUE
IF /I !B! == NPEA00013 SET Z=TRUE
IF !Z! == TRUE (
	IF /I EXIST "!REMSLASH!\!A!\%OBJECTS%" (
	  	ECHO !SRCFOLDER!\%OBJECTS% ALREADY CREATED... SKIPPING...
	  	IF !DELFLAG! EQU 1 DEL "!REMSLASH!\!A!\%OBJECTS%" & ECHO DELETED !A!\%OBJECTS%
	  	ECHO.
	 ) ELSE (
			IF EXIST "!REMSLASH!\!A!\INFLOGS\%LOGTXT%" (
	 			ECHO CREATING OBJECT LOG FOR !SRCFOLDER!...
				CALL :STARTTIMER
				CALL "%LOG_SDATS%" "!REMSLASH!\!A!\INFLOGS\%LOGTXT%" "!REMSLASH!\!A!\%OBJECTS%" --cachename "!SRCFOLDER!" --objects "!REMSLASH!\!A!\!B!\USRDIR\CACHE\OBJECTDEFS"
				CALL :STOPTIMER
				IF EXIST "!REMSLASH!\!A!\%OBJECTS%" (
					ECHO OBJECT LOG CREATED @ !SRCFOLDER!\INFLOGS\%OBJECTS% ^( !HOURS!h:!MINS!m:!SECS!s ^)
					ECHO.
				) ELSE (
					ECHO NO OBJECT SDATS TO LOG... SKIPPING...
					ECHO.
				)
			) ELSE (
				ECHO %LOGTXT% NOT FOUND @ !SRCFOLDER!\INFLOGS\%LOGTXT%... SKIPPING...
				ECHO.
			)
	 )
) ELSE (
 	BREAK
)
ENDLOCAL
EXIT /B

:SCENE_LOG_UNLIMITED_SEP
FOR /F "TOKENS=* USEBACKQ DELIMS=" %%A IN ("%SRC1%dirs.txt") DO FOR /F "TOKENS=* DELIMS=" %%B IN ('DIR /B /A:D "%SRC1%%%A\*" 2^>NUL ^| FINDSTR /V ARCHIVE ^| FINDSTR /V INFLOGS ^| FINDSTR /V ANALYSISLOGS ^| FINDSTR /V /RC:"\<BIN\>" ^| FINDSTR /V /RC:"\<__MACOSX\>"') DO (
		@ECHO OFF
		SET "A=%%A"
		SET "B=%%B"
		CALL :SCENE_LOG_CREATION_UNLIMITED_SEP
)

IF EXIST "%SRC1%dirs.txt" DEL "%SRC1%dirs.txt"

IF %SWITCH_UNLIMITED_SEP% EQU 1 (
	GOTO COPY_CACHE_COPY_UNLIMITED_SEP
) ELSE (
	GOTO START_TWO
)

CMD /K

:SCENE_LOG_CREATION_UNLIMITED_SEP

CALL SET "A=%%A%%"
CALL SET "B=%%B%%"
CALL SET "REMSLASH=%%SRC1:~0,-1%%"
SET "SRCFOLDER=%A:\=" & REM."%"

SETLOCAL ENABLEDELAYEDEXPANSION

SET Z=FALSE
IF /I !B! == NPIA00005 SET Z=TRUE
IF /I !B! == NPIA00010 SET Z=TRUE
IF /I !B! == NPEA00013 SET Z=TRUE
IF !Z! == TRUE (
	IF /I EXIST "%SRC1%!A!\%SCENES%" (
	  ECHO !SRCFOLDER!\%SCENES% ALREADY CREATED... SKIPPING...
	  IF !DELFLAG! EQU 1 DEL "!REMSLASH!\!A!\%SCENES%" & ECHO DELETED !A!\%SCENES%
	  ECHO.
	) ELSE (
		IF EXIST "!REMSLASH!\!A!\INFLOGS\%LOGTXT%" (
	 		ECHO CREATING SCENE LOG FOR !SRCFOLDER!...
	 		CALL :STARTTIMER
			CALL "%LOG_SDATS%" "!REMSLASH!\!A!\INFLOGS\%LOGTXT%" "!REMSLASH!\!A!\%SCENES%" --cachename "!SRCFOLDER!" --scenes "!REMSLASH!\!A!\!B!\USRDIR\CACHE\SCENES"
			CALL :STOPTIMER
			IF EXIST "!REMSLASH!\!A!\%SCENES%" (
				ECHO SCENE LOG CREATED @ !SRCFOLDER!\INFLOGS\%SCENES% ^( !HOURS!h:!MINS!m:!SECS!s ^)
				ECHO.
			) ELSE (
				ECHO NO SCENE SDATS TO LOG... SKIPPING...
				ECHO.
			)
		) ELSE (
			ECHO %LOGTXT% NOT FOUND @ !SRCFOLDER!\INFLOGS\%LOGTXT%... SKIPPING...
			ECHO.
		)
	)
) ELSE (
 	BREAK
)
ENDLOCAL
EXIT /B


:COPY_CACHE_UNLIMITED_SEP

IF %SWITCH_UNLIMITED_SEP% EQU 1 (
	GOTO CREATE_LOGS_UNLIMITED_SEP
)

:COPY_CACHE_COPY_UNLIMITED_SEP

(
FOR /F "TOKENS=*" %%A IN ('DIR /B /A:D "%SRC1%*" ^| FINDSTR /V ARCHIVE ^| FINDSTR /V INFLOGS ^| FINDSTR /V ANALYSISLOGS ^| FINDSTR /V /RC:"\<BIN\>" ^| FINDSTR /V /RC:"\<__MACOSX\>"') DO FOR /F "TOKENS=*" %%B IN ('DIR /B /S /A:D "%SRC1%%%A\*INFLOGS*" 2^>NUL') DO (
		@ECHO OFF
		SETLOCAL ENABLEDELAYEDEXPANSION
		SET "A=%%A"
		SET "B=%%B"
		SET "C=!B:%SRC1%=!"
		SET "D=!C:\INFLOGS=!"
		ECHO !D!
		ENDLOCAL
))>dirs.txt

CALL :STARTTIMER

FOR /F "TOKENS=* USEBACKQ DELIMS=" %%A IN ("%SRC1%dirs.txt") DO FOR /F "TOKENS=* DELIMS=" %%B IN ('DIR /B /A:D "%SRC1%%%A\*" 2^>NUL ^| FINDSTR /V INFLOGS ^| FINDSTR /V ANALYSISLOGS ^| FINDSTR /V /RC:"\<BIN\>" ^| FINDSTR /V /RC:"\<__MACOSX\>"') DO (
		@ECHO OFF
		SET "A=%%A"
		SET "B=%%B"
		CALL :CACHE_COPIED_UNLIMITED_SEP
)

IF EXIST "%SRC1%dirs.txt" DEL "%SRC1%dirs.txt"

CALL :STOPTIMER
CALL :DISPLAYTIMERRESULT

IF %VERBOSE_UNLIMITED_SEP% EQU 1 (
	GOTO START_TWO
) ELSE (
	GOTO PROMPT_RENAME_SDATS_UNLIMITED_SEP
)

CMD /K

:CACHE_COPIED_UNLIMITED_SEP

CALL SET "A=%%A%%"
CALL SET "B=%%B%%"

SET "SRCFOLDER=%A:\=" & REM."%" 

CALL SET "REMSLASH=%%SRC1:~0,-1%%"

SETLOCAL ENABLEDELAYEDEXPANSION

SET "DUPESPATH=!REMSLASH!\!A!\ARCHIVE\%DUPES%"
SET "NOFILESPATH=!REMSLASH!\!A!\ARCHIVE\%NOFILES%"

SET Z=FALSE
IF /I !B! == NPIA00005 SET Z=TRUE
IF /I !B! == NPIA00010 SET Z=TRUE
IF /I !B! == NPEA00013 SET Z=TRUE
IF /I !B! == ARCHIVE SET Z=TRUE
IF !Z! == TRUE (
	IF EXIST "%SRC1%!A!\ARCHIVE" (
	  IF /I !B! == ARCHIVE  (

	  	ECHO !SRCFOLDER!\ARCHIVE ALREADY CREATED... SKIPPING...

	  ) ELSE (
	  	BREAK
	  )
	) ELSE (

		IF %VERBOSE_UNLIMITED_SEP% EQU 1 (
			ECHO NOW PRETENDING TO COPY CACHE FILES FOR !SRCFOLDER!. PLEASE WAIT...
		) ELSE (
			ECHO NOW COPYING CACHE FILES FOR !SRCFOLDER!. PLEASE WAIT...
		)

	FOR /F "TOKENS=*" %%X IN ('DIR /B /A:-D "%SRC1%!A!\ARCHIVE\*.log" 2^>NUL') DO (
		@ECHO OFF
		SET "X=%%X"
		IF !X! == %DUPES% (
			IF EXIST "%SRC1%!A!\!X!" (
				BREAK>"%SRC1%!A!\!X!"
			) ELSE (
				BREAK
			)
		) ELSE IF !X! == %NOFILES% (
			IF EXIST "%SRC1%!A!\!X!" (
				BREAK>"%SRC1%!A!\!X!"
			) ELSE (
				BREAK
			)
		) ELSE (
			BREAK
		)
	)

	 FOR /F "TOKENS=*" %%C IN ('DIR /B /A:D "%SRC1%!A!\!B!\*"') DO (
			@ECHO OFF
	  	SET "C=%%C"
	  	IF !C! == USRDIR (
	  		FOR /F "TOKENS=*" %%D IN ('DIR /B /A:D "%SRC1%!A!\!B!\!C!\*"') DO (
	  			SET "D=%%D"
	  			IF !D! == CACHE (
	  			
	  				IF %VERBOSE_UNLIMITED_SEP% EQU 1 (
	  						CALL "%CACHE_COPY_SINGLE_EXE%" "!REMSLASH!\!A!" "!SRCFOLDER!" "!SRCFOLDER!" "!REMSLASH!\!A!\!B!\!C!\!D!" "!REMSLASH!\!A!\INFLOGS\%LOGTXT%" "%FFPROBE%" "!DUPESPATH!" "!NOFILESPATH!" --verbose --debug
	  				) ELSE (
	  						CALL "%CACHE_COPY_SINGLE_EXE%" "!REMSLASH!\!A!" "!SRCFOLDER!" "!SRCFOLDER!" "!REMSLASH!\!A!\!B!\!C!\!D!" "!REMSLASH!\!A!\INFLOGS\%LOGTXT%" "%FFPROBE%" "!DUPESPATH!" "!NOFILESPATH!"
	  				)

					) ELSE (
		 				BREAK
					)
				)
			) ELSE (
		 		BREAK
			)
	  )

	IF %VERBOSE_UNLIMITED_SEP% EQU 1 (
		ECHO.
		ECHO CACHE SIMULATION HAS BEEN COMPLETED FOR !SRCFOLDER!.
	) ELSE (
		ECHO.
		ECHO CACHE COPY HAS BEEN COMPLETED FOR !SRCFOLDER!.
	)

	)
) ELSE (
 	BREAK
)
ENDLOCAL
EXIT /B


:PROMPT_RENAME_SDATS_UNLIMITED_SEP
ECHO.
SET /P "AREYOUSURE=WOULD YOU LIKE TO RENAME OBJECT SDAT's AND ODC's TO UUID_T### (Y/[N]) ?"
IF /I "%AREYOUSURE%"=="Y" (
	GOTO RENAME_OBJECT_SDAT_COPY_CACHE_UNLIMITED_SEP
) ELSE IF /I "%AREYOUSURE%"=="N" (
	GOTO PROMPT_RENAME_THUMBNAILS_UNLIMITED_SEP
) ELSE (
	GOTO PROMPT_RENAME_SDATS_UNLIMITED_SEP
)

:RENAME_OBJECT_SDAT_COPY_CACHE_UNLIMITED_SEP

(
FOR /F "TOKENS=*" %%A IN ('DIR /B /A:D "%SRC1%*" ^| FINDSTR /V ARCHIVE ^| FINDSTR /V INFLOGS ^| FINDSTR /V ANALYSISLOGS ^| FINDSTR /V /RC:"\<BIN\>" ^| FINDSTR /V /RC:"\<__MACOSX\>"') DO FOR /F "TOKENS=*" %%B IN ('DIR /B /S /A:D "%SRC1%%%A\*INFLOGS*" 2^>NUL') DO (
		@ECHO OFF
		SETLOCAL ENABLEDELAYEDEXPANSION
		SET "A=%%A"
		SET "B=%%B"
		SET "C=!B:%SRC1%=!"
		SET "D=!C:\INFLOGS=!"
		ECHO !D!
		ENDLOCAL
))>dirs.txt

CALL :STARTTIMER

FOR /F "TOKENS=* USEBACKQ DELIMS=" %%A IN ("%SRC1%dirs.txt") DO FOR /F "TOKENS=* DELIMS=" %%B IN ('DIR /B /A:D "%SRC1%%%A\*" 2^>NUL ^| FINDSTR /V INFLOGS ^| FINDSTR /V ANALYSISLOGS ^| FINDSTR /V /RC:"\<BIN\>" ^| FINDSTR /V /RC:"\<__MACOSX\>"') DO (
		@ECHO OFF
		SET "A=%%A"
		SET "B=%%B"
		CALL :CONT_RENAME_SDATS_UNLIMITED_SEP
)

ECHO DONE.
CALL :STOPTIMER
CALL :DISPLAYTIMERRESULT
GOTO PROMPT_RENAME_THUMBNAILS_UNLIMITED_SEP

:CONT_RENAME_SDATS_UNLIMITED_SEP

CALL SET "A=%%A%%"
CALL SET "B=%%B%%"

SET "SRCFOLDER=%A:\=" & REM."%" 

SET EXT[0]=.sdat
SET EXT[1]=.odc

SET Z=FALSE
IF /I %B% == NPIA00005 SET Z=TRUE
IF /I %B% == NPIA00010 SET Z=TRUE
IF /I %B% == NPEA00013 SET Z=TRUE
IF /I %B% == ARCHIVE SET Z=TRUE
IF %Z% == TRUE (
	IF /I EXIST "%SRC1%%A%\ARCHIVE" (
	  IF /I %B% == ARCHIVE  (
	  	  FOR /L %%O IN (0, 1, 1) DO (
					CALL SET Z1=%%EXT[%%O]%%
				 	FOR /F "TOKENS=*" %%C IN ('DIR /B /A:D "%SRC1%%A%\%B%\*" 2^>NUL') DO FOR /F "TOKENS=*" %%D IN ('DIR /B /S "%SRC1%%A%\%B%\%%C\*object*%%Z1%%" 2^>NUL') DO (
						SET "C=%%C"
						SET "D=%%D"
						SET "E=%%~NXD"
						SET "F=%%~ND"
						SET "G=%%~DPD"
						CALL :CONT_RENAME_SDATS_TWO_UNLIMITED_SEP
					)
				)
	  ) ELSE (
	  	BREAK
	  )
	) ELSE (
		BREAK
	)
) ELSE (
	BREAK
)
EXIT /B

:CONT_RENAME_SDATS_TWO_UNLIMITED_SEP

CALL SET "SUBSTR1=%E:_=" & REM."%"
CALL SET "SUBSTR2=%E:_=" & SET "SUBSTR2=%"

SETLOCAL ENABLEDELAYEDEXPANSION

SET "J=!D:%SRC1%%A%\ARCHIVE\=!"
SET I=1
SET "PATH=!J!"
SET "PATH!I!=%PATH:\=" & SET /A I+=1 & SET "PATH!I!=%"

IF /I !PATH5! == objects (
	IF /I !SUBSTR2! == object!Z1! (
		IF EXIST "!G!!PATH6!_T000!Z1!" (
			ECHO !PATH6!\!PATH7! ALREADY NAME TO !PATH6!_T000!Z1!.
		) ELSE (
 			REN "!D!" "!PATH6!_T000!Z1!"
 			ECHO !PATH6!\!PATH7! WAS RENAMED TO !PATH6!_T000!Z1!.
		)
	) ELSE (
		IF EXIST "!G!!PATH6!_!SUBSTR2!" (
			ECHO !PATH6!\!PATH7! ALREADY NAMED TO !PATH6!_!SUBSTR2!.
		) ELSE (
 			REN "!D!" "!PATH6!_!SUBSTR2!"
 			ECHO !PATH6!\!PATH7! WAS RENAMED TO !PATH6!_!SUBSTR2!.
		)
	)
) ELSE (
	BREAK
)
ENDLOCAL
EXIT /B

:PROMPT_RENAME_THUMBNAILS_UNLIMITED_SEP
ECHO.
SET /P "AREYOUSURE=WOULD YOU LIKE TO RENAME OBJECT THUMBNAILS TO UUID_T###(S/L) (Y/[N]) ?"
IF /I "%AREYOUSURE%"=="Y" (
	GOTO RENAME_THUMBNAILS_COPY_CACHE_UNLIMITED_SEP
) ELSE IF /I "%AREYOUSURE%"=="N" (
	IF EXIST "%SRC1%dirs.txt" DEL "%SRC1%dirs.txt"
	GOTO START_TWO
) ELSE (
	GOTO PROMPT_RENAME_THUMBNAILS_UNLIMITED_SEP
)

:RENAME_THUMBNAILS_COPY_CACHE_UNLIMITED_SEP

IF EXIST "%SRC1%dirs.txt" (
	BREAK
) ELSE (
	FOR /F "TOKENS=*" %%A IN ('DIR /B /A:D "%SRC1%*" ^| FINDSTR /V ARCHIVE ^| FINDSTR /V INFLOGS ^| FINDSTR /V ANALYSISLOGS ^| FINDSTR /V /RC:"\<BIN\>" ^| FINDSTR /V /RC:"\<__MACOSX\>"') DO FOR /F "TOKENS=*" %%B IN ('DIR /B /S /A:D "%SRC1%%%A\*INFLOGS*" 2^>NUL') DO (
			@ECHO OFF
			SETLOCAL ENABLEDELAYEDEXPANSION
			SET "A=%%A"
			SET "B=%%B"
			SET "C=!B:%SRC1%=!"
			SET "D=!C:\INFLOGS=!"
			ECHO !D!
			ENDLOCAL
	))>dirs.txt
)

CALL :STARTTIMER

FOR /F "TOKENS=* USEBACKQ DELIMS=" %%A IN ("%SRC1%dirs.txt") DO FOR /F "TOKENS=* DELIMS=" %%B IN ('DIR /B /A:D "%SRC1%%%A\*" 2^>NUL ^| FINDSTR /V INFLOGS ^| FINDSTR /V ANALYSISLOGS ^| FINDSTR /V /RC:"\<BIN\>" ^| FINDSTR /V /RC:"\<__MACOSX\>"') DO (
		@ECHO OFF
		SET "A=%%A"
		SET "B=%%B"
		CALL :CONT_RENAME_THUMBNAILS_UNLIMITED_SEP
)


ECHO DONE.
CALL :STOPTIMER
CALL :DISPLAYTIMERRESULT
IF EXIST "%SRC1%dirs.txt" DEL "%SRC1%dirs.txt"
GOTO START_TWO
CMD /K

:CONT_RENAME_THUMBNAILS_UNLIMITED_SEP

CALL SET "A=%%A%%"
CALL SET "B=%%B%%"

SET "SRCFOLDER=%A:\=" & REM."%" 

SET THUMBSIZE[0].STR=large
SET THUMBSIZE[0].LET=L
SET THUMBSIZE[1].STR=small
SET THUMBSIZE[1].LET=S

SET X=FALSE
IF /I %B% == NPIA00005 SET X=TRUE
IF /I %B% == NPIA00010 SET X=TRUE
IF /I %B% == NPEA00013 SET X=TRUE
IF /I %B% == ARCHIVE SET X=TRUE
IF %X% == TRUE (
	IF /I EXIST "%SRC1%%A%\ARCHIVE" (
	  IF /I %B% == ARCHIVE  (
	  	  FOR /L %%I IN (0, 1, 1) DO (
					CALL SET Z1=%%THUMBSIZE[%%I].STR%%
					CALL SET Z2=%%THUMBSIZE[%%I].LET%%
				 	FOR /F "TOKENS=*" %%C IN ('DIR /B /A:D "%SRC1%%A%\%B%\*" 2^>NUL') DO FOR /F "TOKENS=*" %%D IN ('DIR /B /S "%SRC1%%A%\%B%\%%C\*%%Z1%%*.png" 2^>NUL') DO (
						SET "C=%%C"
						SET "D=%%D"
						SET "E=%%~NXD"
						SET "F=%%~ND"
						SET "G=%%~DPD"
						CALL :CONT_RENAME_THUMBNAILS_TWO_UNLIMITED_SEP
					)
				)
	  ) ELSE (
	  	BREAK
	  )
	) ELSE (
		BREAK
	)
) ELSE (
	BREAK
)
EXIT /B

:CONT_RENAME_THUMBNAILS_TWO_UNLIMITED_SEP

CALL SET "SUBSTR1=%E:_=" & REM."%"
CALL SET "SUBSTR2=%E:_=" & SET "SUBSTR2=%"

SETLOCAL ENABLEDELAYEDEXPANSION

SET "J=!D:%SRC1%%A%\ARCHIVE\=!"
SET "VER=!SUBSTR2:.png=!"

SET I=1
SET "PATH=!J!"
SET "PATH!I!=%PATH:\=" & SET /A I+=1 & SET "PATH!I!=%"

IF /I !PATH5! == objects (
	IF /I !SUBSTR2! == !Z1!.png (
		IF EXIST "!G!!PATH6!_T000!Z2!.png" (
			ECHO !PATH6!\!PATH7! ALREADY NAME TO !PATH6!_T000!Z2!.png.
		) ELSE (
 			REN "!D!" "!PATH6!_T000!Z2!.png"
 			ECHO !PATH6!\!PATH7! WAS RENAMED TO !PATH6!_T000!Z2!.png.
		)
	) ELSE (
		IF EXIST "!G!!PATH6!_!VER!!Z2!.png" (
			ECHO !PATH6!\!PATH7! ALREADY NAMED TO !PATH6!_!VER!!Z2!.png.
		) ELSE (
 			REN "!D!" "!PATH6!_!VER!!Z2!.png"
 			ECHO !PATH6!\!PATH7! WAS RENAMED TO !PATH6!_!VER!!Z2!.png.
		)
	)
) ELSE IF /I !PATH5! == scenes (
	IF /I !SUBSTR2! == !Z1!.png (
		IF EXIST "!G!!PATH6!_T000!Z2!.png" (
			ECHO !PATH6!\!PATH7! ALREADY NAME TO !PATH6!_T000!Z2!.png.
		) ELSE (
 			REN "!D!" "!PATH6!_T000!Z2!.png"
 			ECHO !PATH6!\!PATH7! WAS RENAMED TO !PATH6!_T000!Z2!.png.
		)
	) ELSE (
		IF EXIST "!G!!PATH6!_!VER!!Z2!.png" (
			ECHO !PATH6!\!PATH7! ALREADY NAMED TO !PATH6!_!VER!!Z2!.png.
		) ELSE (
 			REN "!D!" "!PATH6!_!VER!!Z2!.png"
 			ECHO !PATH6!\!PATH7! WAS RENAMED TO !PATH6!_!VER!!Z2!.png.
		)
	)
) ELSE (
	BREAK
)
ENDLOCAL
EXIT /B


:DELETE_FINAL_INF_LOG_UNLIMITED_SEP
(
FOR /F "TOKENS=*" %%A IN ('DIR /B /A:D "%SRC1%*" ^| FINDSTR /V ARCHIVE ^| FINDSTR /V INFLOGS ^| FINDSTR /V ANALYSISLOGS ^| FINDSTR /V /RC:"\<BIN\>" ^| FINDSTR /V /RC:"\<__MACOSX\>"') DO FOR /F "TOKENS=*" %%B IN ('DIR /B /S /A:D "%SRC1%%%A\*INFLOGS*" 2^>NUL') DO (
		@ECHO OFF
		SETLOCAL ENABLEDELAYEDEXPANSION
		SET "A=%%A"
		SET "B=%%B"
		SET "C=!B:%SRC1%=!"
		SET "D=!C:\INFLOGS=!"
		ECHO !D!
		ENDLOCAL
))>dirs.txt

FOR /F "TOKENS=* USEBACKQ DELIMS=" %%A IN ("%SRC1%dirs.txt") DO FOR /F "TOKENS=* DELIMS=" %%B IN ('DIR /B /A:D "%SRC1%%%A\*" 2^>NUL ^| FINDSTR /V ARCHIVE ^| FINDSTR /V INFLOGS ^| FINDSTR /V ANALYSISLOGS ^| FINDSTR /V /RC:"\<BIN\>" ^| FINDSTR /V /RC:"\<__MACOSX\>"') DO (
		@ECHO OFF
		SET "A=%%A"
		SET "B=%%B"
		CALL :FINAL_INF_LOG_UNLIMITED_SEP
)

IF EXIST "%SRC1%dirs.txt" DEL "%SRC1%dirs.txt"
GOTO MERGE_AND_CLEAN_UP_UNLIMITED_SEP
CMD /K

:FINAL_INF_LOG_UNLIMITED_SEP

CALL SET "A=%%A%%"
CALL SET "B=%%B%%"

SET "SRCFOLDER=%A:\=" & REM."%" 

SETLOCAL ENABLEDELAYEDEXPANSION

SET Z=FALSE
IF /I !B! == NPIA00005 SET Z=TRUE
IF /I !B! == NPIA00010 SET Z=TRUE
IF /I !B! == NPEA00013 SET Z=TRUE
IF !Z! == TRUE (
	IF /I EXIST "%SRC1%!A!\INFLOGS\%LOGTXT%" (
		DEL "%SRC1%!A!\INFLOGS\%LOGTXT%"
		ECHO FINAL INF LOG DELETED FOR !SRCFOLDER!
	) ELSE (
		BREAK
	)
) ELSE (
 	BREAK
)
ENDLOCAL
EXIT /B

:GET_CACHE_VERSIONS_UNLIMITED_SEP

FOR /F "TOKENS=*" %%A IN ('DIR /B /A:D "%SRC1%*" ^| FINDSTR /V ARCHIVE ^| FINDSTR /V INFLOGS ^| FINDSTR /V ANALYSISLOGS ^| FINDSTR /V /RC:"\<BIN\>" ^| FINDSTR /V /RC:"\<__MACOSX\>"') DO FOR /F "TOKENS=*" %%B IN ('DIR /B /A:D /S "%SRC1%%%A\*USRDIR*" ^| FINDSTR /V DATA ^| FINDSTR /V __MACOSX') DO (
		@ECHO OFF
		SET "A=%%A"
		SET "B=%%B"
		CALL :CONT_GET_CACHE_VER_UNLIMITED_SEP
)

ECHO ALL CACHE VERSIONS HAVE BEEN LOGGED.
GOTO START_TWO
CMD /K

:CONT_GET_CACHE_VER_UNLIMITED_SEP

CALL SET "A=%%A%%"
CALL SET "B=%%B%%"

CALL SET "REMLOCALDIR1=%%B:%SRC1%%A%\=%%"
CALL SET "REMUSRDIR1=%%REMLOCALDIR1:\USRDIR=%%"
CALL SET "MIDDLEPATH=%REMLOCALDIR1:\=" & REM."%"

SETLOCAL ENABLEDELAYEDEXPANSION

SET "REMSPACE=!A: =!"
SET "REMLOCALDIR=!B:%SRC1%=!"
SET "REMUSRDIR=!B:\USRDIR=!"

SET I=1
SET "PTH=!REMLOCALDIR!"
SET "PTH!I!=%PTH:\=" & SET /A I+=1 & SET "PTH!I!=%"

SET TRIG1=FALSE
IF /I !PTH2! == NPIA00005 SET TRIG1=TRUE
IF /I !PTH2! == NPIA00010 SET TRIG1=TRUE
IF /I !PTH2! == NPEA00013 SET TRIG1=TRUE
IF /I !PTH3! == NPIA00005 SET TRIG1=TRUE
IF /I !PTH3! == NPIA00010 SET TRIG1=TRUE
IF /I !PTH3! == NPEA00013 SET TRIG1=TRUE
IF !TRIG1! == TRUE (
	IF EXIST "!REMUSRDIR!\PARAM.SFO" (
		SET TRIG2=FALSE
		IF /I !PTH3! == USRDIR SET TRIG2=TRUE
		IF /I !PTH4! == USRDIR SET TRIG2=TRUE
		IF !TRIG2! == TRUE (
			ECHO !A! : PASRSING PARAM.SFO ...
			CALL "%JREPLBAT%" "VERSION(.*?)HM" "$txt=$1" /I /XSEQ /JMATCHQ /F "!REMUSRDIR!\PARAM.SFO" /M /O "!REMUSRDIR!\VER.SFO"
			CALL "%JREPLBAT%" "\x00" "" /M /F "!REMUSRDIR!\VER.SFO" /O -
			CALL "%JREPLBAT%" "\x01" "" /M /F "!REMUSRDIR!\VER.SFO" /O -
			CALL "%JREPLBAT%" "\x08" "" /M /F "!REMUSRDIR!\VER.SFO" /O -
			CALL "%JREPLBAT%" "\x0A" "" /M /F "!REMUSRDIR!\VER.SFO" /O -
			CALL "%JREPLBAT%" "\x0D" "" /M /F "!REMUSRDIR!\VER.SFO" /RTN PARAMVER
			CALL "%JREPLBAT%" "\x00\x00NP(.*?)\x00\x00" "$txt='NP'+$1" /I /XSEQ /JMATCHQ /F "!REMUSRDIR!\PARAM.SFO" /M /O "!REMUSRDIR!\IDS.SFO"
			CALL "%JREPLBAT%" "\x00" "" /M /F "!REMUSRDIR!\IDS.SFO" /O -
			CALL "%JREPLBAT%" "\x0A" "" /M /F "!REMUSRDIR!\IDS.SFO" /O -
			CALL "%JREPLBAT%" "\x0D" "" /M /F "!REMUSRDIR!\IDS.SFO" /RTN ID
		)
	)
	IF EXIST "!REMUSRDIR!\VER.SFO" DEL "!REMUSRDIR!\VER.SFO"
	IF EXIST "!REMUSRDIR!\IDS.SFO" DEL "!REMUSRDIR!\IDS.SFO"
	DIR /B /A:-D "!B!\LASTRUN.TXT" 2>NUL >NUL
	IF !ERRORLEVEL! EQU 0 (
		ECHO !A! : PASRSING LASTRUN.TXT ...
 		FOR /F "TOKENS=* USEBACKQ DELIMS=" %%C IN ("!B!\LASTRUN.TXT") DO (
			SET "LASTRUNVER=%%C"
 		)
	)
  IF EXIST "!B!\COREDATA.SHARC" (
  	CALL :GET_FILE_INFO "!B!\COREDATA.SHARC"
		SET "SHARC_SHA1=!SHA1HASH!"
  )
  IF EXIST "!B!\COREDATA.BAR" (
  	CALL :GET_FILE_INFO "!B!\COREDATA.BAR"
		SET "BAR_SHA1=!SHA1HASH!"
  )
	IF /I !PTH3! == USRDIR (
		(ECHO CACHE	LASTRUN	PARAM	IDs	FOLDER	COREDATA.SHARC SHA1	COREDATA.BAR SHA1)>"%SRC1%!A!\%CACHEVERSLOG%"
	  (ECHO !A!	!LASTRUNVER!	!PARAMVER!	!ID!	!REMUSRDIR1!	!SHARC_SHA1!	!BAR_SHA1!)>>"%SRC1%!A!\%CACHEVERSLOG%"
	) ELSE IF /I !PTH4! == USRDIR (
		(ECHO CACHE	LASTRUN	PARAM	IDs	FOLDER	COREDATA.SHARC SHA1	COREDATA.BAR SHA1)>"%SRC1%!A!\!MIDDLEPATH!\%CACHEVERSLOG%"
		(ECHO !A!	!LASTRUNVER!	!PARAMVER!	!ID!	!REMUSRDIR1!	!SHARC_SHA1!	!BAR_SHA1!)>>"%SRC1%!A!\!MIDDLEPATH!\%CACHEVERSLOG%"
	)
) ELSE (
	BREAK
)

ENDLOCAL
EXIT /B


:REMOVE_RESERVED_UNLIMITED_SEP
FOR /F "TOKENS=*" %%A IN ('DIR /B /A:D "%SRC1%*" ^| FINDSTR /V ARCHIVE ^| FINDSTR /V INFLOGS ^| FINDSTR /V ANALYSISLOGS ^| FINDSTR /V /RC:"\<BIN\>" ^| FINDSTR /V /RC:"\<__MACOSX\>"') DO FOR /F "TOKENS=*" %%B IN ('DIR /B /S  "%SRC1%%%A\*RESERVED*" 2^>NUL ^| FINDSTR /I /V /RC:"\<RESERVED.cyberducksegment\>"') DO (
		@ECHO OFF
		SET "A=%%A"
		SET "B=%%B"
		SETLOCAL ENABLEDELAYEDEXPANSION
		SET "C=!B:%SRC1%=!"
		IF EXIST "!B!" (
			ECHO DELETING !C! ...
 			DEL "!B!"
		) ELSE (
			BREAK
		)
ENDLOCAL
)
ECHO ALL RESERVED FILES HAVE BEEN DELETED.
GOTO START_TWO
CMD /K



:OPTION_TWO

SET LOOP3=0
:CREATE_INF_LOGS_UNLIMITED_ALL
FOR /F "TOKENS=*" %%A IN ('DIR /B /A:D "%SRC1%*" ^| FINDSTR /V ARCHIVE ^| FINDSTR /V INFLOGS ^| FINDSTR /V ANALYSISLOGS ^| FINDSTR /V /RC:"\<BIN\>" ^| FINDSTR /V /RC:"\<__MACOSX\>"') DO FOR /F "TOKENS=*" %%B IN ('DIR /B /A:D "%SRC1%%%A\*" ^| FINDSTR /V /RC:"\<__MACOSX\>"') DO (
		@ECHO OFF
		SET "A=%%A"
		SET "B=%%B"
		SETLOCAL ENABLEDELAYEDEXPANSION
		SET V=FALSE
		IF /I !B! == NPIA00005 SET V=TRUE
		IF /I !B! == NPIA00010 SET V=TRUE
		IF /I !B! == NPEA00013 SET V=TRUE
    IF !V! == TRUE (
	  	FOR /F "TOKENS=*" %%C IN ('DIR /B /A:D "%SRC1%!A!\!B!\*"') DO (
	  		SET "C=%%C"
	  		IF !C! == USRDIR (
	  			 IF EXIST "%~DP0!A!\!B!\!C!\DATALOG.DAT" DEL "%~DP0!A!\!B!\!C!\DATALOG.DAT"
	  				FOR /F "TOKENS=*" %%D IN ('DIR /B /A:D "%SRC1%!A!\!B!\!C!\*"') DO (
	  					SET "D=%%D"
	  					IF !D! == CACHE (
	  							FOR /F "TOKENS=*" %%E IN ('DIR /B /A:D "%SRC1%!A!\!B!\!C!\!D!\*"') DO (
	  									SET "E=%%E"
	  									IF EXIST "%SRC1%INFLOGS\log$!E!$!A!.txt" (
	  										ECHO INFLOGS\log_!E!_!A!.txt ALREADY CREATED
	  									) ELSE (
	  										CALL "%DEINF%" "%~DP0!A!\!B!\!C!\!D!\!E!" -l -lo "%SRC1%INFLOGS\log$!E!$!A!.txt"
	  										IF EXIST "%SRC1%INFLOGS\log$!E!$!A!.txt" ECHO CREATED INFLOGS\log$!E!$!A!.txt
	  									)
									)
							) ELSE (
		 						BREAK
							)
						)
				) ELSE (
		 			BREAK
				)
	  	)
		) ELSE (
		 	FOR /F "TOKENS=*" %%F IN ('DIR /B /A:D "%SRC1%!A!\!B!\*" ^| FINDSTR /V ARCHIVE ^| FINDSTR /V INFLOGS ^| FINDSTR /V ANALYSISLOGS ^| FINDSTR /V /RC:"\<BIN\>" ^| FINDSTR /V /RC:"\<__MACOSX\>"') DO (
				SET "F=%%F"
				SET Z=FALSE
				IF /I !F! == NPIA00005 SET Z=TRUE
				IF /I !F! == NPIA00010 SET Z=TRUE
				IF /I !F! == NPEA00013 SET Z=TRUE
    		IF !Z! == TRUE (
	  			FOR /F "TOKENS=*" %%G IN ('DIR /B /A:D "%SRC1%!A!\!B!\!F!\*"') DO (
	  				SET "G=%%G"
	  				IF !G! == USRDIR (
	  						FOR /F "TOKENS=*" %%H IN ('DIR /B /A:D "%SRC1%!A!\!B!\!F!\!G!\*"') DO (
	  							SET "H=%%H"
	  							IF !H! == CACHE (
	  									FOR /F "TOKENS=*" %%I IN ('DIR /B /A:D "%SRC1%!A!\!B!\!F!\!G!\!H!\*"') DO (
	  											SET "I=%%I"
	  											IF EXIST "%SRC1%INFLOGS\log$!I!$!A!.txt" (
	  												ECHO INFLOGS\log_!I!_!A!.txt ALREADY CREATED
	  											) ELSE (
	  												CALL "%DEINF%" "%~DP0!A!\!B!\!F!\!G!\!H!\!I!" -l -lo "%SRC1%INFLOGS\log$!I!$!A!.txt"
	  												IF EXIST "%SRC1%INFLOGS\log$!I!$!A!.txt" ECHO CREATED INFLOGS\log$!I!$!A!.txt
	  											)
											)
									) ELSE (
		 								BREAK
									)
								)
						) ELSE (
		 					BREAK
						)
					)
				) ELSE (
		 			BREAK
				)
			)
		)
		ENDLOCAL
)


:INF_LOG_COUNTER_UNLIMITED_ALL
SETLOCAL ENABLEEXTENSIONS
SET COUNTFOLDER=0
FOR /F "TOKENS=*" %%A IN ('DIR /B /A:D "%SRC1%*" ^| FINDSTR /V ARCHIVE ^| FINDSTR /V INFLOGS ^| FINDSTR /V ANALYSISLOGS ^| FINDSTR /V /RC:"\<BIN\>" ^| FINDSTR /V /RC:"\<__MACOSX\>"') DO SET /A COUNTFOLDER+=1
SET COUNTFILE=0
FOR /F "TOKENS=*" %%B IN ('DIR /B /A:-D "%SRC1%INFLOGS\*.txt" 2^>NUL ^| FINDSTR /V %LOGTXT% ^| FINDSTR /V %CUSTOMINFLOG%') DO SET /A COUNTFILE+=1
SET /A %COUNTFILE%/%COUNTFOLDER%
SET /A div=%COUNTFILE%/%COUNTFOLDER%
ECHO.
ECHO TOTAL CACHES: %COUNTFOLDER%
ECHO TOTAL INF LOGS TO BE MERGED: %COUNTFILE%
ECHO.
SET /A LOOP3=%LOOP3%+1
IF "%LOOP3%"=="3" GOTO MERGE_AND_CLEAN_UP_UNLIMITED_ALL
IF %DIV% NEQ 10 GOTO CREATE_INF_LOGS_UNLIMITED_ALL
ENDLOCAL

:MERGE_AND_CLEAN_UP_UNLIMITED_ALL
FOR /F "TOKENS=*" %%A IN ('DIR /B /A:-D "%SRC1%%LOGTXT%" 2^>NUL') DO (
		@ECHO OFF
		SET "A=%%A"
		SETLOCAL ENABLEDELAYEDEXPANSION
		ECHO %LOGTXT% ALREADY CREATED... SKIPPING THE MERGE AND CLEAN UP.
		IF EXIST !A! CALL :START_THREE
		ENDLOCAL
)

ECHO.
ECHO INITIATING THE INFLOG MERGE AND CLEAN UP
ECHO.

SET "REMSLASH=%SRC1:~0,-1%"

IF EXIST "%REMSLASH%\INFLOGS" (

	CALL "%INFLOG_MERGER%" "%REMSLASH%\INFLOGS" "%REMSLASH%\%LOGTXT%" "%LOGTXT%"
	
	ECHO.
	IF EXIST "%REMSLASH%\%LOGTXT%" ECHO FINAL INFLOG CREATED IN ROOT @ \%LOGTXT%

)

GOTO START_THREE

:START_THREE
SET CHOICE=
ECHO.
ECHO.
ECHO.^|---------------------------------^|
ECHO.^| UNLIMITED CACHE MODE - COMBINED ^|
ECHO.^|---------------------------------^|
ECHO.
ECHO.
ECHO 0.  CREATE OBJECT/SCENE THUMBNAIL LOG
ECHO 1.  CREATE OBJECT/SCENE SDAT LOGS
ECHO 2.  COPY CACHES ONLY
ECHO 3.  COPY CACHES ONLY USING CUSTOM QUERIES ( ENTER 3O FOR SEPARATE )
ECHO 4.  CREATE OBJECT/SCENE SDAT LOGS THEN COPY CACHES
ECHO 5.  VERBOSE MODE - NO COPYING. ONLY SHOW CMD AND LOG OUTPUTS
ECHO 6.  DELETE FINAL INFLOG
ECHO 7.  RENAME OBJECT SDAT's AND ODC's IN THE ARCHIVE TO THEIR UUID
ECHO 8.  RENAME OBJECT/SCENE THUMBNAILS IN THE ARCHIVE TO THEIR UUID/SCENEID
ECHO 9.  DELETE RESERVED FILES
ECHO 10. GET CACHE VERSIONS FROM LASTRUN.TXT/PARAM.SFO
ECHO 11. GO BACK
ECHO 12. SUSPEND CMD
ECHO.
ECHO.
ECHO.^|--------------------------^|
ECHO.^| DOUBLE FOLDERS SUPPORTED ^|
ECHO.^|--------------------------^|
ECHO.
ECHO.
SET /P CHOICE=ENTER A NUMBER TO PERFORM AN ACTION: 
ECHO.

SETLOCAL ENABLEDELAYEDEXPANSION
SET "NOSPACES=!CHOICE: =!"
IF "!NOSPACES!"=="" GOTO START_THREE
ENDLOCAL

IF NOT '%CHOICE%'=='' SET CHOICE=%CHOICE:~0,2%
IF '%CHOICE%'=='0' GOTO CHOICE_ZERO_UNLIMITED_ALL
IF '%CHOICE%'=='1' GOTO CHOICE_ONE_UNLIMITED_ALL
IF '%CHOICE%'=='2' GOTO CHOICE_TWO_UNLIMITED_ALL
IF /I '%CHOICE%'=='2O' GOTO CHOICE_TWO_UNLIMITED_ALL_OVERRIDE
IF '%CHOICE%'=='3' GOTO CHOICE_THREE_UNLIMITED_ALL
IF /I '%CHOICE%'=='3O' GOTO CHOICE_THREE_UNLIMITED_ALL_OVERRIDE
IF '%CHOICE%'=='4' GOTO CHOICE_FOUR_UNLIMITED_ALL
IF '%CHOICE%'=='5' GOTO CHOICE_FIVE_UNLIMITED_ALL
IF '%CHOICE%'=='6' GOTO CHOICE_SIX_UNLIMITED_ALL
IF '%CHOICE%'=='7' GOTO CHOICE_SEVEN_UNLIMITED_ALL
IF '%CHOICE%'=='8' GOTO CHOICE_EIGHT_UNLIMITED_ALL
IF '%CHOICE%'=='9' GOTO CHOICE_NINE_UNLIMITED_ALL
IF '%CHOICE%'=='10' GOTO CHOICE_TEN_UNLIMITED_ALL
IF '%CHOICE%'=='11' GOTO CHOICE_ELEVEN_UNLIMITED_ALL
IF '%CHOICE%'=='12' GOTO CHOICE_TWELVE_UNLIMITED_ALL

ECHO "%CHOICE%" IS NOT VALID, TRY AGAIN
ECHO.
GOTO START_THREE

:CHOICE_ZERO_UNLIMITED_ALL
CALL :CREATE_LOGS_THUMBNAILS_UNLIMITED_ALL
GOTO CHOICE_TWO_END

:CHOICE_ONE_UNLIMITED_ALL
SET SWITCH_UNLIMITED_ALL=0
SET VERBOSE_UNLIMITED_ALL=0
SET OVERRIDE_UNLIMITED_ALL=0
CALL :CREATE_LOGS_UNLIMITED_ALL
GOTO CHOICE_TWO_END

:CHOICE_TWO_UNLIMITED_ALL
SET SWITCH_UNLIMITED_ALL=0
SET VERBOSE_UNLIMITED_ALL=0
SET OVERRIDE_UNLIMITED_ALL=0
CALL :COPY_CACHE_UNLIMITED_ALL
GOTO CHOICE_TWO_END

:CHOICE_TWO_UNLIMITED_ALL_OVERRIDE
SET SWITCH_UNLIMITED_ALL=0
SET VERBOSE_UNLIMITED_ALL=0
SET OVERRIDE_UNLIMITED_ALL=1
CALL :COPY_CACHE_UNLIMITED_ALL
GOTO CHOICE_TWO_END

:CHOICE_THREE_UNLIMITED_ALL
CALL :COPY_CACHE_UNLIMITED_ALL_CUSTOM
GOTO CHOICE_TWO_END

:CHOICE_THREE_UNLIMITED_ALL_OVERRIDE
CALL :COPY_CACHE_UNLIMITED_ALL_CUSTOM_OVERRIDE
GOTO CHOICE_TWO_END

:CHOICE_FOUR_UNLIMITED_ALL
SET SWITCH_UNLIMITED_ALL=1
SET VERBOSE_UNLIMITED_ALL=0
SET OVERRIDE_UNLIMITED_ALL=0
CALL :COPY_CACHE_UNLIMITED_ALL
GOTO CHOICE_TWO_END

:CHOICE_FIVE_UNLIMITED_ALL
SET SWITCH_UNLIMITED_ALL=0
SET VERBOSE_UNLIMITED_ALL=1
SET OVERRIDE_UNLIMITED_ALL=0
CALL :COPY_CACHE_UNLIMITED_ALL
GOTO CHOICE_TWO_END

:CHOICE_SIX_UNLIMITED_ALL
CALL :DELETE_FINAL_INF_LOG_UNLIMITED_ALL
GOTO CHOICE_TWO_END

:CHOICE_SEVEN_UNLIMITED_ALL
CALL :RENAME_OBJECT_SDAT_COPY_CACHE_UNLIMITED_ALL
GOTO CHOICE_TWO_END

:CHOICE_EIGHT_UNLIMITED_ALL
CALL :RENAME_THUMBNAILS_COPY_CACHE_UNLIMITED_ALL
GOTO CHOICE_TWO_END

:CHOICE_NINE_UNLIMITED_ALL
CALL :REMOVE_RESERVED_UNLIMITED_ALL
GOTO CHOICE_TWO_END

:CHOICE_TEN_UNLIMITED_ALL
CALL :GET_CACHE_VERSIONS_UNLIMITED_ALL
GOTO CHOICE_TWO_END

:CHOICE_ELEVEN_UNLIMITED_ALL
CALL :START_ONE
GOTO CHOICE_TWO_END

:CHOICE_TWELVE_UNLIMITED_ALL
CMD /K
GOTO CHOICE_TWO_END


:CHOICE_TWO_END
CMD /K


:CREATE_LOGS_THUMBNAILS_UNLIMITED_ALL
ECHO INITIATING THUMBNAIL LOG CREATION...
ECHO.
FOR /F "TOKENS=*" %%A IN ('DIR /B /A:-D "%SRC1%*" 2^>NUL') DO (
		@ECHO OFF
		SET "A=%%A"
		CALL :THUMBNAIL_LOG_CREATION_UNLIMITED_ALL
)


GOTO START_THREE
CMD /K

:THUMBNAIL_LOG_CREATION_UNLIMITED_ALL

CALL SET "A=%%A%%"
CALL SET "REMSLASH=%SRC1:~0,-1%"

SETLOCAL ENABLEDELAYEDEXPANSION

IF NOT EXIST "!REMSLASH!\%LOGTXT%" ECHO %LOGTXT% NOT FOUND IN ROOT... SKIPPING... & GOTO START_THREE

SET Z=FALSE
IF /I !A! == %LOGTXT% SET Z=TRUE
IF /I !A! == %THUMBS% SET Z=TRUE
IF !Z! == TRUE (
	IF EXIST "!REMSLASH!\%THUMBS%" (
		IF /I !A! == %THUMBS% (
	  	ECHO !A! ALREADY CREATED... SKIPPING...
	  )
	) ELSE (
	 	IF EXIST "!REMSLASH!\%LOGTXT%" (
	 		CALL :STARTTIMER
	 		CALL "%LOG_THUMBNAILS%" "!REMSLASH!\%LOGTXT%" "!REMSLASH!\%THUMBS%"
	 		CALL :STOPTIMER
	 		IF EXIST "%SRC1%%THUMBS%" ECHO %THUMBS% CREATED IN ROOT ^( !HOURS!h:!MINS!m:!SECS!s ^)
	 ) ELSE (
	 		ECHO %LOGTXT% NOT FOUND IN ROOT... SKIPPING...
	 )
	)
) ELSE (
 	BREAK
)
ENDLOCAL
EXIT /B


:CREATE_LOGS_UNLIMITED_ALL

ECHO INITIATING OBJECT/SCENE LOG CREATION...
ECHO.

FOR /F "TOKENS=*" %%A IN ('DIR /B /A:-D "%SRC1%*" 2^>NUL') DO (
		@ECHO OFF
		SET "A=%%A"
		CALL :OBJECT_LOG_CREATION_UNLIMITED_ALL
)

GOTO SCENE_LOG_UNLIMITED_ALL
CMD /K

:OBJECT_LOG_CREATION_UNLIMITED_ALL

CALL SET "A=%%A%%"
CALL SET "REMSLASH=%SRC1:~0,-1%"

SETLOCAL ENABLEDELAYEDEXPANSION

IF NOT EXIST "!REMSLASH!\%LOGTXT%" ECHO %LOGTXT% NOT FOUND IN ROOT... SKIPPING... & GOTO START_THREE

SET Z=FALSE
IF /I !A! == %LOGTXT% SET Z=TRUE
IF /I !A! == %OBJECTS% SET Z=TRUE
IF !Z! == TRUE (
	IF EXIST "!REMSLASH!\%OBJECTS%" (
			IF /I !A! == %OBJECTS% (
	  		ECHO !A! ALREADY CREATED... SKIPPING...
	  		ECHO.
	  	)
	) ELSE (
	 	IF EXIST "!REMSLASH!\%LOGTXT%" (
	 		ECHO CREATING OBJECT LOG ...
	 		ECHO.
	 		CALL :STARTTIMER
	 		CALL "%LOG_SDATS%" "!REMSLASH!\%LOGTXT%" "!REMSLASH!\%OBJECTS%" --objects "!REMSLASH!^|USRDIR\CACHE\OBJECTDEFS" --unlimited_all
	 		CALL :STOPTIMER
	 		IF EXIST "!REMSLASH!\%OBJECTS%" (
	 			ECHO.
	 			ECHO %OBJECTS% CREATED IN ROOT ^( !HOURS!h:!MINS!m:!SECS!s ^)
	 			ECHO.
	 		) ELSE (
	 			ECHO.
	 			ECHO NO OBJECT SDATS TO LOG... SKIPPING...
	 			ECHO.
	 		)
	 	) ELSE (
	 		ECHO %LOGTXT% NOT FOUND IN ROOT... SKIPPING...
	 	)
	)
) ELSE (
 	BREAK
)
ENDLOCAL
EXIT /B

:SCENE_LOG_UNLIMITED_ALL
FOR /F "TOKENS=*" %%A IN ('DIR /B /A:-D "%SRC1%*" 2^>NUL') DO (
		@ECHO OFF
		SET "A=%%A"
		CALL :SCENE_LOG_CREATION_UNLIMITED_ALL
)
IF %SWITCH_UNLIMITED_ALL% EQU 1 (
	GOTO COPY_CACHE_UNLIMITED_ALL_BOTH
) ELSE (
	GOTO START_THREE
)
CMD /K

:SCENE_LOG_CREATION_UNLIMITED_ALL

CALL SET "A=%%A%%"
CALL SET "REMSLASH=%SRC1:~0,-1%"

SETLOCAL ENABLEDELAYEDEXPANSION

SET Z=FALSE
IF /I !A! == %LOGTXT% SET Z=TRUE
IF /I !A! == %SCENES% SET Z=TRUE
IF !Z! == TRUE (
	IF EXIST "!REMSLASH!\%SCENES%" (
			IF /I !A! == %SCENES% (
	  		ECHO !A! ALREADY CREATED... SKIPPING...
	  	)
	) ELSE (
	 	IF EXIST "!REMSLASH!\%LOGTXT%" (
	 		ECHO CREATING SCENE LOG ...
	 		ECHO.
	 		CALL :STARTTIMER
	 		CALL "%LOG_SDATS%" "!REMSLASH!\%LOGTXT%" "!REMSLASH!\%SCENES%" --scenes "!REMSLASH!^|USRDIR\CACHE\SCENES" --unlimited_all
	 		CALL :STOPTIMER
	 		IF EXIST "!REMSLASH!\%SCENES%" (
	 			ECHO.
	 			ECHO %SCENES% CREATED IN ROOT ^( !HOURS!h:!MINS!m:!SECS!s ^)
	 		) ELSE (
	 			ECHO.
	 			ECHO NO SCENE SDATS TO LOG... SKIPPING...
	 		)
	 	) ELSE (
	 		ECHO %LOGTXT% NOT FOUND IN ROOT... SKIPPING...
	 	)
	)
) ELSE (
 	BREAK
)
ENDLOCAL
EXIT /B

:COPY_CACHE_UNLIMITED_ALL

IF %SWITCH_UNLIMITED_ALL% EQU 1 (
	GOTO CREATE_LOGS_UNLIMITED_ALL
) ELSE IF %VERBOSE_UNLIMITED_ALL% EQU 1 (
	GOTO CONT_CACHE_COPY_UNLIMITED_ALL_ONE
) ELSE IF %OVERRIDE_UNLIMITED_ALL% EQU 1 (
	GOTO CONT_CACHE_COPY_UNLIMITED_ALL_TWO
) ELSE (
	GOTO COPY_CACHE_UNLIMITED_ALL_BOTH
)

:COPY_CACHE_UNLIMITED_ALL_BOTH

FOR /F "TOKENS=*" %%A IN ('DIR /B /A:D "%SRC1%*ARCHIVE*" 2^>NUL') DO (
		@ECHO OFF
		SET "A=%%A"
		SETLOCAL ENABLEDELAYEDEXPANSION
		SET V=FALSE
		IF /I !A! == ARCHIVE SET V=TRUE
    IF !V! == TRUE (
    	ECHO CACHE ARCHIVE ALREADY CREATED... SKIPPING...
    	CALL :CACHE_COPIED_UNLIMITED_ALL
    ) ELSE (
      CALL :CONT_CACHE_COPY_UNLIMITED_ALL_ONE
    )
		ENDLOCAL
)

:CONT_CACHE_COPY_UNLIMITED_ALL_ONE

IF %VERBOSE_UNLIMITED_ALL% EQU 1 (
	ECHO INITIATING CACHE COPY SIMULATION...
) ELSE (
	ECHO INITIATING CACHE COPY...
)

:PROMPT_ANALYSIS_UNLIMITED_ALL
ECHO.
ECHO IF NO, THIS CAN BE DONE AFTERWARDS USING VERBOSE MODE.
ECHO.
SET /P "AREYOUSURE=WOULD YOU LIKE TO ANALYZE CACHES FOR NO INFs/BAD INFs AND CORRUPT FILES (Y/[N])? "
IF /I "%AREYOUSURE%" EQU "Y" (
	GOTO CACHE_ANALYSIS_UNLIMITED_ALL
) ELSE IF /I "%AREYOUSURE%" EQU "N" (
		IF %VERBOSE_UNLIMITED_ALL% EQU 1 (
			GOTO PROMPT_VERBOSE_MODE_ALL
		) ELSE (
			GOTO CONT_CACHE_COPY_UNLIMITED_ALL_TWO
		)
) ELSE (
	GOTO PROMPT_ANALYSIS_UNLIMITED_ALL
)

:CACHE_ANALYSIS_UNLIMITED_ALL

CALL :STARTTIMER

ECHO INITIATING ANALYSIS...

IF EXIST "%SRC1%ANALYSISLOGS" RMDIR /S /Q "%SRC1%ANALYSISLOGS"

IF NOT EXIST "%SRC1%ANALYSISLOGS" MKDIR "%SRC1%ANALYSISLOGS"

IF EXIST "%SRC1%ANALYSISLOGS\log_ANALYSIS" RMDIR /S /Q "%SRC1%ANALYSISLOGS\log_ANALYSIS"

FOR /F "TOKENS=*" %%A IN ('DIR /B /A:D "%SRC1%*" ^| FINDSTR /V ARCHIVE ^| FINDSTR /V INFLOGS ^| FINDSTR /V ANALYSISLOGS ^| FINDSTR /V /RC:"\<BIN\>" ^| FINDSTR /V /RC:"\<__MACOSX\>"') DO FOR /F "TOKENS=*" %%B IN ('DIR /B /A:D /S "%SRC1%%%A\*CACHE*"') DO (
		@ECHO OFF
		SET "A=%%A"
		SET "B=%%B"
		CALL :CONT_CACHE_COPY_ANALYSIS_UNLIMITED_ALL
)

ECHO ANALYSIS COMPLETE. CHECK ANALYSISLOGS\log_ANALYSIS\
CALL :STOPTIMER
CALL :DISPLAYTIMERRESULT

IF %VERBOSE_UNLIMITED_ALL% EQU 1 (
	GOTO PROMPT_VERBOSE_MODE_ALL
) ELSE (
	GOTO CONT_CACHE_COPY_UNLIMITED_ALL_TWO
)
CMD /K

:CONT_CACHE_COPY_ANALYSIS_UNLIMITED_ALL

CALL SET "A=%%A%%"
CALL SET "B=%%B%%"

SETLOCAL ENABLEDELAYEDEXPANSION
SET "REMSPACE=!A: =!"
SET "REMLOCALDIR=!B:%SRC1%=!"

SET I=1
SET "PTH=!REMLOCALDIR!"
SET "PTH!I!=%PTH:\=" & SET /A I+=1 & SET "PTH!I!=%"

SET TRIG1=FALSE
IF /I !PTH2! == NPIA00005 SET TRIG1=TRUE
IF /I !PTH2! == NPIA00010 SET TRIG1=TRUE
IF /I !PTH2! == NPEA00013 SET TRIG1=TRUE
IF /I !PTH3! == NPIA00005 SET TRIG1=TRUE
IF /I !PTH3! == NPIA00010 SET TRIG1=TRUE
IF /I !PTH3! == NPEA00013 SET TRIG1=TRUE
IF !TRIG1! == TRUE (
	ECHO CREATING !PTH1!\%URIHASHES%...
	(
		FOR /F "TOKENS=1,4 USEBACKQ DELIMS=|" %%N IN ("%SRC1%%LOGTXT%") DO (
			SET "N=%%N"
			SET "O=%%O"
			IF "!O!" == "!PTH1!" ECHO(!N!	!O!
	))>"%SRC1%ANALYSISLOGS\%URIHASHES%"
	ECHO !PTH1!\%URIHASHES% CREATED.
  FOR /F "TOKENS=*" %%K IN ('DIR /B /A:D "%SRC1%!PTH!\*"') DO (
  		SET "K=%%K"
		SET TRIG2=FALSE
		IF /I !K! == GLOBALS SET TRIG2=TRUE
  	IF /I !K! == OBJECTDEFS SET TRIG2=TRUE
		IF /I !K! == SCENES SET TRIG2=TRUE
		IF /I !K! == VIDEOS SET TRIG2=TRUE
		IF /I !K! == OBJECTTHUMBS SET TRIG2=TRUE
		IF /I !K! == OBJECTDYNAMIC SET TRIG2=TRUE
		IF /I !K! == WORLDMAP SET TRIG2=TRUE
  	IF !TRIG2! == TRUE (
			ECHO CREATING !PTH1!\!K!\%SDATFILE%...
			SET "EXT[0]=.sdat"
			SET "EXT[1]=.bar"
			(
			FOR /L %%L IN (0, 1, 1) DO (
    		FOR /F "TOKENS=* DELIMS=" %%L IN ('DIR /B /S "%SRC1%!PTH!\!K!\*_DAT*!EXT[%%L]!" 2^>NUL ^| FINDSTR /I /V "GLOBALS.*\.bar"') DO (
    		 		SET "L=%%L"
    		 		SET "NAME1=%%~NL"
    		 		SET "SDAT=!NAME1:_DAT=!"
    				ECHO(!SDAT!	!PTH1!
			)))>"%SRC1%ANALYSISLOGS\%SDATFILE%"
			ECHO !PTH1!\!K!\%SDATFILE% CREATED.
			ECHO CREATING !PTH1!\!K!\%OTHFILE%...
    	(
    	FOR /F "TOKENS=* DELIMS=" %%Z IN ('DIR /B /S "%SRC1%!PTH!\!K!\*_DAT*" 2^>NUL ^| FINDSTR /I /V .sdat ^| FINDSTR /I /V "OBJECTDEFS.*\.bar" ^| FINDSTR /I /V "SCENES.*\.bar"') DO (
    	 SET "Z=%%Z"
    	 SET "NAME2=%%~NZ"
    	 SET "OTH=!NAME2:_DAT=!"
    		ECHO(!OTH!	!PTH1!
    	))>"%SRC1%ANALYSISLOGS\%OTHFILE%"
    	ECHO !PTH1!\!K!\%OTHFILE% CREATED.
    	ECHO CREATING !PTH1!\!K!\%INFFILE%...
			(
    	FOR /F "TOKENS=* DELIMS=" %%M IN ('DIR /B /S "%SRC1%!PTH!\!K!\*_INF*" 2^>NUL') DO (
    	 SET "TMPM=%%M"
    	 SET "M=%%~NXM"
    	 SET "INF=!M:_INF=!"
    		ECHO(!INF!	!PTH1!
    	))>"%SRC1%ANALYSISLOGS\%INFFILE%"
    	ECHO !PTH1!\!K!\%INFFILE% CREATED.
    	ECHO ANALYZING AND COMPARING CACHE FILES FOR !PTH1!\!K!...
    	FOR /F "TOKENS=*" %%P IN ('FINDSTR /L /V /G:"%SRC1%ANALYSISLOGS\%INFFILE%" "%SRC1%ANALYSISLOGS\%SDATFILE%" 2^>NUL') DO ECHO %%P	!K!	SDAT	NOINF>>"%SRC1%ANALYSISLOGS\%NOINFSDAT%"
 			FOR /F "TOKENS=*" %%V IN ('FINDSTR /L /V /G:"%SRC1%ANALYSISLOGS\%INFFILE%" "%SRC1%ANALYSISLOGS\%OTHFILE%" 2^>NUL') DO ECHO %%V	!K!	OTH	NOINF>>"%SRC1%ANALYSISLOGS\%NOINFOTH%"
			FINDSTR /L /V /G:"%SRC1%ANALYSISLOGS\%URIHASHES%" "%SRC1%ANALYSISLOGS\%INFFILE%" 2>NUL >> "%SRC1%ANALYSISLOGS\%BADINF%" 
			FOR /F "TOKENS=*" %%Q IN ('FINDSTR /L /G:"%SRC1%ANALYSISLOGS\%SDATFILE%" "%SRC1%ANALYSISLOGS\%BADINF%" 2^>NUL') DO ECHO %%Q	!K!	SDAT	BADINF>>"%SRC1%ANALYSISLOGS\%BADINFSDAT%"
			CALL :SETSIZE "%SRC1%ANALYSISLOGS\%SDATFILE%"
			IF !SIZE! EQU 0 (
			 ECHO TMP > "%SRC1%ANALYSISLOGS\%SDATFILE%"
			)
			FOR /F "TOKENS=*" %%R IN ('FINDSTR /L /V /G:"%SRC1%ANALYSISLOGS\%SDATFILE%" "%SRC1%ANALYSISLOGS\%BADINF%" 2^>NUL') DO ECHO %%R	!K!	OTH	BADINF>>"%SRC1%ANALYSISLOGS\%BADINFOTH%"
			IF EXIST "%SRC1%ANALYSISLOGS\%BADINF%" BREAK > "%SRC1%ANALYSISLOGS\%BADINF%"
			(TYPE "%SRC1%ANALYSISLOGS\%NOINFSDAT%" "%SRC1%ANALYSISLOGS\%BADINFSDAT%" "%SRC1%ANALYSISLOGS\%BADINFOTH%" "%SRC1%ANALYSISLOGS\%NOINFOTH%">"%SRC1%ANALYSISLOGS\%FINALREPORT%")>nul 2>&1
			IF EXIST "%SRC1%ANALYSISLOGS\%NOINFSDAT%" BREAK > "%SRC1%ANALYSISLOGS\%NOINFSDAT%"
			IF EXIST "%SRC1%ANALYSISLOGS\%NOINFOTH%" BREAK > "%SRC1%ANALYSISLOGS\%NOINFOTH%"
			IF EXIST "%SRC1%ANALYSISLOGS\%BADINFSDAT%" BREAK > "%SRC1%ANALYSISLOGS\%BADINFSDAT%"
			IF EXIST "%SRC1%ANALYSISLOGS\%BADINFOTH%" BREAK > "%SRC1%ANALYSISLOGS\%BADINFOTH%"
			SORT /UNIQUE "%SRC1%ANALYSISLOGS\%FINALREPORT%" /O "%SRC1%ANALYSISLOGS\%FINALREPORT%"
			FOR /F "TOKENS=1,2,3,4,5 USEBACKQ DELIMS=	" %%S IN ("%SRC1%ANALYSISLOGS\%FINALREPORT%") DO (
    		SET "S=%%S"
    		SET "T=%%T"
    		SET "U=%%U"
    		SET "V=%%V"
     		SET "W=%%W"
    		IF !PTH1! == !T! (
    			IF !K! == !U! (
    				IF !V! == SDAT (
							SET "EXT[0]=.sdat"
							SET "EXT[1]=.bar"
							FOR /L %%X IN (0, 1, 1) DO (
    						FOR /F "TOKENS=* DELIMS=" %%X IN ('DIR /B /S "%SRC1%!PTH!\!U!\*!S!_DAT*!EXT[%%X]!" 2^>NUL ^| FINDSTR /I /V "GLOBALS.*\.bar"') DO (
    							SET "TMPX=%%X"
    	 						SET "X=%%~NXX"
    							CALL :SETSIZE "%SRC1%!PTH!\!U!\!X!"
									IF !SIZE! EQU 0 (
										IF EXIST "%SRC1%ARCHIVE\unknown\!T!\sdats\!U!\corrupted\!X!" (
    									BREAK
    								) ELSE (
    									XCOPY "%SRC1%!PTH!\!U!\!X!" "%SRC1%ARCHIVE\unknown\!T!\sdats\!U!\corrupted\" /Y >NUL
    									ECHO COPIED !T!/sdats/!U!/corrupted/!X! - UNKNOWN CORRUPTED SDAT/BAR
    								)
									) ELSE (
										IF EXIST "%SRC1%ARCHIVE\unknown\!T!\sdats\!U!\!X!" (
    									BREAK
    								) ELSE (
    									XCOPY "%SRC1%!PTH!\!U!\!X!" "%SRC1%ARCHIVE\unknown\!T!\sdats\!U!\" /Y >NUL
    									ECHO COPIED !T!/sdats/!U!/!X! - UNKNOWN SDAT/BAR
    								)
									)
    				 	  )
    				 	)
    				) ELSE (
    					FOR /F "TOKENS=* DELIMS=" %%Y IN ('DIR /B /S "%SRC1%!PTH!\!U!\*!S!_DAT*" 2^>NUL ^| FINDSTR /I /V .sdat ^| FINDSTR /I /V "OBJECTDEFS.*\.bar" ^| FINDSTR /I /V "SCENES.*\.bar"') DO (
    						SET "TMPY=%%Y"
    	 					SET "Y=%%~NXY"
    						CALL :SETSIZE "%SRC1%!PTH!\!U!\!Y!"
								IF !SIZE! EQU 0 (
									IF EXIST "%SRC1%ARCHIVE\unknown\!T!\others\!U!\corrupted\!Y!" (
    								BREAK
    							) ELSE (
    								XCOPY "%SRC1%!PTH!\!U!\!Y!" "%SRC1%ARCHIVE\unknown\!T!\others\!U!\corrupted\" /Y >NUL
    								ECHO COPIED !T!/others/!U!/corrupted/!Y! - UNKNOWN OTHER CORRUPTED FILES
    							)
								) ELSE (
	    					 	IF EXIST "%SRC1%ARCHIVE\unknown\!T!\others\!U!\!Y!" (
    								BREAK
    							) ELSE (
    								XCOPY "%SRC1%!PTH!\!U!\!Y!" "%SRC1%ARCHIVE\unknown\!T!\others\!U!\" /Y >NUL
    								ECHO COPIED !T!/others/!U!/!Y! - UNKNOWN OTHER FILES
    							)
								)
    					)
    				)
    			) ELSE (
    				BREAK
    			)
    		) ELSE (
    			BREAK
    		)
    	)
    	IF NOT EXIST "%SRC1%ANALYSISLOGS\log_ANALYSIS" MKDIR "%SRC1%ANALYSISLOGS\log_ANALYSIS"
			COPY "%SRC1%ANALYSISLOGS\%FINALREPORT%" "%SRC1%ANALYSISLOGS\log_ANALYSIS" >NUL
			REN "%SRC1%ANALYSISLOGS\log_ANALYSIS\%FINALREPORT%" "!PTH1!$!K!$%FINALREPORT%" >NUL
    	IF EXIST "%SRC1%ANALYSISLOGS\%FINALREPORT%" BREAK > "%SRC1%ANALYSISLOGS\%FINALREPORT%"
  	) ELSE (
  		BREAK
  	)
  ) 
) ELSE (
  BREAK
)
ENDLOCAL
EXIT /B

:PROMPT_VERBOSE_MODE_ALL
ECHO.
SET /P "AREYOUSURE=WOULD YOU LIKE TO SIMULATE THE CACHE COPY (Y/[N])? "
IF /I "%AREYOUSURE%" EQU "Y" (
	GOTO CONT_CACHE_COPY_UNLIMITED_ALL_TWO
) ELSE IF /I "%AREYOUSURE%" EQU "N" (
	GOTO START_THREE
) ELSE (
	GOTO PROMPT_VERBOSE_MODE_ALL
)
GOTO :EOF

:CONT_CACHE_COPY_UNLIMITED_ALL_TWO

IF NOT EXIST "%JREPLBAT%" (
	CALL :CREATE_JREPL > "%JREPLBAT%"
)

CALL :STARTTIMER

IF %VERBOSE_UNLIMITED_ALL% EQU 1 (
	ECHO STARTING UP SIMULATION COPY. PLEASE WAIT...
	IF EXIST "%SRC1%ARCHIVE\%NOFILES%" BREAK > "%SRC1%ARCHIVE\%NOFILES%"
	IF EXIST "%SRC1%ARCHIVE\%DCFILES%" BREAK > "%SRC1%ARCHIVE\%DCFILES%"
	IF EXIST "%SRC1%ARCHIVE\%CDNFILES%" BREAK > "%SRC1%ARCHIVE\%CDNFILES%"
) ELSE (
	ECHO STARTING UP CACHE COPY. PLEASE WAIT...
	IF %OVERRIDE_UNLIMITED_ALL% EQU 1 ( 
		IF EXIST "%SRC1%ARCHIVE\%NEWFILES%" BREAK > "%SRC1%ARCHIVE\%NEWFILES%"
	)	ELSE (
		IF EXIST "%SRC1%ARCHIVE\%DUPES%" BREAK > "%SRC1%ARCHIVE\%DUPES%"
		IF EXIST "%SRC1%ARCHIVE\%NOFILES%" BREAK > "%SRC1%ARCHIVE\%NOFILES%"
		IF EXIST "%SRC1%ARCHIVE\%DCFILES%" BREAK > "%SRC1%ARCHIVE\%DCFILES%"
		IF EXIST "%SRC1%ARCHIVE\%CDNFILES%" BREAK > "%SRC1%ARCHIVE\%CDNFILES%"
	)

)

FOR /F "TOKENS=*" %%A IN ('DIR /B /A:D "%SRC1%*" ^| FINDSTR /V ARCHIVE ^| FINDSTR /V INFLOGS ^| FINDSTR /V ANALYSISLOGS ^| FINDSTR /V /RC:"\<BIN\>" ^| FINDSTR /V /RC:"\<__MACOSX\>"') DO FOR /F "TOKENS=*" %%B IN ('DIR /B /A:D /S "%SRC1%%%A\*CACHE*" ^| FINDSTR /V /RC:"\<__MACOSX\>"') DO (
		@ECHO OFF
		SET "A=%%A"
		SET "B=%%B"
		CALL :CONT_CACHE_COPY_UNLIMITED_ALL_THREE
)


IF %VERBOSE_UNLIMITED_ALL% EQU 1 (
	ECHO CACHE SIMULATION HAS BEEN COMPLETED.
	CALL :STOPTIMER
	CALL :DISPLAYTIMERRESULT
	GOTO START_THREE
) ELSE (
	ECHO CACHE COPY HAS BEEN COMPLETED.
	CALL :STOPTIMER
	CALL :DISPLAYTIMERRESULT
	IF %OVERRIDE_UNLIMITED_ALL% EQU 1 (
		GOTO START_THREE
	) ELSE (
		GOTO PROMPT_RENAME_SDATS_UNLIMITED_ALL
	)
	
)
CMD /K

:CONT_CACHE_COPY_UNLIMITED_ALL_THREE

CALL SET "A=%%A%%"
CALL SET "B=%%B%%"

CALL SET "REMSLASH=%SRC1:~0,-1%"

SETLOCAL ENABLEDELAYEDEXPANSION

SET "REMSPACE=!A: =!"
SET "REMLOCALDIR=!B:%SRC1%=!"

SET I=1
SET "PTH=!REMLOCALDIR!"
SET "PTH!I!=%PTH:\=" & SET /A I+=1 & SET "PTH!I!=%"

SET "DUPESPATH=!REMSLASH!\ARCHIVE\%DUPES%"
SET "NOFILESPATH=!REMSLASH!\ARCHIVE\%NOFILES%"
SET "CDNFILEPATH=!REMSLASH!\ARCHIVE\%CDNFILES%"
SET "DCFILEPATH=!REMSLASH!\ARCHIVE\%DCFILES%"
SET "DCFILEPATH=!REMSLASH!\ARCHIVE\%DCFILES%"
SET "NEWDATAFILEPATH=!REMSLASH!\ARCHIVE\%NEWFILES%"

IF NOT EXIST "%LOCALPATH%\exceptions_corrupted.txt" (
	CALL :CREATE_exceptions_corrupted > "%LOCALPATH%\exceptions_corrupted.txt"
)

IF NOT EXIST "%LOCALPATH%\exceptions_modified.txt" (
	CALL :CREATE_exceptions_modified > "%LOCALPATH%\exceptions_modified.txt"
)

SET TRIG1=FALSE
IF /I !PTH2! == NPIA00005 SET TRIG1=TRUE
IF /I !PTH2! == NPIA00010 SET TRIG1=TRUE
IF /I !PTH2! == NPEA00013 SET TRIG1=TRUE
IF /I !PTH3! == NPIA00005 SET TRIG1=TRUE
IF /I !PTH3! == NPIA00010 SET TRIG1=TRUE
IF /I !PTH3! == NPEA00013 SET TRIG1=TRUE
IF !TRIG1! == TRUE (
		
		IF EXIST "!REMSLASH!\%CUSTOMINFLOG%" (
			SET "LOGTEXT=%CUSTOMINFLOG%"
		) ELSE (
			SET "LOGTEXT=%LOGTXT%"
		)

		IF %VERBOSE_UNLIMITED_ALL% EQU 1 (
		
			ECHO INITIATING SIMULATION COPY FOR !A!
		
			CALL "%CACHE_COPY_COMBINED_EXE%" "!REMSLASH!" "!A!" "!A!" "!B!" "!REMSLASH!\!LOGTEXT!" "%FFPROBE%" "!DUPESPATH!" "!NOFILESPATH!" "!CDNFILEPATH!" "!DCFILEPATH!" "%LOCALPATH%\exceptions_modified.txt" "%LOCALPATH%\exceptions_corrupted.txt" --verbose --debug
			
		) ELSE IF %OVERRIDE_UNLIMITED_ALL% EQU 1 (
		
			ECHO INITIATING CACHE COPY FOR !A!
		
			CALL "%CACHE_COPY_COMBINED_EXE%" "!REMSLASH!" "!A!" "!A!" "!B!" "!REMSLASH!\!LOGTEXT!" "%FFPROBE%" "!DUPESPATH!" "!NOFILESPATH!" "!CDNFILEPATH!" "!DCFILEPATH!" "%LOCALPATH%\exceptions_modified.txt" "%LOCALPATH%\exceptions_corrupted.txt" --override "!NEWDATAFILEPATH!"

		) ELSE (
		
			ECHO INITIATING CACHE COPY FOR !A!
		
			CALL "%CACHE_COPY_COMBINED_EXE%" "!REMSLASH!" "!A!" "!A!" "!B!" "!REMSLASH!\!LOGTEXT!" "%FFPROBE%" "!DUPESPATH!" "!NOFILESPATH!" "!CDNFILEPATH!" "!DCFILEPATH!" "%LOCALPATH%\exceptions_modified.txt" "%LOCALPATH%\exceptions_corrupted.txt"
		)
		
) ELSE (
  BREAK
)


ENDLOCAL
EXIT /B

:CACHE_COPIED_UNLIMITED_ALL

:PROMPT_RENAME_SDATS_UNLIMITED_ALL
ECHO.
SET /P "AREYOUSURE=WOULD YOU LIKE TO RENAME OBJECT SDAT's AND ODC's TO UUID_T### (Y/[N])? "
IF /I "%AREYOUSURE%"=="Y" (
	GOTO RENAME_OBJECT_SDAT_COPY_CACHE_UNLIMITED_ALL
) ELSE IF /I "%AREYOUSURE%"=="N" (
	GOTO PROMPT_RENAME_THUMBNAILS_UNLIMITED_ALL
) ELSE (
	GOTO PROMPT_RENAME_SDATS_UNLIMITED_ALL
)

:RENAME_OBJECT_SDAT_COPY_CACHE_UNLIMITED_ALL

CALL :STARTTIMER

SET EXT[0]=.sdat
SET EXT[1]=.odc

FOR /L %%I IN (0, 1, 1) DO (
	CALL SET Z1=%%EXT[%%I]%%
	FOR /F "TOKENS=*" %%A IN ('DIR /B /A:D "%SRC1%ARCHIVE\*" 2^>NUL') DO FOR /F "TOKENS=*" %%B IN ('DIR /B /S "%SRC1%ARCHIVE\%%A\*object*%%Z1%%" 2^>NUL') DO (
			SET "A=%%A"
			SET "B=%%B"
			SET "C=%%~NXB"
			SET "D=%%~NB"
			SET "E=%%~DPB"
			CALL :CONT_RENAME_SDATS_UNLIMITED_ALL
	)
)

ECHO DONE.
CALL :STOPTIMER
CALL :DISPLAYTIMERRESULT
GOTO PROMPT_RENAME_THUMBNAILS_UNLIMITED_ALL

:CONT_RENAME_SDATS_UNLIMITED_ALL

CALL SET "A=%%A%%"
CALL SET "B=%%B%%"
CALL SET "C=%%C%%"
CALL SET "D=%%D%%"
CALL SET "E=%%E%%"
CALL SET "F=%%Z1%%"

SET "SUBSTR1=%C:_=" & REM."%"
SET "SUBSTR2=%C:_=" & SET "SUBSTR2=%"

SETLOCAL ENABLEDELAYEDEXPANSION

SET "G=!B:%SRC1%ARCHIVE\=!"

SET I=1
SET "PATH=!G!"
SET "PATH!I!=%PATH:\=" & SET /A I+=1 & SET "PATH!I!=%"

IF /I !PATH5! == objects (
	IF /I !SUBSTR2! == object!Z1! (
		IF EXIST "!E!!PATH6!_T000!Z1!" (
			ECHO !PATH6!\!PATH7! ALREADY NAME TO !PATH6!_T000!Z1!.
		) ELSE (
 			REN "!B!" "!PATH6!_T000!Z1!"
 			ECHO !PATH6!\!PATH7! WAS RENAMED TO !PATH6!_T000!Z1!.
		)
	) ELSE (
		IF EXIST "!E!!PATH6!_!SUBSTR2!" (
			ECHO !PATH6!\!PATH7! ALREADY NAMED TO !PATH6!_!SUBSTR2!.
		) ELSE (
 			REN "!B!" "!PATH6!_!SUBSTR2!"
 			ECHO !PATH6!\!PATH7! WAS RENAMED TO !PATH6!_!SUBSTR2!.
		)
	)
) ELSE IF /I !PATH6! == objects (
	IF /I !SUBSTR2! == object!Z1! (
		IF EXIST "!E!!PATH7!_T000!Z1!" (
			ECHO !PATH7!\!PATH8! ALREADY NAME TO !PATH7!_T000!Z1!.
		) ELSE (
 			REN "!B!" "!PATH7!_T000!Z1!"
 			ECHO !PATH7!\!PATH8! WAS RENAMED TO !PATH7!_T000!Z1!.
		)
	) ELSE (
		IF EXIST "!E!!PATH7!_!SUBSTR2!" (
			ECHO !PATH7!\!PATH8! ALREADY NAMED TO !PATH7!_!SUBSTR2!.
		) ELSE (
 			REN "!B!" "!PATH7!_!SUBSTR2!"
 			ECHO !PATH7!\!PATH8! WAS RENAMED TO !PATH7!_!SUBSTR2!.
		)
	)
) ELSE IF /I !PATH7! == objects (
	IF /I !SUBSTR2! == object!Z1! (
		IF EXIST "!E!!PATH8!_T000!Z1!" (
			ECHO !PATH8!\!PATH9! ALREADY NAME TO !PATH8!_T000!Z1!.
		) ELSE (
 			REN "!B!" "!PATH8!_T000!Z1!"
 			ECHO !PATH8!\!PATH9! WAS RENAMED TO !PATH8!_T000!Z1!.
		)
	) ELSE (
		IF EXIST "!E!!PATH8!_!SUBSTR2!" (
			ECHO !PATH8!\!PATH9! ALREADY NAMED TO !PATH8!_!SUBSTR2!.
		) ELSE (
 			REN "!B!" "!PATH8!_!SUBSTR2!"
 			ECHO !PATH8!\!PATH9! WAS RENAMED TO !PATH8!_!SUBSTR2!.
		)
	)
) ELSE (
	BREAK
)
ENDLOCAL
EXIT /B

:PROMPT_RENAME_THUMBNAILS_UNLIMITED_ALL
ECHO.
SET /P "AREYOUSURE=WOULD YOU LIKE TO RENAME OBJECT THUMBNAILS TO UUID_T###(S/L) (Y/[N])? "
IF /I "%AREYOUSURE%"=="Y" (
	GOTO RENAME_THUMBNAILS_COPY_CACHE_UNLIMITED_ALL
) ELSE IF /I "%AREYOUSURE%"=="N" (
	GOTO START_THREE
) ELSE (
	GOTO PROMPT_RENAME_THUMBNAILS_UNLIMITED_ALL
)

:RENAME_THUMBNAILS_COPY_CACHE_UNLIMITED_ALL

CALL :STARTTIMER

SET THUMBSIZE[0].STR=large
SET THUMBSIZE[0].LET=L
SET THUMBSIZE[1].STR=small
SET THUMBSIZE[1].LET=S

FOR /L %%I IN (0, 1, 1) DO (
	CALL SET Z1=%%THUMBSIZE[%%I].STR%%
	CALL SET Z2=%%THUMBSIZE[%%I].LET%%
	FOR /F "TOKENS=*" %%A IN ('DIR /B /A:D "%SRC1%ARCHIVE\*" 2^>NUL') DO FOR /F "TOKENS=*" %%B IN ('DIR /B /S "%SRC1%ARCHIVE\%%A\*%%Z1%%*.png" 2^>NUL') DO (
			SET "A=%%A"
			SET "B=%%B"
			SET "C=%%~NXB"
			SET "D=%%~NB"
			SET "E=%%~DPB"
			CALL :CONT_RENAME_THUMBNAILS_UNLIMITED_ALL
	)
)

ECHO DONE.
CALL :STOPTIMER
CALL :DISPLAYTIMERRESULT
GOTO START_THREE
CMD /K

:CONT_RENAME_THUMBNAILS_UNLIMITED_ALL

CALL SET "A=%%A%%"
CALL SET "B=%%B%%"
CALL SET "C=%%C%%"
CALL SET "D=%%D%%"
CALL SET "E=%%E%%"
CALL SET "F=%%Z1%%"

SET "SUBSTR1=%C:_=" & REM."%"
SET "SUBSTR2=%C:_=" & SET "SUBSTR2=%"

SETLOCAL ENABLEDELAYEDEXPANSION

SET "G=!B:%SRC1%ARCHIVE\=!"
SET "VER=!SUBSTR2:.png=!"

echo !G!

SET I=1
SET "PATH=!G!"
SET "PATH!I!=%PATH:\=" & SET /A I+=1 & SET "PATH!I!=%"

IF /I !PATH5! == objects (
	IF /I !SUBSTR2! == !Z1!.png (
		IF EXIST "!E!!PATH6!_T000!Z2!.png" (
			ECHO !PATH6!\!PATH7! ALREADY NAME TO !PATH6!_T000!Z2!.png.
		) ELSE (
 			REN "!B!" "!PATH6!_T000!Z2!.png"
 			ECHO !PATH6!\!PATH7! WAS RENAMED TO !PATH6!_T000!Z2!.png.
		)
	) ELSE (
		IF EXIST "!E!!PATH6!_!VER!!Z2!.png" (
			ECHO !PATH6!\!PATH7! ALREADY NAMED TO !PATH6!_!VER!!Z2!.png.
		) ELSE (
 			REN "!B!" "!PATH6!_!VER!!Z2!.png"
 			ECHO !PATH6!\!PATH7! WAS RENAMED TO !PATH6!_!VER!!Z2!.png.
		)
	)
) ELSE IF /I !PATH5! == scenes (
	IF /I !SUBSTR2! == !Z1!.png (
		IF EXIST "!E!!PATH6!_T000!Z2!.png" (
			ECHO !PATH6!\!PATH7! ALREADY NAME TO !PATH6!_T000!Z2!.png.
		) ELSE (
 			REN "!B!" "!PATH6!_T000!Z2!.png"
 			ECHO !PATH6!\!PATH7! WAS RENAMED TO !PATH6!_T000!Z2!.png.
		)
	) ELSE (
		IF EXIST "!E!!PATH6!_!VER!!Z2!.png" (
			ECHO !PATH6!\!PATH7! ALREADY NAMED TO !PATH6!_!VER!!Z2!.png.
		) ELSE (
 			REN "!B!" "!PATH6!_!VER!!Z2!.png"
 			ECHO !PATH6!\!PATH7! WAS RENAMED TO !PATH6!_!VER!!Z2!.png.
		)
	)
) ELSE IF /I !PATH7! == objects (
	IF /I !SUBSTR2! == !Z1!.png (
		IF EXIST "!E!!PATH8!_T000!Z2!.png" (
			ECHO !PATH8!\!PATH9! ALREADY NAME TO !PATH8!_T000!Z2!.png.
		) ELSE (
 			REN "!B!" "!PATH8!_T000!Z2!.png"
 			ECHO !PATH8!\!PATH9! WAS RENAMED TO !PATH8!_T000!Z2!.png.
		)
	) ELSE (
		IF EXIST "!E!!PATH8!_!VER!!Z2!.png" (
			ECHO !PATH8!\!PATH9! ALREADY NAMED TO !PATH8!_!VER!!Z2!.png.
		) ELSE (
 			REN "!B!" "!PATH8!_!VER!!Z2!.png"
 			ECHO !PATH8!\!PATH9! WAS RENAMED TO !PATH8!_!VER!!Z2!.png.
		)
	)
) ELSE IF /I !PATH7! == scenes (
	IF /I !SUBSTR2! == !Z1!.png (
		IF EXIST "!E!!PATH8!_T000!Z2!.png" (
			ECHO !PATH8!\!PATH9! ALREADY NAME TO !PATH8!_T000!Z2!.png.
		) ELSE (
 			REN "!B!" "!PATH8!_T000!Z2!.png"
 			ECHO !PATH8!\!PATH9! WAS RENAMED TO !PATH8!_T000!Z2!.png.
		)
	) ELSE (
		IF EXIST "!E!!PATH8!_!VER!!Z2!.png" (
			ECHO !PATH8!\!PATH9! ALREADY NAMED TO !PATH8!_!VER!!Z2!.png.
		) ELSE (
 			REN "!B!" "!PATH8!_!VER!!Z2!.png"
 			ECHO !PATH8!\!PATH9! WAS RENAMED TO !PATH8!_!VER!!Z2!.png.
		)
	)
) ELSE (
	BREAK
)

ENDLOCAL
EXIT /B

:COPY_CACHE_UNLIMITED_ALL_CUSTOM_OVERRIDE

IF NOT EXIST "%LOCALPATH%\override.tmp" BREAK > "%LOCALPATH%\override.tmp"

GOTO CONT_COPY_CACHE_UNLIMITED_ALL_CUSTOM_OVERRIDE

:COPY_CACHE_UNLIMITED_ALL_CUSTOM

IF EXIST "%LOCALPATH%\override.tmp" DEL "%LOCALPATH%\override.tmp"

:CONT_COPY_CACHE_UNLIMITED_ALL_CUSTOM_OVERRIDE

(SET \n=^^^
%= THIS EMPTY LINE IS NECESSARY. =%
)

IF EXIST "%SRC1%ARCHIVE" (
	GOTO DELETE_ARCHIVE_PROMPT_CACHE_UNLIMITED_ALL_CUSTOM
) ELSE (
	MKDIR "%SRC1%ARCHIVE"
	GOTO CONT_1_CACHE_UNLIMITED_ALL_CUSTOM
)

:DELETE_ARCHIVE_PROMPT_CACHE_UNLIMITED_ALL_CUSTOM
ECHO.
SET /P "AREYOUSURE=DELETE ARCHIVE FOLDER (Y/[N])? "
ECHO.
IF /I "%AREYOUSURE%" EQU "Y" (
	RMDIR /S /Q "%SRC1%ARCHIVE"
	GOTO CONT_1_CACHE_UNLIMITED_ALL_CUSTOM
) ELSE IF /I "%AREYOUSURE%" EQU "N" (
	GOTO CONT_1_CACHE_UNLIMITED_ALL_CUSTOM
) ELSE (
	GOTO DELETE_ARCHIVE_PROMPT_CACHE_UNLIMITED_ALL_CUSTOM
)

:CONT_1_CACHE_UNLIMITED_ALL_CUSTOM

IF NOT EXIST "%JREPLStrings%" (
	CALL :CREATE_JREPLStrings > "%JREPLStrings%"
)

GOTO CONT_2_CACHE_UNLIMITED_ALL_CUSTOM

:RECALC_JREPL_STRINGS_UNLIMITED_ALL_CUSTOM

IF EXIST "%JREPLStrings%" (
	CALL :CREATE_JREPLStrings > "%JREPLStrings%"
)

:CONT_2_CACHE_UNLIMITED_ALL_CUSTOM

SETLOCAL ENABLEDELAYEDEXPANSION

SET COUNTSTR=0
FOR /F "TOKENS=1,2,3,4 USEBACKQ DELIMS=	" %%A IN ("%JREPLStrings%") DO (
   SET /A COUNTSTR+=1
   SET "JREPLSTR[!COUNTSTR!].Search=%%A"
   SET "JREPLSTR[!COUNTSTR!].Replace=%%B"
   SET "JREPLSTR[!COUNTSTR!].Option=%%C"
   SET "JREPLSTR[!COUNTSTR!].Folder=%%D"
   SET "JREPLSTR[!COUNTSTR!].Count=!COUNTSTR!"
   SET "ALLVALUES=!ALLVALUES!!COUNTSTR! "
   ECHO !COUNTSTR!. %%D
)

SET LASTOPT=%COUNTSTR%

FOR /L %%J IN (1, 1, %LASTOPT%) DO (
	SET X=FALSE
	IF "!JREPLSTR[%%J].Folder!"=="SCENELISTS" SET X=TRUE
	IF "!JREPLSTR[%%J].Folder!"=="OBJECTCATALOGUES" SET X=TRUE
	IF "!JREPLSTR[%%J].Folder!"=="NAVIGATORS" SET X=TRUE
	IF "!JREPLSTR[%%J].Folder!"=="COMMERCE POINTS" SET X=TRUE
	IF "!JREPLSTR[%%J].Folder!"=="CONFIGS" SET X=TRUE
	IF "!JREPLSTR[%%J].Folder!"=="CONFIG XML" SET X=TRUE
	IF "!JREPLSTR[%%J].Folder!"=="MOTD-90B" SET X=TRUE
	IF "!JREPLSTR[%%J].Folder!"=="MOTD-F14" SET X=TRUE
	IF "!JREPLSTR[%%J].Folder!"=="NEWSVIEWER-EB6" SET X=TRUE
	IF "!JREPLSTR[%%J].Folder!"=="SCREENS" SET X=TRUE
	IF "!JREPLSTR[%%J].Folder!"=="RSS FEEDS" SET X=TRUE
	IF "!JREPLSTR[%%J].Folder!"=="SCENE VERSION XMLS" SET X=TRUE
	IF "!JREPLSTR[%%J].Folder!"=="PROFANITYDICTIONARIES" SET X=TRUE
	IF "!JREPLSTR[%%J].Folder!"=="SERVICE IDS" SET X=TRUE
	IF "!JREPLSTR[%%J].Folder!"=="AVATAR PFP" SET X=TRUE
	IF "!JREPLSTR[%%J].Folder!"=="HELPTEXT" SET X=TRUE
	IF "!JREPLSTR[%%J].Folder!"=="CLUBHOUSE XML" SET X=TRUE
	IF "!JREPLSTR[%%J].Folder!"=="XML" SET X=TRUE
	IF !X! == TRUE (
		SET "PRESENTNUM=!JREPLSTR[%%J].Count!"
		SET "PRESENTSTR=!JREPLSTR[%%J].Folder!"
		SET "OPT=!OPT!!PRESENTNUM! "
		SET "PRESENT=!PRESENT!!PRESENTSTR!!\n!"
		SET "PRESENT=!PRESENT:^=!"
	)
)

:GETOPTIONS_CACHE_UNLIMITED_ALL_CUSTOM
SET "OP=!OPT!"
ECHO.
ECHO PREPEND "Q" TO ANY OPTION TO QUERY ONLY (e.g., Q1 Q2 Q3)
ECHO PRESS ENTER TO QUERY THE PRESENT
ECHO PRESS P TO SEE PRESENT
ECHO PRESS 0 TO QUERY ALL W/O COPYING CACHE
ECHO PRESS A TO QUERY ALL AND COPY CACHE
ECHO PRESS R TO RECREATE JREPLStrings.txt
ECHO PRESS X TO GO BACK TO MAIN MENU
IF EXIST "%LOCALPATH%\override.tmp" (
ECHO.
ECHO.^|----------^|
ECHO.^| SEPARATE ^|
ECHO.^|----------^|
ECHO.
) ELSE (
ECHO.
ECHO.^|----------^|
ECHO.^| COMBINED ^|
ECHO.^|----------^|
ECHO.
)
SET /P "OP=PICK JREPL STRING TO QUERY (e.g., 1 2 3) : "
ECHO.

SET "NOSPACES=!OP: =!"
IF "!NOSPACES!"=="" GOTO GETOPTIONS_CACHE_UNLIMITED_ALL_CUSTOM

IF [!OP!]==[] GOTO GETOPTIONS_CACHE_UNLIMITED_ALL_CUSTOM

IF /I "%OP%"=="P" ECHO !PRESENT! & GOTO GETOPTIONS_CACHE_UNLIMITED_ALL_CUSTOM

IF !OP! EQU 0 (
	FOR /L %%Q IN (1, 1, %LASTOPT%) DO (
		SET "SEARCH=!JREPLSTR[%%Q].Search!"
		SET "REPLACE=!JREPLSTR[%%Q].Replace!"
		SET "BLOCKLIST=!JREPLSTR[%%Q].Option!"
		SET "FOLDER=!JREPLSTR[%%Q].Folder!"
		ECHO QUERYING %LOGTXT% FOR !FOLDER!...
		IF NOT EXIST "%SRC1%ARCHIVE\!FOLDER!" MKDIR "%SRC1%ARCHIVE\!FOLDER!"
    CALL "%CUSTOM_QUERY%" "!SEARCH!" "!REPLACE!" "!BLOCKLIST!" "%SRC1%%LOGTXT%" "%SRC1%\ARCHIVE\!FOLDER!\%CUSTOMINFLOG%"
    CALL :SETSIZE "%SRC1%\ARCHIVE\!FOLDER!\%CUSTOMINFLOG%"
    IF !SIZE! EQU 0 (
     	ECHO NO RESULTS FOR !FOLDER!
    	IF EXIST "%SRC1%\ARCHIVE\!FOLDER!" RMDIR /S /Q "%SRC1%\ARCHIVE\!FOLDER!"
    ) ELSE (
   		IF EXIST "%SRC1%\ARCHIVE\!FOLDER!\%CUSTOMINFLOG%" ECHO %CUSTOMINFLOG% CREATED FOR !FOLDER!
    )
	)
	ENDLOCAL
	GOTO START_THREE
)

IF /I "%OP%"=="X" (
ENDLOCAL
IF EXIST "%LOCALPATH%\override.tmp" DEL "%LOCALPATH%\override.tmp"
GOTO START_THREE
)
IF /I "%OP%"=="R" ENDLOCAL & GOTO RECALC_JREPL_STRINGS_UNLIMITED_ALL_CUSTOM
IF /I "%OP%"=="A" SET "OP=%ALLVALUES%"

CALL :STARTTIMER

FOR %%A IN (!OP!) DO (
    CALL :PROCESS_OPTION_UNLIMITED_ALL_CUSTOM "%%A"
)

IF [%INVALOPTION%]==[] (
	IF %SKIPCOPY% EQU 0 (
    	ECHO ALL CACHE COPIES HAVE BEEN COMPLETED.
	)
)

CALL :STOPTIMER
CALL :DISPLAYTIMERRESULT
IF EXIST "%LOCALPATH%\override.tmp" DEL "%LOCALPATH%\override.tmp"
ENDLOCAL
GOTO START_THREE


:PROCESS_OPTION_UNLIMITED_ALL_CUSTOM

SET CUROPT=%~1
SET FIRSTCHAR=!CUROPT:~0,1!

IF /I "!FIRSTCHAR!"=="Q" (
	SET CUROPT=!CUROPT:%FIRSTCHAR%=!
	SET SKIPCOPY=1
) ELSE (
	SET CUROPT=%~1
	SET SKIPCOPY=0
)

SET "SEARCH=!JREPLSTR[%CUROPT%].Search!"
SET "REPLACE=!JREPLSTR[%CUROPT%].Replace!"
SET "BLOCKLIST=!JREPLSTR[%CUROPT%].Option!"
SET "FOLDER=!JREPLSTR[%CUROPT%].Folder!"
SET B=FALSE
IF !JREPLSTR[%CUROPT%].Count! GTR %LASTOPT% SET B=TRUE
IF !JREPLSTR[%CUROPT%].Count! NEQ +!JREPLSTR[%CUROPT%].Count! SET B=TRUE
IF !JREPLSTR[%CUROPT%].Count! LSS 0 SET B=TRUE
IF !B! == TRUE (
    SET "INVALOPTION=!CUROPT!" & ECHO INVALID OPTION "!CUROPT!"
) ELSE (
    CALL :EXECUTE_QUERY_UNLIMITED_ALL_CUSTOM "!CUROPT!"
)
EXIT /B

:: CALL "%JREPLBAT%" SEARCH REPLACE /V /JMATCHQ /I /XSEQ /EXC BLOCKLIST /F "%SRC1%%LOGTXT%" /O "%SRC1%\ARCHIVE\!FOLDER!\%CUSTOMINFLOG%"
:: CALL "%CUSTOM_QUERY%" "%SEARCH%" "%REPLACE%" "%BLOCKLIST%" "%SRC1%%LOGTXT%" "%SRC1%\ARCHIVE\!FOLDER!\%CUSTOMINFLOG%"

:EXECUTE_QUERY_UNLIMITED_ALL_CUSTOM

ECHO QUERYING %LOGTXT% FOR !FOLDER!...

IF NOT EXIST "%SRC1%ARCHIVE\!FOLDER!" MKDIR "%SRC1%ARCHIVE\!FOLDER!"

IF EXIST "%SRC1%\ARCHIVE\!FOLDER!\%CUSTOMINFLOG%" ECHO %CUSTOMINFLOG% ALREADY EXISTS FOR !FOLDER! & GOTO SKIP_CUSTOMINFLOG

CALL "%CUSTOM_QUERY%" "%SEARCH%" "%REPLACE%" "%BLOCKLIST%" "%SRC1%%LOGTXT%" "%SRC1%\ARCHIVE\!FOLDER!\%CUSTOMINFLOG%"

IF EXIST "%SRC1%\ARCHIVE\!FOLDER!\%CUSTOMINFLOG%" (

	CALL :SETSIZE "%SRC1%\ARCHIVE\!FOLDER!\%CUSTOMINFLOG%"

	IF !SIZE! EQU 0 (
		ECHO NO RESULTS FOR !FOLDER!
		IF EXIST "%SRC1%\ARCHIVE\!FOLDER!" RMDIR /S /Q "%SRC1%\ARCHIVE\!FOLDER!"
	) ELSE (
		 ECHO %CUSTOMINFLOG% CREATED FOR !FOLDER!
     IF %SKIPCOPY% EQU 1 (
     	BREAK
     ) ELSE (
     	CALL :INITIATE_CACHE_COPY_UNLIMITED_ALL_CUSTOM
     )
	)
) ELSE (
	ECHO NO RESULTS FOR !FOLDER!
	IF EXIST "%SRC1%\ARCHIVE\!FOLDER!" RMDIR /S /Q "%SRC1%\ARCHIVE\!FOLDER!"
)

GOTO SKIP_TO_END_UNLIMITED_ALL_CUSTOM

:SKIP_CUSTOMINFLOG

CALL :SETSIZE "%SRC1%\ARCHIVE\!FOLDER!\%CUSTOMINFLOG%"

IF !SIZE! EQU 0 (
    ECHO NO RESULTS FOR !FOLDER!
    IF EXIST "%SRC1%\ARCHIVE\!FOLDER!" RMDIR /S /Q "%SRC1%\ARCHIVE\!FOLDER!"
) ELSE (
  IF %SKIPCOPY% EQU 1 (
  	BREAK
  ) ELSE (
  	CALL :INITIATE_CACHE_COPY_UNLIMITED_ALL_CUSTOM
  )
)

:SKIP_TO_END_UNLIMITED_ALL_CUSTOM

EXIT /B

:INITIATE_CACHE_COPY_UNLIMITED_ALL_CUSTOM

ECHO INITIATING CACHE COPY FOR !FOLDER!...

IF EXIST "%LOCALPATH%\override.tmp" (
	BREAK
) ELSE (
	IF EXIST "%SRC1%ARCHIVE\!FOLDER!\%NOFILES%" DEL "%SRC1%ARCHIVE\!FOLDER!\%NOFILES%"
	IF EXIST "%SRC1%ARCHIVE\!FOLDER!\%DUPES%" DEL "%SRC1%ARCHIVE\!FOLDER!\%DUPES%"
	IF EXIST "%SRC1%ARCHIVE\!FOLDER!\%PSN_ID%" DEL "%SRC1%ARCHIVE\!FOLDER!\%PSN_ID%"
)

FOR /F "TOKENS=*" %%A IN ('DIR /B /A:D "%SRC1%*" ^| FINDSTR /V ARCHIVE ^| FINDSTR /V INFLOGS ^| FINDSTR /V ANALYSISLOGS ^| FINDSTR /V /RC:"\<BIN\>" ^| FINDSTR /V /RC:"\<__MACOSX\>"') DO (
    FOR /F "TOKENS=*" %%B IN ('DIR /B /A:D /S "%SRC1%%%A\*CACHE*"') DO (
        CALL :CONT_CACHE_COPY_UNLIMITED_ALL_CUSTOM "%%A" "%%B"
    )
)
EXIT /B

:CONT_CACHE_COPY_UNLIMITED_ALL_CUSTOM

SET "SRC_DIR_NAME=%~1"
SET "CACHE_DIR_PATH=%~2"

SET "REM_SPACE=!SRC_DIR_NAME: =!"

SET "I=1"
SET "PTH=!CACHE_DIR_PATH:%SRC1%=!"

:SPLITLOOP
FOR /F "TOKENS=1* DELIMS=\" %%A IN ("!PTH!") DO (
    SET "PTH!I!=%%A"
    SET /A I+=1
    SET "PTH=%%B"
    IF NOT "!PTH!"=="" GOTO SPLITLOOP
)

SET "TRIG1=FALSE"
IF /I "!PTH2!"=="NPIA00005" SET "TRIG1=TRUE"
IF /I "!PTH2!"=="NPIA00010" SET "TRIG1=TRUE"
IF /I "!PTH2!"=="NPEA00013" SET "TRIG1=TRUE"
IF /I "!PTH3!"=="NPIA00005" SET "TRIG1=TRUE"
IF /I "!PTH3!"=="NPIA00010" SET "TRIG1=TRUE"
IF /I "!PTH3!"=="NPEA00013" SET "TRIG1=TRUE"

IF "!TRIG1!"=="TRUE" (

		IF EXIST "%LOCALPATH%\override.tmp" (
			IF EXIST "%SRC1%ARCHIVE\!FOLDER!\!SRC_DIR_NAME!\%NOFILES%" DEL "%SRC1%ARCHIVE\!FOLDER!\!SRC_DIR_NAME!\%NOFILES%"
			IF EXIST "%SRC1%ARCHIVE\!FOLDER!\!SRC_DIR_NAME!\%DUPES%" DEL "%SRC1%ARCHIVE\!FOLDER!\!SRC_DIR_NAME!\%DUPES%"
		) ELSE (
			BREAK
		)

    FOR /F "TOKENS=1,2,3,4 USEBACKQ DELIMS=|" %%C IN ("%SRC1%ARCHIVE\!FOLDER!\%CUSTOMINFLOG%") DO (
        IF /I "!SRC_DIR_NAME!"=="%%F" (
            CALL :COPY_FILE "%%C" "%%D" "%%E" "%%F"
        )
    )
    
		IF EXIST "%LOCALPATH%\override.tmp" (
    	IF EXIST "%SRC1%ARCHIVE\!FOLDER!\!SRC_DIR_NAME!\%DUPES%" SORT /UNIQUE "%SRC1%ARCHIVE\!FOLDER!\!SRC_DIR_NAME!\%DUPES%" /O "%SRC1%ARCHIVE\!FOLDER!\!SRC_DIR_NAME!\%DUPES%"
		) ELSE (
    	IF EXIST "%SRC1%ARCHIVE\!FOLDER!\%DUPES%" SORT /UNIQUE "%SRC1%ARCHIVE\!FOLDER!\%DUPES%" /O "%SRC1%ARCHIVE\!FOLDER!\%DUPES%"
			IF EXIST "%SRC1%ARCHIVE\!FOLDER!\%PSN_ID%" SORT /UNIQUE "%SRC1%ARCHIVE\!FOLDER!\%PSN_ID%" /O "%SRC1%ARCHIVE\!FOLDER!\%PSN_ID%"
		)
    
    ECHO CACHE COPY OF !FOLDER! HAS BEEN COMPLETED FOR !SRC_DIR_NAME!.
    
) ELSE (
   BREAK
)
EXIT /B

:COPY_FILE

SET "C=%~1"
SET "D=%~2"
SET "E=%~3"
SET "F=%~4"

SET "YEAR=!E:~-4!"
SET "MONTH=!E:~2,-4!"
SET "DAY=!E:~0,2!"
IF /I "!MONTH!"=="Jan" (
 SET "MTH=01"
) ELSE IF /I "!MONTH!"=="Feb" (
 SET "MTH=02"
) ELSE IF /I "!MONTH!"=="Mar" (
 SET "MTH=03"
) ELSE IF /I "!MONTH!"=="Apr" (
 SET "MTH=04"
) ELSE IF /I "!MONTH!"=="May" (
 SET "MTH=05"
) ELSE IF /I "!MONTH!"=="Jun" (
 SET "MTH=06"
) ELSE IF /I "!MONTH!"=="Jul" (
 SET "MTH=07"
) ELSE IF /I "!MONTH!"=="Aug" (
 SET "MTH=08"
) ELSE IF /I "!MONTH!"=="Sep" (
 SET "MTH=09"
) ELSE IF /I "!MONTH!"=="Oct" (
 SET "MTH=10"
) ELSE IF /I "!MONTH!"=="Nov" (
 SET "MTH=11"
) ELSE IF /I "!MONTH!"=="Dec" (
 SET "MTH=12"
)
IF "!E!"=="null" (
	SET "DATE=null"
) ELSE (
	SET "DATE=!YEAR!-!MTH!-!DAY!"
)
SET "INFURLROOTDIR=%D:/=" & REM."%"
SET "INFURLFILE=%D:/=" & SET "INFURLFILE=%"
SET "INFURLFILEEXT=%INFURLFILE:.=" & SET "INFURLFILEEXT=%"
SET "INFURLFILEBASE=!INFURLFILE:.%INFURLFILEEXT%=!"
SET "INFURLFILEPATH=!D:/%INFURLFILE%=!"
SET "INFURLLASTFOLDER=%INFURLFILEPATH:/=" & SET "INFURLLASTFOLDER=%"

SET "CRACKLE=FALSE"
IF /I "!INFURLROOTDIR!"=="images-us-az.crackle.com" SET "CRACKLE=TRUE"
IF /I "!INFURLROOTDIR!"=="images.crackle.com" SET "CRACKLE=TRUE"
IF /I "!INFURLROOTDIR!"=="images2.crackle.com" SET "CRACKLE=TRUE"
IF /I "!INFURLROOTDIR!"=="images3.crackle.com" SET "CRACKLE=TRUE"
IF "!CRACKLE!"=="TRUE" (
	IF /I "!INFURLFILEEXT!"=="jpg" (
		SET "SPECIALPATH=!D!"
	) ELSE IF /I "!INFURLFILEEXT!"=="png" (
		SET "SPECIALPATH=!D!"
	) ELSE (
		FOR /F "DELIMS== TOKENS=1" %%A IN ("%D%") DO SET "REMURLJUNK=%%A"
		SET "SPECIALPATH=!REMURLJUNK:.jpgts=.jpg!"
	)
) ELSE (
	SET "SPECIALPATH=!D!"
)

FOR %%K IN ("!SPECIALPATH!") DO (
    SET "SPECIALPATH_FULLDIR=%%~DPK"
    SET "SPECIALPATH_NAME=%%~NK"
    SET "SPECIALPATH_EXT=%%~XK"
		SET "SPECIALPATH_FULLNAME=%%~NXK"
		SET "SPECIALPATH_PARTDIR=!SPECIALPATH_FULLDIR:%SRC1%=!"
)

IF "!INFURLROOTDIR!"=="!INFURLFILE!" (
	IF "!DATE!"=="null" (
		SET "FINALPATH_FILENAME=!SPECIALPATH_NAME!"
		SET "FINALPATH_PTHDIR=%SRC1%ARCHIVE\!FOLDER!\"
		SET "FINALPATH=!FINALPATH_PTHDIR!!FINALPATH_FILENAME!!SPECIALPATH_EXT!"
		SET "FINALPATH_UNIQUE=!FINALPATH_PTHDIR!!FINALPATH_FILENAME!-1!SPECIALPATH_EXT!"
	) ELSE (
		SET "FINALPATH_FILENAME=!SPECIALPATH_NAME!_!DATE!"
		SET "FINALPATH_PTHDIR=%SRC1%ARCHIVE\!FOLDER!\"
		SET "FINALPATH=!FINALPATH_PTHDIR!!FINALPATH_FILENAME!!SPECIALPATH_EXT!"
		SET "FINALPATH_UNIQUE=!FINALPATH_PTHDIR!!FINALPATH_FILENAME!-1!SPECIALPATH_EXT!"
	)
) ELSE (
	IF "!DATE!"=="null" (
		SET "FINALPATH_FILENAME=!SPECIALPATH_NAME!"
		SET "FINALPATH_PTHDIR=%SRC1%ARCHIVE\!FOLDER!\!SPECIALPATH_PARTDIR!"
		SET "FINALPATH=!FINALPATH_PTHDIR!!FINALPATH_FILENAME!!SPECIALPATH_EXT!"
		SET "FINALPATH_UNIQUE=!FINALPATH_PTHDIR!!FINALPATH_FILENAME!-1!SPECIALPATH_EXT!"
	) ELSE (
		SET "FINALPATH_FILENAME=!SPECIALPATH_NAME!_!DATE!"
		SET "FINALPATH_PTHDIR=%SRC1%ARCHIVE\!FOLDER!\!SPECIALPATH_PARTDIR!"
		SET "FINALPATH=!FINALPATH_PTHDIR!!FINALPATH_FILENAME!!SPECIALPATH_EXT!"
		SET "FINALPATH_UNIQUE=!FINALPATH_PTHDIR!!FINALPATH_FILENAME!-1!SPECIALPATH_EXT!"
	)
)


IF EXIST "%LOCALPATH%\override.tmp" (
	FOR /F "TOKENS=*" %%G IN ('DIR /B /S "%SRC1%!F!\!C!_DAT.*" 2^>NUL ^|^| ECHO !REMSPACE!	!C!_INF	!D!^>^>"%SRC1%ARCHIVE\!FOLDER!\!F!\%NOFILES%"') DO (
		SET "G=%%G"
		SET "H=%%~NXG"
		SET "J=!G:%SRC1%=!"
		CALL :GET_FILE_INFO "%%G" "%FFPROBE%"
		SET "ORIG_FILESIZE=!FILESIZE!"
		SET "ORIG_SHA1=!SHA1HASH!"
		SET "ORIG_SDATVER=!SDATVER!"
		SET "ORIG_MISSINGBYTES=!MISSINGBYTES!"
		SET "ORIG_IMAGE_COR=!IMGCOR!"
		SET "ORIG_VIDEO_COR=!VIDCOR!"
		IF !ORIG_FILESIZE! EQU 0 (
			IF EXIST "%SRC1%ARCHIVE\!FOLDER!\!F!\corrupted\!SPECIALPATH!" (
				BREAK
			) ELSE (
				ECHO F|XCOPY "!G!" "%SRC1%ARCHIVE\!FOLDER!\!F!\corrupted\!SPECIALPATH!" /Y >NUL
				ECHO COPIED !F!/corrupted/!SPECIALPATH! - CORRUPT ^( 0 BYTES ^)
			)
		) ELSE IF !ORIG_IMAGE_COR! EQU 1 (
			
			IF EXIST "%SRC1%ARCHIVE\!FOLDER!\!F!\corrupted\!SPECIALPATH!" (
				CALL :INCREMENTAL_COPY "!G!" "%SRC1%ARCHIVE\!FOLDER!\!F!\corrupted\!SPECIALPATH!" "1"
				IF !ORIG_SHA1! == !COR_OLD_SHA1! (
					BREAK
				) ELSE (
					IF !ORIG_FILESIZE! GTR !COR_OLD_FILESIZE! (
						ECHO F|XCOPY "!G!" "!FINAL_TARGET_FILE!" /Y >NUL
						ECHO COPIED !F!/corrupted/!SPECIALPATH! - CORRUPT WITH NEW FILE SIZE ^( BAD IMG ^)
					)
				)
			) ELSE (
				ECHO F|XCOPY "!G!" "%SRC1%ARCHIVE\!FOLDER!\!F!\corrupted\!SPECIALPATH!" /Y >NUL
				ECHO COPIED !F!/corrupted/!SPECIALPATH! - CORRUPT ^( BAD IMG ^)
			)
			
		) ELSE IF !ORIG_VIDEO_COR! EQU 1 (
	
			IF EXIST "%SRC1%ARCHIVE\!FOLDER!\!F!\corrupted\!SPECIALPATH!" (
				CALL :INCREMENTAL_COPY "!G!" "%SRC1%ARCHIVE\!FOLDER!\!F!\corrupted\!SPECIALPATH!" "1"
				IF !ORIG_SHA1! == !COR_OLD_SHA1! (
					BREAK
				) ELSE (
					IF !ORIG_FILESIZE! GTR !COR_OLD_FILESIZE! (
						ECHO F|XCOPY "!G!" "!FINAL_TARGET_FILE!" /Y >NUL
						ECHO COPIED !F!/corrupted/!SPECIALPATH! - CORRUPT WITH NEW FILE SIZE ^( BAD VID ^)
					)
				)
			) ELSE (
				ECHO F|XCOPY "!G!" "%SRC1%ARCHIVE\!FOLDER!\!F!\corrupted\!SPECIALPATH!" /Y >NUL
				ECHO COPIED !F!/corrupted/!SPECIALPATH! - CORRUPT ^( BAD VID ^)
			)
				
		) ELSE IF !ORIG_SDATVER! EQU 0 (
			
			IF EXIST "%SRC1%ARCHIVE\!FOLDER!\!F!\corrupted\!SPECIALPATH!" (
				CALL :INCREMENTAL_COPY "!G!" "%SRC1%ARCHIVE\!FOLDER!\!F!\corrupted\!SPECIALPATH!" "1"
				IF !ORIG_SHA1! == !COR_OLD_SHA1! (
					BREAK
				) ELSE (
					IF !ORIG_FILESIZE! GTR !COR_OLD_FILESIZE! (
						ECHO F|XCOPY "!G!" "!FINAL_TARGET_FILE!" /Y >NUL
						ECHO COPIED !F!/corrupted/!SPECIALPATH! - CORRUPT WITH NEW FILE SIZE ^( BAD SDAT ^)
					)
				)
			) ELSE (
				ECHO F|XCOPY "!G!" "%SRC1%ARCHIVE\!FOLDER!\!F!\corrupted\!SPECIALPATH!" /Y >NUL
				ECHO COPIED !F!/corrupted/!SPECIALPATH! - CORRUPT ^( BAD SDAT ^)
			)
				
		) ELSE IF !ORIG_SDATVER! EQU 3.3 (
			
			IF EXIST "%SRC1%ARCHIVE\!FOLDER!\!F!\modified\!SPECIALPATH!" (
				CALL :INCREMENTAL_COPY "!G!" "%SRC1%ARCHIVE\!FOLDER!\!F!\modified\!SPECIALPATH!"
				IF !ORIG_SHA1! == !COR_OLD_SHA1! (
					BREAK
				) ELSE (
					ECHO F|XCOPY "!G!" "!FINAL_TARGET_FILE!" /Y >NUL
					ECHO COPIED !F!/corrupted/!SPECIALPATH! - MODIFIED DUPE ^( SDAT ^)
				)
			) ELSE (
				ECHO F|XCOPY "!G!" "%SRC1%ARCHIVE\!FOLDER!\!F!\modified\!SPECIALPATH!" /Y >NUL
				ECHO COPIED !F!/corrupted/!SPECIALPATH! - MODIFIED ^( SDAT ^)
			)
			
		) ELSE (
			IF EXIST "%SRC1%ARCHIVE\!FOLDER!\!F!\!SPECIALPATH!" (
				CALL :INCREMENTAL_COPY "!G!" "%SRC1%ARCHIVE\!FOLDER!\!F!\!SPECIALPATH!" "1"
				IF !ORIG_SHA1! == !COR_OLD_SHA1! (
					(ECHO !F!	!J!	!SPECIALPATH!)>>"%SRC1%ARCHIVE\!FOLDER!\!F!\%DUPES%"
				) ELSE (
				
					IF EXIST "%SRC1%ARCHIVE\!FOLDER!\!F!\!SPECIALPATH_PARTDIR!!SPECIALPATH_NAME!-1!SPECIALPATH_EXT!" (
						CALL :INCREMENTAL_COPY "!G!" "%SRC1%ARCHIVE\!FOLDER!\!F!\!SPECIALPATH!"
						
						FOR /F "TOKENS=*" %%U IN ('DIR /B /S "%SRC1%ARCHIVE\!FOLDER!\!F!\!SPECIALPATH_PARTDIR!*!SPECIALPATH_NAME!*!SPECIALPATH_EXT!" 2^>NUL') DO (
							SET "U=%%U"
							CALL :GET_FILE_INFO "!U!" "%FFPROBE%"
							SET "ARCHIVE1_SHA1=!SHA1HASH!"
							IF !ORIG_SHA1! == !ARCHIVE1_SHA1! (
								SET NOCOPYX=!ARCHIVE1_SHA1!
							)
						)
						IF NOT !NOCOPYX! == !ORIG_SHA1! (
							ECHO F|XCOPY "!G!" "!FINAL_TARGET_FILE!" /Y >NUL
							ECHO COPIED !F!/!SPECIALPATH! - UNIQUE DUPE
						)
					) ELSE (
						ECHO F|XCOPY "!G!" "%SRC1%ARCHIVE\!FOLDER!\!F!\!SPECIALPATH_PARTDIR!!SPECIALPATH_NAME!-1!SPECIALPATH_EXT!" /Y >NUL
						ECHO COPIED !F!/!SPECIALPATH! - UNIQUE DUPE
					)
				)
			) ELSE (
				ECHO F|XCOPY "!G!" "%SRC1%ARCHIVE\!FOLDER!\!F!\!SPECIALPATH!" /Y >NUL
				ECHO COPIED !F!/!SPECIALPATH!
			)
		)
	)
) ELSE (
	FOR /F "TOKENS=*" %%G IN ('DIR /B /S "%SRC1%!F!\!C!_DAT.*" 2^>NUL ^|^| ECHO !REMSPACE!	!C!_INF	!D!^>^>"%SRC1%ARCHIVE\!FOLDER!\%NOFILES%"') DO (
		SET "G=%%G"
		SET "H=%%~NXG"
		SET "J=!G:%SRC1%=!"
		CALL :GET_FILE_INFO "%%G" "%FFPROBE%"
		SET "ORIG_FILEEXT=!FILEEXT!"
		SET "ORIG_FILESIZE=!FILESIZE!"
		SET "ORIG_SHA1=!SHA1HASH!"
		SET "ORIG_SDATVER=!SDATVER!"
		SET "ORIG_MISSINGBYTES=!MISSINGBYTES!"
		SET "ORIG_IMAGE_COR=!IMGCOR!"
		SET "ORIG_VIDEO_COR=!VIDCOR!"
		IF !ORIG_FILESIZE! EQU 0 (
			IF EXIST "%SRC1%ARCHIVE\!FOLDER!\corrupted\!SPECIALPATH!" (
				BREAK
			) ELSE (
				ECHO F|XCOPY "!G!" "%SRC1%ARCHIVE\!FOLDER!\corrupted\!SPECIALPATH!" /Y >NUL
				ECHO COPIED !F!/corrupted/!SPECIALPATH! - CORRUPT ^( 0 BYTES ^)
			)
		) ELSE IF !ORIG_IMAGE_COR! EQU 1 (
		
			IF EXIST "%SRC1%ARCHIVE\!FOLDER!\corrupted\!SPECIALPATH!" (
				CALL :INCREMENTAL_COPY "!G!" "%SRC1%ARCHIVE\!FOLDER!\corrupted\!SPECIALPATH!" "1"
				IF !ORIG_SHA1! == !COR_OLD_SHA1! (
					BREAK
				) ELSE (
					IF !ORIG_FILESIZE! GTR !COR_OLD_FILESIZE! (
						ECHO F|XCOPY "!G!" "!FINAL_TARGET_FILE!" /Y >NUL
						ECHO COPIED !F!/corrupted/!SPECIALPATH! - CORRUPT WITH NEW FILE SIZE ^( BAD IMG ^)
					)
				)
			) ELSE (
				ECHO F|XCOPY "!G!" "%SRC1%ARCHIVE\!FOLDER!\corrupted\!SPECIALPATH!" /Y >NUL
				ECHO COPIED !F!/corrupted/!SPECIALPATH! - CORRUPT ^( BAD IMG ^)
			)
		
		) ELSE IF !ORIG_VIDEO_COR! EQU 1 (

			IF EXIST "%SRC1%ARCHIVE\!FOLDER!\corrupted\!SPECIALPATH!" (
				CALL :INCREMENTAL_COPY "!G!" "%SRC1%ARCHIVE\!FOLDER!\corrupted\!SPECIALPATH!" "1"
				IF !ORIG_SHA1! == !COR_OLD_SHA1! (
					BREAK
				) ELSE (
					IF !ORIG_FILESIZE! GTR !COR_OLD_FILESIZE! (
						ECHO F|XCOPY "!G!" "!FINAL_TARGET_FILE!" /Y >NUL
						ECHO COPIED !F!/corrupted/!SPECIALPATH! - CORRUPT WITH NEW FILE SIZE ^( BAD VID ^)
					)
				)
			) ELSE (
				ECHO F|XCOPY "!G!" "%SRC1%ARCHIVE\!FOLDER!\corrupted\!SPECIALPATH!" /Y >NUL
				ECHO COPIED !F!/corrupted/!SPECIALPATH! - CORRUPT ^( BAD VID ^)
			)
			
		) ELSE IF !ORIG_SDATVER! EQU 0 (
		
			IF EXIST "%SRC1%ARCHIVE\!FOLDER!\corrupted\!SPECIALPATH!" (
				CALL :INCREMENTAL_COPY "!G!" "%SRC1%ARCHIVE\!FOLDER!\corrupted\!SPECIALPATH!" "1"
				IF !ORIG_SHA1! == !COR_OLD_SHA1! (
					BREAK
				) ELSE (
					IF !ORIG_FILESIZE! GTR !COR_OLD_FILESIZE! (
						ECHO F|XCOPY "!G!" "!FINAL_TARGET_FILE!" /Y >NUL
						ECHO COPIED !F!/corrupted/!SPECIALPATH! - CORRUPT WITH NEW FILE SIZE ^( BAD SDAT ^)
					)
				)
			) ELSE (
				ECHO F|XCOPY "!G!" "%SRC1%ARCHIVE\!FOLDER!\corrupted\!SPECIALPATH!" /Y >NUL
				ECHO COPIED !F!/corrupted/!SPECIALPATH! - CORRUPT ^( BAD SDAT ^)
			)
			
		) ELSE IF !ORIG_SDATVER! EQU 3.3 (
		
			IF EXIST "%SRC1%ARCHIVE\!FOLDER!\modified\!SPECIALPATH!" (
				CALL :INCREMENTAL_COPY "!G!" "%SRC1%ARCHIVE\!FOLDER!\modified\!SPECIALPATH!"
				IF !ORIG_SHA1! == !COR_OLD_SHA1! (
					BREAK
				) ELSE (
					ECHO F|XCOPY "!G!" "!FINAL_TARGET_FILE!" /Y >NUL
					ECHO COPIED !F!/corrupted/!SPECIALPATH! - MODIFIED DUPE ^( SDAT ^)
				)
			) ELSE (
				ECHO F|XCOPY "!G!" "%SRC1%ARCHIVE\!FOLDER!\modified\!SPECIALPATH!" /Y >NUL
				ECHO COPIED !F!/corrupted/!SPECIALPATH! - MODIFIED ^( SDAT ^)
			)
		
		) ELSE (
		
			SET "MEDIAQUERY=FALSE"
			IF /I "!FOLDER!"=="MP4" SET MEDIAQUERY=TRUE
			IF /I "!FOLDER!"=="MP3" SET MEDIAQUERY=TRUE
			IF /I "!FOLDER!"=="M4V" SET MEDIAQUERY=TRUE
			IF /I "!FOLDER!"=="DDS" SET MEDIAQUERY=TRUE
			IF /I "!FOLDER!"=="PNG" SET MEDIAQUERY=TRUE
			IF /I "!FOLDER!"=="JPG" SET MEDIAQUERY=TRUE
			IF /I "!FOLDER!"=="JPEG" SET MEDIAQUERY=TRUE
			IF /I "!FOLDER!"=="MEDIA" SET MEDIAQUERY=TRUE

			SET "AVATARPFP=FALSE"
			IF /I "!FOLDER!"=="AVATAR PFP" SET AVATARPFP=TRUE
			
			SET "FOLDERDATES=FALSE"
			IF /I "!FOLDER!"=="RSS FEEDS" SET FOLDERDATES=TRUE

			SET "IMPORTANTFILES=FALSE"
			IF /I "!FOLDER!"=="SCENELISTS" SET IMPORTANTFILES=TRUE
			IF /I "!FOLDER!"=="OBJECTCATALOGUES" SET IMPORTANTFILES=TRUE

			SET "OTHXMLFILES=FALSE"
			IF /I "!FOLDER!"=="COMMERCE POINTS" SET OTHXMLFILES=TRUE
			IF /I "!FOLDER!"=="NAVIGATORS" SET OTHXMLFILES=TRUE
			IF /I "!FOLDER!"=="SCENE VERSION XMLS" SET OTHXMLFILES=TRUE
			IF /I "!FOLDER!"=="XML" SET OTHXMLFILES=TRUE
			IF /I "!FOLDER!"=="NEWSVIEWER-EB6" SET OTHXMLFILES=TRUE
			IF /I "!FOLDER!"=="MOTD AND NEWSVIEWER" SET OTHXMLFILES=TRUE
			IF /I "!FOLDER!"=="MOTD-90B" SET OTHXMLFILES=TRUE
			IF /I "!FOLDER!"=="MOTD-F14" SET OTHXMLFILES=TRUE
			IF /I "!FOLDER!"=="SCREENS" SET OTHXMLFILES=TRUE
			IF /I "!FOLDER!"=="HELPTEXT" SET OTHXMLFILES=TRUE
			IF /I "!FOLDER!"=="CONFIG XML" SET OTHXMLFILES=TRUE
			IF /I "!FOLDER!"=="CLUBHOUSE XML" SET OTHXMLFILES=TRUE
			IF /I "!FOLDER!"=="INVENTORY AND PROFILE SETTING XML" SET OTHXMLFILES=TRUE
			IF /I "!FOLDER!"=="PACONTROLLERS" SET OTHXMLFILES=TRUE
			IF /I "!FOLDER!"=="HSTML" SET OTHXMLFILES=TRUE

			SET "SDATFILES=FALSE"
			IF /I "!FOLDER!"=="OBJECT_SDATS" SET SDATFILES=TRUE
			IF /I "!FOLDER!"=="SCENE_SDATS" SET SDATFILES=TRUE
			IF /I "!SPECIALPATH_EXT!"==".sdat" SET SDATFILES=TRUE

			IF "!MEDIAQUERY!"=="TRUE" (
			
				IF EXIST "%SRC1%ARCHIVE\!FOLDER!\!SPECIALPATH!" (
					CALL :INCREMENTAL_COPY "!G!" "%SRC1%ARCHIVE\!FOLDER!\!SPECIALPATH!" "1"
					IF !ORIG_SHA1! == !COR_OLD_SHA1! (
						(ECHO !F!	!J!	!SPECIALPATH!)>>"%SRC1%ARCHIVE\!FOLDER!\%DUPES%"
					) ELSE (
						IF !ORIG_FILESIZE! GTR !COR_OLD_FILESIZE! (
							ECHO F|XCOPY "!G!" "!FINAL_TARGET_FILE!" /Y >NUL
							ECHO COPIED !F!/!SPECIALPATH! - FILE SIZE ^> PREVIOUS
						) ELSE (
							IF EXIST "%SRC1%ARCHIVE\!FOLDER!\!SPECIALPATH_PARTDIR!!SPECIALPATH_NAME!-1!SPECIALPATH_EXT!" (
								CALL :INCREMENTAL_COPY "!G!" "%SRC1%ARCHIVE\!FOLDER!\!SPECIALPATH!"
								
								FOR /F "TOKENS=*" %%T IN ('DIR /B /S "%SRC1%ARCHIVE\!FOLDER!\!SPECIALPATH_PARTDIR!*!SPECIALPATH_NAME!*!SPECIALPATH_EXT!" 2^>NUL') DO (
									SET "T=%%T"
									CALL :GET_FILE_INFO "!T!" "%FFPROBE%"
									SET "ARRAY_ARCHIVE_SHA1=!SHA1HASH!"
									IF !ORIG_SHA1! == !ARRAY_ARCHIVE_SHA1! (
										SET NOCOPYING=!ARRAY_ARCHIVE_SHA1!
									)
								)
								IF NOT !NOCOPYING! == !ORIG_SHA1! (
									ECHO F|XCOPY "!G!" "!FINAL_TARGET_FILE!" /Y >NUL
									ECHO COPIED !F!/!SPECIALPATH! - UNIQUE DUPE
								)
							) ELSE (
								ECHO F|XCOPY "!G!" "%SRC1%ARCHIVE\!FOLDER!\!SPECIALPATH_PARTDIR!!SPECIALPATH_NAME!-1!SPECIALPATH_EXT!" /Y >NUL
								ECHO COPIED !F!/!SPECIALPATH! - UNIQUE DUPE
							)
						)
					)
				) ELSE (
					ECHO F|XCOPY "!G!" "%SRC1%ARCHIVE\!FOLDER!\!SPECIALPATH!" /Y >NUL
					ECHO COPIED !F!/!SPECIALPATH!
				)
				
			) ELSE IF "!AVATARPFP!"=="TRUE" (
			
				SET "INFURLFILEBASEALT=!INFURLFILEBASE:Avatar-=!"
				(ECHO !INFURLFILEBASEALT!)>>"%SRC1%ARCHIVE\!FOLDER!\%PSN_ID%"
				
				IF EXIST "%SRC1%ARCHIVE\!FOLDER!\!SPECIALPATH_FULLNAME!" (
					CALL :INCREMENTAL_COPY "!G!" "%SRC1%ARCHIVE\!FOLDER!\!SPECIALPATH_FULLNAME!" "1"
					IF !ORIG_SHA1! == !COR_OLD_SHA1! (
						(ECHO !F!	!J!	!SPECIALPATH!)>>"%SRC1%ARCHIVE\!FOLDER!\%DUPES%"
					) ELSE (
					
						IF EXIST "%SRC1%ARCHIVE\!FOLDER!\!SPECIALPATH_NAME!-1!SPECIALPATH_EXT!" (
							CALL :INCREMENTAL_COPY "!G!" "%SRC1%ARCHIVE\!FOLDER!\!SPECIALPATH_FULLNAME!"
							
							FOR /F "TOKENS=*" %%U IN ('DIR /B /S "%SRC1%ARCHIVE\!FOLDER!\*!SPECIALPATH_NAME!*!SPECIALPATH_EXT!" 2^>NUL') DO (
								SET "U=%%U"
								CALL :GET_FILE_INFO "!U!" "%FFPROBE%"
								SET "ARCHIVE2_SHA1=!SHA1HASH!"
								IF !ORIG_SHA1! == !ARCHIVE2_SHA1! (
									SET NOCOPY1=!ARCHIVE2_SHA1!
								)
							)
							IF NOT !NOCOPY1! == !ORIG_SHA1! (
								ECHO F|XCOPY "!G!" "!FINAL_TARGET_FILE!" /Y >NUL
								ECHO COPIED !F!/!SPECIALPATH! - UNIQUE DUPE
							)
						) ELSE (
							ECHO F|XCOPY "!G!" "%SRC1%ARCHIVE\!FOLDER!\!SPECIALPATH_NAME!-1!SPECIALPATH_EXT!" /Y >NUL
							ECHO COPIED !F!/!SPECIALPATH! - UNIQUE DUPE
						)
					)
				) ELSE (
					ECHO F|XCOPY "!G!" "%SRC1%ARCHIVE\!FOLDER!\!SPECIALPATH_FULLNAME!" /Y >NUL
					ECHO COPIED !F!/!SPECIALPATH!
				)
				
			) ELSE IF "!IMPORTANTFILES!"=="TRUE" (

				IF EXIST "%SRC1%ARCHIVE\!FOLDER!\!SPECIALPATH_NAME!_!DATE!!SPECIALPATH_EXT!" (
					CALL :INCREMENTAL_COPY "!G!" "%SRC1%ARCHIVE\!FOLDER!\!SPECIALPATH_NAME!_!DATE!!SPECIALPATH_EXT!" "1"
					IF !ORIG_SHA1! == !COR_OLD_SHA1! (
						(ECHO !F!	!J!	!SPECIALPATH!)>>"%SRC1%ARCHIVE\!FOLDER!\%DUPES%"
					) ELSE (
						IF EXIST "%SRC1%ARCHIVE\!FOLDER!\!SPECIALPATH_NAME!_!DATE!-1!SPECIALPATH_EXT!" (
							CALL :INCREMENTAL_COPY "!G!" "%SRC1%ARCHIVE\!FOLDER!\!SPECIALPATH_NAME!_!DATE!!SPECIALPATH_EXT!"
							
							FOR /F "TOKENS=*" %%U IN ('DIR /B /S "%SRC1%ARCHIVE\!FOLDER!\*!SPECIALPATH_NAME!_!DATE!*!SPECIALPATH_EXT!" 2^>NUL') DO (
								SET "U=%%U"
								CALL :GET_FILE_INFO "!U!" "%FFPROBE%"
								SET "ARCHIVE_SHA1=!SHA1HASH!"
								IF !ORIG_SHA1! == !ARCHIVE_SHA1! (
									SET NOCOPY=!ARCHIVE_SHA1!
								)
							)
							IF NOT !NOCOPY! == !ORIG_SHA1! (
								ECHO F|XCOPY "!G!" "!FINAL_TARGET_FILE!" /Y >NUL
								ECHO COPIED !F!/!SPECIALPATH! - UNIQUE DUPE
							)
						) ELSE (
							ECHO F|XCOPY "!G!" "%SRC1%ARCHIVE\!FOLDER!\!SPECIALPATH_NAME!_!DATE!-1!SPECIALPATH_EXT!" /Y >NUL
							ECHO COPIED !F!/!SPECIALPATH! - UNIQUE DUPE
						)
					)
				) ELSE (
					ECHO F|XCOPY "!G!" "%SRC1%ARCHIVE\!FOLDER!\!SPECIALPATH_NAME!_!DATE!!SPECIALPATH_EXT!" /Y >NUL
					ECHO COPIED !F!/!SPECIALPATH!
				)
				
			) ELSE IF "!OTHXMLFILES!"=="TRUE" (
			
				IF /I "!FOLDER!"=="COMMERCE POINTS" (

				CALL "%JREPLBAT%" "^(.*</commerce_point>)(.|\n)*$" "$txt=$1.replace(/\s+/g,'')" /JMATCH /F "!G!" /RTN LASTLINE

					IF NOT "!LASTLINE!" == "</commerce_point>" (
					
						IF EXIST "%SRC1%ARCHIVE\!FOLDER!\corrupted\!SPECIALPATH!" (
							CALL :INCREMENTAL_COPY "!G!" "%SRC1%ARCHIVE\!FOLDER!\corrupted\!SPECIALPATH!" "1"
							IF !ORIG_SHA1! == !COR_OLD_SHA1! (
								BREAK
							) ELSE (
								IF !ORIG_FILESIZE! GTR !COR_OLD_FILESIZE! (
									ECHO F|XCOPY "!G!" "!FINAL_TARGET_FILE!" /Y >NUL
									ECHO COPIED !F!/corrupted/!SPECIALPATH! - CORRUPT WITH NEW FILE SIZE ^( BAD XML ^)
								)
							)
						) ELSE (
							ECHO F|XCOPY "!G!" "%SRC1%ARCHIVE\!FOLDER!\corrupted\!SPECIALPATH!" /Y >NUL
							ECHO COPIED !F!/corrupted/!SPECIALPATH! - CORRUPT ^( BAD XML ^)
						)
					
					) ELSE (
						IF EXIST "!FINALPATH!" (
							CALL :INCREMENTAL_COPY "!G!" "!FINALPATH!" "1"
							IF !ORIG_SHA1! == !COR_OLD_SHA1! (
								(ECHO !F!	!J!	!SPECIALPATH!)>>"%SRC1%ARCHIVE\!FOLDER!\%DUPES%"
							) ELSE (
								IF EXIST "!FINALPATH_UNIQUE!" (
									CALL :INCREMENTAL_COPY "!G!" "!FINALPATH!"
									
									FOR /F "TOKENS=*" %%V IN ('DIR /B /S "!FINALPATH_PTHDIR!*!FINALPATH_FILENAME!*!SPECIALPATH_EXT!" 2^>NUL') DO (
										SET "V=%%V"
										CALL :GET_FILE_INFO "!V!" "%FFPROBE%"
										SET "OG_ARCHIVE_SHA1=!SHA1HASH!"
										IF !ORIG_SHA1! == !OG_ARCHIVE_SHA1! (
											SET NOCOPIES=!OG_ARCHIVE_SHA1!
										)
									)
									IF NOT !NOCOPIES! == !ORIG_SHA1! (
										ECHO F|XCOPY "!G!" "!FINAL_TARGET_FILE!" /Y >NUL
										ECHO COPIED !F!/!SPECIALPATH! - UNIQUE DUPE
									)
								) ELSE (
									ECHO F|XCOPY "!G!" "!FINALPATH_UNIQUE!" /Y >NUL
									ECHO COPIED !F!/!SPECIALPATH! - UNIQUE DUPE
								)
							)
						) ELSE (
							ECHO F|XCOPY "!G!" "!FINALPATH!" /Y >NUL
							ECHO COPIED !F!/!SPECIALPATH!
						)	
					
					)
				
				) ELSE (
					IF EXIST "!FINALPATH!" (
						CALL :INCREMENTAL_COPY "!G!" "!FINALPATH!" "1"
						IF !ORIG_SHA1! == !COR_OLD_SHA1! (
							(ECHO !F!	!J!	!SPECIALPATH!)>>"%SRC1%ARCHIVE\!FOLDER!\%DUPES%"
						) ELSE (
							IF EXIST "!FINALPATH_UNIQUE!" (
								CALL :INCREMENTAL_COPY "!G!" "!FINALPATH!"
								
								FOR /F "TOKENS=*" %%V IN ('DIR /B /S "!FINALPATH_PTHDIR!*!FINALPATH_FILENAME!*!SPECIALPATH_EXT!" 2^>NUL') DO (
									SET "V=%%V"
									CALL :GET_FILE_INFO "!V!" "%FFPROBE%"
									SET "OG_ARCHIVE_SHA1=!SHA1HASH!"
									IF !ORIG_SHA1! == !OG_ARCHIVE_SHA1! (
										SET NOCOPIES=!OG_ARCHIVE_SHA1!
									)
								)
								IF NOT !NOCOPIES! == !ORIG_SHA1! (
									ECHO F|XCOPY "!G!" "!FINAL_TARGET_FILE!" /Y >NUL
									ECHO COPIED !F!/!SPECIALPATH! - UNIQUE DUPE
								)
							) ELSE (
								ECHO F|XCOPY "!G!" "!FINALPATH_UNIQUE!" /Y >NUL
								ECHO COPIED !F!/!SPECIALPATH! - UNIQUE DUPE
							)
						)
					) ELSE (
						ECHO F|XCOPY "!G!" "!FINALPATH!" /Y >NUL
						ECHO COPIED !F!/!SPECIALPATH!
					)	
				)
				
			) ELSE IF "!SDATFILES!"=="TRUE" (

				IF EXIST "%SRC1%ARCHIVE\!FOLDER!\!SPECIALPATH!" (
					CALL :INCREMENTAL_COPY "!G!" "!FINALPATH!" "1"
					IF !ORIG_SHA1! == !COR_OLD_SHA1! (
						(ECHO !F!	!J!	!SPECIALPATH!)>>"%SRC1%ARCHIVE\!FOLDER!\%DUPES%"
					) ELSE (
						CALL :INCREMENTAL_COPY "!G!" "%SRC1%ARCHIVE\!FOLDER!\!SPECIALPATH!"
						IF !ORIG_SHA1! == !COR_OLD_SHA1! (
							(ECHO !F!	!J!	!SPECIALPATH!)>>"%SRC1%ARCHIVE\!FOLDER!\%DUPES%"
						) ELSE (
							ECHO F|XCOPY "!G!" "!FINAL_TARGET_FILE!" /Y >NUL
							ECHO !F!/!SPECIALPATH! - UNIQUE DUPE
						)
					)
				) ELSE (
					ECHO F|XCOPY "!G!" "%SRC1%ARCHIVE\!FOLDER!\!SPECIALPATH!" /Y >NUL
					ECHO COPIED !F!/!SPECIALPATH!
				)
				
			) ELSE IF "!FOLDERDATES!"=="TRUE" (
			
					IF EXIST "%SRC1%ARCHIVE\!FOLDER!\!INFURLLASTFOLDER!\!DATE!\!INFURLFILE!" (
						CALL :INCREMENTAL_COPY "!G!" "%SRC1%ARCHIVE\!FOLDER!\!INFURLLASTFOLDER!\!DATE!\!INFURLFILE!" "1"
						IF !ORIG_SHA1! == !COR_OLD_SHA1! (
							(ECHO !F!	!J!	!INFURLLASTFOLDER!/!DATE!/!INFURLFILE!)>>"%SRC1%ARCHIVE\!FOLDER!\%DUPES%"
						) ELSE (
						
							FOR %%O IN ("%SRC1%ARCHIVE\!FOLDER!\!INFURLLASTFOLDER!\!DATE!\!INFURLFILE!") DO (
								SET "DPPTH=%%~DPO"
								SET "NAMEPTH=%%~NO"
								SET "EXTPTH=%%~XO"
							)
							IF EXIST "!DPPTH!!NAMEPTH!-1!EXTPTH!" (
								CALL :INCREMENTAL_COPY "!G!" "%SRC1%ARCHIVE\!FOLDER!\!INFURLLASTFOLDER!\!DATE!\!INFURLFILE!"
								FOR /F "TOKENS=*" %%V IN ('DIR /B /S "!DPPTH!*!NAMEPTH!*!EXTPTH!" 2^>NUL') DO (
									SET "V=%%V"
									CALL :GET_FILE_INFO "!V!" "%FFPROBE%"
									SET "OG1_ARCHIVE_SHA1=!SHA1HASH!"
									IF !ORIG_SHA1! == !OG1_ARCHIVE_SHA1! (
										SET NOCOPIES1=!OG1_ARCHIVE_SHA1!
									)
								)
								IF NOT !NOCOPIES1! == !ORIG_SHA1! (
									ECHO F|XCOPY "!G!" "!FINAL_TARGET_FILE!" /Y >NUL
									ECHO COPIED !F!/!INFURLLASTFOLDER!/!DATE!/!INFURLFILE! - UNIQUE DUPE
								)
							) ELSE (
								ECHO F|XCOPY "!G!" "!DPPTH!!NAMEPTH!-1!EXTPTH!" /Y >NUL
								ECHO COPIED !F!/!INFURLLASTFOLDER!/!DATE!/!INFURLFILE! - UNIQUE DUPE
							)
						)
					) ELSE (
						ECHO F|XCOPY "!G!" "%SRC1%ARCHIVE\!FOLDER!\!INFURLLASTFOLDER!\!DATE!\!INFURLFILE!" /Y >NUL
						ECHO COPIED !F!/!INFURLLASTFOLDER!/!DATE!/!INFURLFILE!
					)	
					
			) ELSE (
				IF EXIST "%SRC1%ARCHIVE\!FOLDER!\!SPECIALPATH!" (
					(ECHO !F!	!J!	!SPECIALPATH!)>>"%SRC1%ARCHIVE\!FOLDER!\%DUPES%"
				) ELSE (
					ECHO F|XCOPY "!G!" "%SRC1%ARCHIVE\!FOLDER!\!SPECIALPATH!" /Y >NUL
					ECHO COPIED !F!/!SPECIALPATH!
				)
			)
		)
	)
)

EXIT /B

:DELETE_FINAL_INF_LOG_UNLIMITED_ALL
FOR /F "TOKENS=*" %%A IN ('DIR /B /A:-D "%SRC1%%LOGTXT%" 2^>NUL') DO (
		@ECHO OFF
		SET "A=%%A"
		SETLOCAL ENABLEDELAYEDEXPANSION
		IF EXIST !A! DEL "%SRC1%!A!
		ENDLOCAL
)
ECHO FINAL INF LOG DELETED.
ECHO.
CALL :START_ONE
CMD /K


:GET_CACHE_VERSIONS_UNLIMITED_ALL

IF EXIST "%SRC1%%CACHEVERSLOG%" BREAK > "%SRC1%%CACHEVERSLOG%"

(ECHO CACHE	LASTRUN	PARAM	IDs	FOLDER	COREDATA.SHARC SHA1	COREDATA.BAR SHA1)>>"%SRC1%%CACHEVERSLOG%

FOR /F "TOKENS=*" %%A IN ('DIR /B /A:D "%SRC1%*" ^| FINDSTR /V ARCHIVE ^| FINDSTR /V INFLOGS ^| FINDSTR /V ANALYSISLOGS ^| FINDSTR /V /RC:"\<BIN\>" ^| FINDSTR /V /RC:"\<__MACOSX\>"') DO FOR /F "TOKENS=*" %%B IN ('DIR /B /A:D /S "%SRC1%%%A\*USRDIR*" ^| FINDSTR /V DATA ^| FINDSTR /V __MACOSX') DO (
		@ECHO OFF
		SET "A=%%A"
		SET "B=%%B"
		CALL :CONT_GET_CACHE_VER_UNLIMITED_ALL
)

ECHO ALL CACHE VERSIONS HAVE BEEN LOGGED.
GOTO START_THREE
CMD /K

:CONT_GET_CACHE_VER_UNLIMITED_ALL

CALL SET "A=%%A%%"
CALL SET "B=%%B%%"

CALL SET "REMLOCALDIR1=%%B:%SRC1%%A%\=%%"
CALL SET "REMUSRDIR1=%%REMLOCALDIR1:\USRDIR=%%"

SETLOCAL ENABLEDELAYEDEXPANSION

SET "REMSPACE=!A: =!"
SET "REMLOCALDIR=!B:%SRC1%=!"
SET "REMUSRDIR=!B:\USRDIR=!"

SET I=1
SET "PTH=!REMLOCALDIR!"
SET "PTH!I!=%PTH:\=" & SET /A I+=1 & SET "PTH!I!=%"

SET TRIG1=FALSE
IF /I !PTH2! == NPIA00005 SET TRIG1=TRUE
IF /I !PTH2! == NPIA00010 SET TRIG1=TRUE
IF /I !PTH2! == NPEA00013 SET TRIG1=TRUE
IF /I !PTH3! == NPIA00005 SET TRIG1=TRUE
IF /I !PTH3! == NPIA00010 SET TRIG1=TRUE
IF /I !PTH3! == NPEA00013 SET TRIG1=TRUE
IF !TRIG1! == TRUE (
	IF EXIST "!REMUSRDIR!\PARAM.SFO" (
		SET TRIG2=FALSE
		IF /I !PTH3! == USRDIR SET TRIG2=TRUE
		IF /I !PTH4! == USRDIR SET TRIG2=TRUE
		IF !TRIG2! == TRUE (
			ECHO !A! : PASRSING PARAM.SFO ...
			CALL "%JREPLBAT%" "VERSION(.*?)HM" "$txt=$1" /I /XSEQ /JMATCHQ /F "!REMUSRDIR!\PARAM.SFO" /M /O "!REMUSRDIR!\VER.SFO"
			CALL "%JREPLBAT%" "\x00" "" /M /F "!REMUSRDIR!\VER.SFO" /O -
			CALL "%JREPLBAT%" "\x01" "" /M /F "!REMUSRDIR!\VER.SFO" /O -
			CALL "%JREPLBAT%" "\x08" "" /M /F "!REMUSRDIR!\VER.SFO" /O -
			CALL "%JREPLBAT%" "\x0A" "" /M /F "!REMUSRDIR!\VER.SFO" /O -
			CALL "%JREPLBAT%" "\x0D" "" /M /F "!REMUSRDIR!\VER.SFO" /RTN PARAMVER
			CALL "%JREPLBAT%" "\x00\x00NP(.*?)\x00\x00" "$txt='NP'+$1" /I /XSEQ /JMATCHQ /F "!REMUSRDIR!\PARAM.SFO" /M /O "!REMUSRDIR!\IDS.SFO"
			CALL "%JREPLBAT%" "\x00" "" /M /F "!REMUSRDIR!\IDS.SFO" /O -
			CALL "%JREPLBAT%" "\x0A" "" /M /F "!REMUSRDIR!\IDS.SFO" /O -
			CALL "%JREPLBAT%" "\x0D" "" /M /F "!REMUSRDIR!\IDS.SFO" /RTN ID
		)
	)
	IF EXIST "!REMUSRDIR!\VER.SFO" DEL "!REMUSRDIR!\VER.SFO"
	IF EXIST "!REMUSRDIR!\IDS.SFO" DEL "!REMUSRDIR!\IDS.SFO"
	DIR /B /A:-D "!B!\LASTRUN.TXT" 2>NUL >NUL
	IF !ERRORLEVEL! EQU 0 (
		ECHO !A! : PASRSING LASTRUN.TXT ...
 		FOR /F "TOKENS=* USEBACKQ DELIMS=" %%C IN ("!B!\LASTRUN.TXT") DO (
			SET "LASTRUNVER=%%C"
 		)
	)
  IF EXIST "!B!\COREDATA.SHARC" (
  	CALL :GET_FILE_INFO "!B!\COREDATA.SHARC"
		SET "SHARC_SHA1=!SHA1HASH!"
  )
  IF EXIST "!B!\COREDATA.BAR" (
  	CALL :GET_FILE_INFO "!B!\COREDATA.BAR"
		SET "BAR_SHA1=!SHA1HASH!"
  )
	SET TRIG3=FALSE
	IF /I !PTH3! == USRDIR SET TRIG3=TRUE
	IF /I !PTH4! == USRDIR SET TRIG3=TRUE
	IF !TRIG3! == TRUE (
		(ECHO !A!	!LASTRUNVER!	!PARAMVER!	!ID!	!REMUSRDIR1!	!SHARC_SHA1!	!BAR_SHA1!)>>"%SRC1%%CACHEVERSLOG%"
	)
) ELSE (
	BREAK
)

ENDLOCAL
EXIT /B


:REMOVE_RESERVED_UNLIMITED_ALL
FOR /F "TOKENS=*" %%A IN ('DIR /B /A:D "%SRC1%*" ^| FINDSTR /V ARCHIVE ^| FINDSTR /V INFLOGS ^| FINDSTR /V ANALYSISLOGS ^| FINDSTR /V /RC:"\<BIN\>" ^| FINDSTR /V /RC:"\<__MACOSX\>"') DO FOR /F "TOKENS=*" %%B IN ('DIR /B /S  "%SRC1%%%A\*RESERVED*" 2^>NUL ^| FINDSTR /I /V /RC:"\<RESERVED.cyberducksegment\>"') DO (
		@ECHO OFF
		SET "A=%%A"
		SET "B=%%B"
		SETLOCAL ENABLEDELAYEDEXPANSION
		SET "C=!B:%SRC1%=!"
		IF EXIST "!B!" (
			ECHO DELETING !C! ...
 			DEL "!B!"
		) ELSE (
			BREAK
		)
ENDLOCAL
)
ECHO ALL RESERVED FILES HAVE BEEN DELETED.
GOTO START_THREE
CMD /K

:END
CMD /K

:STARTTIMER
:: STORE START TIME
SET STARTTIME=%TIME%
FOR /F "USEBACKQ TOKENS=1-4 DELIMS=:., " %%F IN (`ECHO %STARTTIME: =0%`) DO SET /A START100S=1%%F*360000+1%%G*6000+1%%H*100+1%%I-36610100
GOTO :EOF


:STOPTIMER
:: GET THE END TIME
SET STOPTIME=%TIME%
FOR /F "USEBACKQ TOKENS=1-4 DELIMS=:., " %%F IN (`ECHO %STOPTIME: =0%`) DO SET /A STOP100S=1%%F*360000+1%%G*6000+1%%H*100+1%%I-36610100
IF %STOP100S% LSS %START100S% SET /A STOP100S+=8640000
SET /A TOOKTIME=%STOP100S% - %START100S%
SET TOOKTIMEPADDED=0%TOOKTIME%
SET /A TOOKSECS=%TOOKTIME% / 100
SET /A SECS=%TOOKSECS% %% 60
SET /A MINS=(%TOOKSECS% / 60) %% 60
SET /A HOURS=%TOOKSECS% / 3600
IF %SECS% LSS 10 SET SECS=0%SECS%
IF %MINS% LSS 10 SET MINS=0%MINS%
IF %HOURS% LSS 10 SET HOURS=0%HOURS%
GOTO :EOF

:DISPLAYTIMERRESULT
:: SHOW TIMER START/STOP/DELTA
ECHO STARTED: %STARTTIME%
ECHO STOPPED: %STOPTIME%
ECHO ELAPSED : %HOURS%h:%MINS%m:%SECS%s
GOTO :EOF

:SETSIZE
SET SIZE=%~z1
GOTO :EOF

:SET_OLD_SIZE
SET OLD_SIZE=%~z1
GOTO :EOF

:SET_NEW_SIZE
SET NEW_SIZE=%~z1
GOTO :EOF

:GET_FILE_INFO
FOR /F "TOKENS=1,2,3,4,5,6,7 DELIMS=	" %%K IN ('CALL "%FILE_ANALYSIS%" "%~1" "%~2"') DO (
    SET "FILEEXT=%%K"
    SET "FILESIZE=%%L"
    SET "SDATVER=%%M"
    SET "SHA1HASH=%%N"
    SET "MISSINGBYTES=%%O"
    SET "IMGCOR=%%P"
    SET "VIDCOR=%%Q"
)
GOTO :EOF

:INCREMENTAL_COPY
SET "SOURCE_FILE=%~1"
SET "TARGET_FILE=%~2"
SET "OVERRIDE=%~3"
SET "BASE_NAME=%~n2"
SET "EXTENSION=%~x2"
SET "DIR_NAME=%~dp2"
SET "RELATIVE_DIR=!DIR_NAME:%SRC1%=!"
SET "RELATIVE_DIR=!RELATIVE_DIR:\=/!"
SET "COUNTER=-1"

IF "%OVERRIDE%"=="" SET "OVERRIDE=0"

IF "%OVERRIDE%"=="1" (
    GOTO :SKIP_INCREMENTAL_COPY
)

:COPY_FIND_START
IF EXIST "%DIR_NAME%%BASE_NAME%%COUNTER%%EXTENSION%" (
    CALL :GET_FILE_INFO "%DIR_NAME%%BASE_NAME%%COUNTER%%EXTENSION%" "%FFPROBE%"
    SET "COR_OLD_FILEEXT=!FILEEXT!"
    SET "COR_OLD_FILESIZE=!FILESIZE!"
    SET "COR_OLD_SHA1=!SHA1HASH!"
    SET /A COUNTER-=1
    GOTO COPY_FIND_START
)
SET "FINAL_TARGET_FILE=%DIR_NAME%%BASE_NAME%!COUNTER!%EXTENSION%"

GOTO SKIP_TO_END

:SKIP_INCREMENTAL_COPY
IF EXIST "%DIR_NAME%%BASE_NAME%%EXTENSION%" (
    CALL :GET_FILE_INFO "%DIR_NAME%%BASE_NAME%%EXTENSION%" "%FFPROBE%"
    SET "COR_OLD_FILEEXT=!FILEEXT!"
    SET "COR_OLD_FILESIZE=!FILESIZE!"
    SET "COR_OLD_SHA1=!SHA1HASH!"
)
SET "FINAL_TARGET_FILE=%DIR_NAME%%BASE_NAME%%EXTENSION%"

:SKIP_TO_END

GOTO :EOF



:CREATE_JREPL
@ECHO OFF
ECHO:@if (@X)^=^=(@Y) @end /* Harmless hybrid line that begins a JScript comment
ECHO:@goto ^:Batch
ECHO:^=^=^=^=^=^=^=^=^=^=^=^=^= ^:Batch portion ^=^=^=^=^=^=^=^=^=^=^=
ECHO:@echo off
ECHO:setlocal disableDelayedExpansion
ECHO:
ECHO:^:^: Process Help
ECHO:if .%%2 equ . call ^:help ^"%%~1^" ^&^& exit /b 0 ^|^| call ^:exitErr ^"Insufficient arguments^"
ECHO:
ECHO:^:^: Define options
ECHO:set ^^^"/options^= /A^: /APP^: /B^: /C^: /D^:^"^:^" /DBUG^: /E^: /EOL^:^"\r\n^" /EXC^:^"^" /F^:^"^" /H^: /HON^:^"\x1B[7m^" /HOFF^:^"\x1B[0m^"^^
ECHO:                /HU^: /I^: /INC^:^"^" /J^: /JBEG^:^"^" /JBEGLN^:^"^" /JEND^:^"^" /JENDLN^:^"^" /JLIB^:^"^" /JMATCH^: /JMATCHQ^: /JQ^:^^
ECHO:                /K^:^"^" /L^: /M^: /MATCH^: /N^:0 /O^:^"^" /OFF^:0 /P^:^"^" /PFLAG^:^"g^" /PREPL^:^"^" /R^:^"^" /RTN^:^"^" /S^:^"^"^^
ECHO:                /T^:^"none^" /TFLAG^:^"^" /U^: /UTF^: /V^: /VT^: /X^: /XBYTES^: /XBYTESOFF^: /XFILE^: /XSEQ^: /XREG^:^"^" ^^^"
ECHO:^:^: Set default option values
ECHO:for %%%%O in (%%/options%%) do for /f ^"tokens^=1^,* delims^=^:^" %%%%A in (^"%%%%O^") do set ^"%%%%A^=%%%%~B^"
ECHO:
ECHO:^:^: Get options
ECHO:^:loop
ECHO:if not ^"%%~3^"^=^=^"^" (
ECHO:  set ^"/test^=%%~3^"
ECHO:  setlocal enableDelayedExpansion
ECHO:  if ^"^!/test^:~0^,1^!^" neq ^"/^" call ^:exitErr ^"Too many arguments^"
ECHO:  set ^"/test^=^!/options^:*%%~3^:^=^! ^"
ECHO:  if ^"^!/test^!^"^=^=^"^!/options^! ^" (
ECHO:      endlocal
ECHO:      call ^:exitErr ^"Invalid option %%~3^"
ECHO:  ) else if ^"^!/test^:~0^,1^!^"^=^=^" ^" (
ECHO:      endlocal
ECHO:      set ^"%%~3^=1^"
ECHO:  ) else (
ECHO:      endlocal
ECHO:      set ^"%%~3^=%%~4^"
ECHO:      shift /3
ECHO:  )
ECHO:  shift /3
ECHO:  goto ^:loop
ECHO:)
ECHO:
ECHO:^:^: Validate options
ECHO:if defined /M if defined /A if not defined /S                                      call ^:exitErr ^"/M cannot be used with /A without /S^"
ECHO:if ^"%%/O%%^" equ ^"-^" if not defined /F                                                call ^:exitErr ^"Output ^= - but Input file not specified^"
ECHO:if defined /F if defined /S                                                        call ^:exiterr ^"/S cannot be used with /F^"
ECHO:if defined /F for %%%%A in (^"%%/F%%^") do for %%%%B in (^"%%/O%%^") do if ^"%%%%~fA^" equ ^"%%%%~fB^" call ^:exitErr ^"Output file cannot match Input file^"
ECHO:if defined /RTN if defined /O                                                      call ^:exitErr ^"/O and /RTN are mutually exclusive^"
ECHO:if defined /RTN if defined /UTF                                                    call ^:exitErr ^"/UTF and /RTN are mutually exclusive^"
ECHO:if ^"%%/EXC%%%%/INC%%%%/C%%%%/JBEGLN%%%%/JENDLN%%^" neq ^"^" if ^"%%/M%%%%/S%%^" neq ^"^"                call ^:exitErr ^"/C^, /INC^, /EXC^, /JBEGLN^, and /JENDLN cannot be used with /M or /S^"
ECHO:for /f ^"tokens^=2^" %%%%A in (^"%%/J%% %%/JQ%% %%/JMATCH%% %%/JMATCHQ%% %%/K%% %%/R%% %%/MATCH%%^") do call ^:exitErr ^"/J^, /JQ^, /JMATCH^, /JMATCHQ^, /MATCH^, /K and /R are all mutually exclusive^"
ECHO:if ^"%%/K%%%%/R%%^" neq ^"^" if ^"%%/A%%%%/M%%%%/S%%%%/T%%^" neq ^"none^"                              call ^:exitErr ^"/K^, /R cannot be used with /A^, /M^, /S or /T^"
ECHO:if defined /MATCH if ^"%%/A%%%%/T%%^" neq ^"none^"                                         call ^:exitErr ^"/MATCH cannot be used with /A or /T^"
ECHO:for /f delims^^^=giGI^^ eol^^^= %%%%A in (^"%%/PFLAG%%^") do                                  call ^:exitErr ^"Invalid /PFLAG value^"
ECHO:if ^"%%/OFF%%^" neq ^"0^" if defined /PREPL                                              call ^:exitErr ^"/PREPL cannot be used with /OFF^"
ECHO:for /f ^"delims^=^| eol^=^| tokens^=2*^" %%%%A in (^"%%/APP%%^|%%/O%%x^") do if %%%%A^=^=- if .%%%%B neq . call ^:exitErr ^"/APP cannot be combined with /O - with CharSet^"
ECHO:
ECHO:^:^: Transform options
ECHO:if ^"%%/XREG%%^"^=^=^".^" (set /XREG^=%%XREGEXP%%)
ECHO:if defined /X set ^"/XFILE^=1^" ^& set ^"/XSEQ^=1^"
ECHO:if defined /MATCH set ^"/JMATCHQ^=1^"
ECHO:if defined /JMATCHQ set ^"/JMATCH^=1^"
ECHO:if defined /JMATCH set ^"/J^=1^"
ECHO:if defined /JQ set ^"/J^=1^"
ECHO:if ^"%%/JMATCH%%%%/K%%^" equ ^"^" set ^"/OFF^=0^"
ECHO:if defined /UTF set ^"/UTF^=//u^" ^& set ^"/XFILE^=^"
ECHO:if not defined /T set ^"/L^=1^"
ECHO:if ^"%%/M%%%%/S%%^" neq ^"^" set ^"/N^=0^"
ECHO:if defined /U set ^"/EOL^=\n^"
ECHO:if defined /HU (
ECHO:  set ^"/H^=1^"
ECHO:  set ^"/HON^=\x1B[4m^"
ECHO:  set ^"/HOFF^=\x1B[24m^"
ECHO:)
ECHO:if defined /R set ^"/H^=^"
ECHO:if defined /RTN (
ECHO:  setlocal enableDelayedExpansion
ECHO:  for /f ^"eol^=^: delims^=^: tokens^=1^,2^" %%%%A in (^"^!/RTN^!^") do (
ECHO:    endlocal
ECHO:    set ^"/RTN^=%%%%A^"
ECHO:    set ^"/RTN_LINE^=%%%%B^"
ECHO:  )
ECHO:)
ECHO:
ECHO:if defined /XBYTESOFF set ^"/XBYTES^=^" ^& goto ^:endXBytes
ECHO:if defined /XBYTES set ^"/XBYTES^=^" ^& goto ^:createXBytes
ECHO:for %%%%F in (
ECHO:  ^"%%ALLUSERSPROFILE%%\JREPL\XBYTES.DAT^"
ECHO:  ^"%%TEMP%%\JREPL\XBYTES.DAT^"
ECHO:  ^"%%TMP%%\JREPL\XBYTES.DAT^"
ECHO:) do if ^"%%%%~zF^" equ ^"256^" set ^"/XBYTES^=%%%%~fF^" ^& goto ^:endXBytes
ECHO:
ECHO:^:createXBytes
ECHO:^:^: Attempt to create XBYTES.DAT via CERTUTIL. If able to write to the JREPL
ECHO:^:^: subdirectory^, but unable to create correct file^, then pass task to JScript.
ECHO:for %%%%F in (
ECHO:  ^"%%ALLUSERSPROFILE%%^"
ECHO:  ^"%%TEMP%%^"
ECHO:  ^"%%TMP%%^"
ECHO:) do if %%%%F neq ^"^" for %%%%F in (^"%%%%~F\JREPL\XBYTES.DAT^") do (
ECHO:  del %%%%F
ECHO:  md ^"%%%%~dpF^"
ECHO:  (  ^>^"%%%%~dpnF.HEX^" (
ECHO:    for %%%%A in (0 1 2 3 4 5 6 7 8 9 A B C D E F) do for %%%%B in (0 1 2 3 4 5 6 7 8 9 A B C D E F) do echo %%%%A%%%%B
ECHO:  )) ^&^& (
ECHO:    set ^"/XBYTES^=%%%%~fF^"
ECHO:    certutil.exe -f -decodehex ^"%%%%~dpnF.HEX^" ^"%%%%~fF^"
ECHO:    for %%%%G in (%%%%F) do if ^"%%%%~zG^" neq ^"256^" del %%%%F
ECHO:    del ^"%%%%~dpnF.HEX^"
ECHO:    goto ^:endXBytes
ECHO:  )
ECHO:) ^>nul 2^>nul
ECHO:^:endXBytes
ECHO:
ECHO:set ^^^"/FIND^=%%1^"
ECHO:set ^^^"/REPL^=%%2^"
ECHO:call ^:GetScript /SCRIPT
ECHO:set ^"/LOCK^=^"
ECHO:
ECHO:set ^"/FindReplVar^=^"
ECHO:if defined /UTF (
ECHO:  set ^"/FindReplVar^=1^"
ECHO:  set ^"/FIND2^=%%/FIND^:^"^=%%^"
ECHO:  set ^"/REPL2^=%%/REPL^:^"^=%%^"
ECHO:  set ^"/FIND^=/FIND2^"
ECHO:  set ^"/REPL^=/REPL2^"
ECHO:  goto ^:noLock
ECHO:)
ECHO:if defined /V if /i ^"%%/T%%^" neq ^"FILE^" set ^"/FindReplVar^=1^"
ECHO:if defined /XFILE if /i ^"%%/T%%^" neq ^"FILE^" set ^"/FindReplVar^=1^"
ECHO:if defined /RTN goto ^:lock
ECHO:if not defined /XFILE goto ^:noLock
ECHO:if defined /FindReplVar goto ^:lock
ECHO:if not defined /JBEG if not defined /JBEGLN if not defined /JEND if not defined /JENDLN if not defined /INC if not defined /EXC if not defined /P if not defined /S goto ^:noLock
ECHO:
ECHO:^:lock
ECHO:setlocal enableDelayedExpansion
ECHO:set ^"/LOCK^=jrepl.bat.^!date^:\^=-^!_^!time^:^:^=.^!_^!random^!.temp^"
ECHO:set ^"/LOCK^=^!/LOCK^:/^=-^!^"
ECHO:for /f ^"delims^=^" %%%%F in (^"^!temp^!\^!/LOCK^:^:^=-^!^") do (
ECHO:  endlocal
ECHO:  set ^"/LOCK^=%%%%~fF^"
ECHO:)
ECHO:if defined /RTN (
ECHO:  set ^"/CHCP^=^"
ECHO:  if not defined /XFILE for /f ^"tokens^=2 delims^=^:.^" %%%%P in (^'chcp^') do (
ECHO:    chcp 65001 ^>nul 2^>nul ^&^& (
ECHO:      set ^"/CHCP^=%%%%P^"
ECHO:      chcp %%%%P ^>nul 2^>nul
ECHO:    )
ECHO:  )
ECHO:  if defined /CHCP (set ^"/O^=%%/LOCK%%.RTN^|utf-8^|nb^") else set ^"/O^=%%/LOCK%%.RTN^"
ECHO:)
ECHO:9^>^&2 2^>nul (
ECHO:  8^>^"%%/LOCK%%^" (
ECHO:    2^>^&9 (
ECHO:      if defined /XFILE (
ECHO:        setlocal enableDelayedExpansion
ECHO:        if defined /S call ^:writeVar S
ECHO:        if defined /V (
ECHO:          if defined /FindReplVar (
ECHO:            call ^:writeVar FIND
ECHO:            call ^:writeVar REPL
ECHO:          )
ECHO:          if defined /JBEG   call ^:writeVar JBEG
ECHO:          if defined /JBEGLN call ^:writeVar JBEGLN
ECHO:          if defined /JEND   call ^:writeVar JEND
ECHO:          if defined /JENDLN call ^:writeVar JENDLN
ECHO:          if defined /INC    call ^:writeVar INC
ECHO:          if defined /EXC    call ^:writeVar EXC
ECHO:          if defined /P      call ^:writeVar P
ECHO:        ) else (
ECHO:          if defined /FindReplVar (
ECHO:            (echo(^!/FIND^:^^^"^=^!) ^>^"^!/LOCK^!.FIND^"
ECHO:            (echo(^!/REPL^:^^^"^=^!) ^>^"^!/LOCK^!.REPL^"
ECHO:          )
ECHO:          if defined /JBEG (echo(^!/JBEG^!) ^>^"^!/LOCK^!.JBEG^"
ECHO:          if defined /JBEGLN (echo(^!/JBEGLN^!) ^>^"^!/LOCK^!.JBEGLN^"
ECHO:          if defined /JEND (echo(^!/JEND^!) ^>^"^!/LOCK^!.JEND^"
ECHO:          if defined /JENDLN (echo(^!/JENDLN^!) ^>^"^!/LOCK^!.JENDLN^"
ECHO:          if defined /INC (echo(^!/INC^!) ^>^"^!/LOCK^!.INC^"
ECHO:          if defined /EXC (echo(^!/EXC^!) ^>^"^!/LOCK^!.EXC^"
ECHO:          if defined /P (echo(^!/P^!) ^>^"^!/LOCK^!.P^"
ECHO:        )
ECHO:        endlocal
ECHO:      )
ECHO:      call ^:execute
ECHO:    )
ECHO:  )
ECHO:  if errorlevel 3 (del ^"%%/LOCK%%*^"^&exit /b 3)
ECHO:  if errorlevel 1 (del ^"%%/LOCK%%*^"^&(call)) else del ^"%%/LOCK%%*^"
ECHO:  if ^"%%/RTN%%^" equ ^"^" exit /b
ECHO:) ^|^| goto ^:lock
ECHO:
ECHO:^:writeVar
ECHO:for /f delims^^^=^^ eol^^^= %%%%A in (^"^!/%%1^!^") do (echo(^!%%%%A^!) ^>^"^!/LOCK^!.%%1^"
ECHO:exit /b
ECHO:
ECHO:^:noLock
ECHO:call ^:execute
ECHO:exit /b %%errorlevel%%
ECHO:
ECHO:^:execute
ECHO:cscript.exe //E^:JScript //nologo %%/UTF%% ^"%%/SCRIPT%%^" %%/FIND%% %%/REPL%%
ECHO:if not defined /RTN exit /b %%errorlevel%%
ECHO:
ECHO:^:^:returnVar
ECHO:if errorlevel 3 exit /b %%errorlevel%%
ECHO:if defined /CHCP chcp 65001 ^>nul 2^>nul
ECHO:set ^"/ERR^=%%errorlevel%%^"
ECHO:set ^"/NORMAL^=^"
ECHO:for /f ^"usebackq delims^=^" %%%%A in (^"%%/LOCK%%.RTN^") do (
ECHO:  if not defined /NORMAL (
ECHO:    set ^"/NORMAL^=%%%%A^"
ECHO:  ) else set ^"/DELAYED^=%%%%A^"
ECHO:)
ECHO:chcp %%/CHCP%% ^>nul 2^>nul
ECHO:for /f %%%%2 in (
ECHO:  ^'copy /z ^"%%/SCRIPT%%^" nul^' %%^= This generates CR ^=%%
ECHO:) do for %%%%1 in (^^"^
ECHO:%%^= This generates quoted LF ^=%%
ECHO:^^^") do for /f ^"tokens^=1^,2^" %%%%3 in (^^^"%%%% ^"^") do (
ECHO:  (goto) 2^>nul
ECHO:  (goto) 2^>nul
ECHO:  if ^"^^^!^^^" equ ^"^^^!^" (
ECHO:    set ^"%%/RTN%%^=%%/DELAYED^:~1%%^"^!
ECHO:  ) else (
ECHO:    set ^"%%/RTN%%^=%%/NORMAL^:~1%%^"
ECHO:  )
ECHO:  if %%/ERR%% equ 0 (call ) else (call)
ECHO:)
ECHO:
ECHO:^:GetScript
ECHO:set ^"%%1^=%%~f0^"
ECHO:exit /b
ECHO:
ECHO:^:help
ECHO:setlocal
ECHO:set ^"help^=%%~1^"
ECHO:setlocal enableDelayedExpansion
ECHO:if ^"^!help^:~0^,2^!^" neq ^"/?^" exit /b 1
ECHO:set ^"noMore^=1^"
ECHO:set ^"help^=^!help^:~2^!^"
ECHO:if defined help if ^"^!help^:~0^,1^!^" equ ^"?^" (
ECHO:  set ^"noMore^=^"
ECHO:  set ^"help^=^!help^:~1^!^"
ECHO:)
ECHO:for /f ^"delims^=^" %%%%A in (^"/^!help^!^") do if /i ^"%%%%~pA^" equ ^"\CharSet\^" ( %%^= /?CHARSET/ ^=%%
ECHO:  echo(
ECHO:  if defined noMore (
ECHO:    for /f ^"delims^=^" %%%%F in (^'reg query HKCR\MIME\Database\Charset /k /f ^"%%%%~nxA^"^') do echo %%%%~nF
ECHO:  ) else (
ECHO:    (cmd /c ^"for /f ^"delims^=^" %%%%F in (^'reg query HKCR\MIME\Database\Charset /k /f ^"%%%%~nxA^"^') do @echo %%%%~nF^") ^| more /e
ECHO:  )
ECHO:  exit /b 0
ECHO:)
ECHO:if defined help if ^"^!help^:~0^,2^!^" equ ^"/?^" set ^"help^=help^"
ECHO:for /f ^"delims^=abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ/ eol^=a^" %%%%A in (^"^!help^!^") do (
ECHO:  echo(
ECHO:  echo Invalid /? option
ECHO:  exit /b 0
ECHO:)
ECHO:if /i ^"^!help^!^" equ ^"regex^" (
ECHO:    explorer ^"https^://msdn.microsoft.com/en-us/library/ae5bf541.aspx^"
ECHO:    exit /b 0
ECHO:) else if /i ^"^!help^!^" equ ^"replace^" (
ECHO:    explorer ^"https^://msdn.microsoft.com/en-US/library/efy6s3e6.aspx^"
ECHO:    exit /b 0
ECHO:) else if /i ^"^!help^!^" equ ^"update^" (
ECHO:    explorer ^"http^://www.dostips.com/forum/viewtopic.php?f^=3^&t^=6044^"
ECHO:    exit /b 0
ECHO:) else if /i ^"^!help^!^" equ ^"charset^" (
ECHO:    explorer ^"https^://msdn.microsoft.com/en-us/library/windows/desktop/dd317756.aspx^"
ECHO:    exit /b 0
ECHO:) else if /i ^"^!help^!^" equ ^"xregexp^" (
ECHO:    explorer ^"http^:xregexp.com^"
ECHO:    exit /b 0
ECHO:) else if ^"^!help^!^" equ ^"^" ( %%^= /? ^=%%
ECHO:    set ^"find^=^^:^:^:(.*)^"
ECHO:    set ^"repl^=$1^"
ECHO:    set ^^^"cmd^=^"%%~f0^" find repl /v /a /f ^"%%~f0^"^^^"
ECHO:) else if ^"^!help^:~0^,1^!^" equ ^"/^" (   %%^= /?/Option ^=%%
ECHO:    set ^"find^=^^:^:^:(.*)^"
ECHO:    set ^"repl^=$txt^=$1^"
ECHO:    set ^"help^=^!help^:/^=\/^!^"
ECHO:    set ^"inc^=/^^^^^:^:^: {6}^!help^!(?^= ^|$)/i/^:/^^^^^:^:^: {6}\/(?^^^!^!help^:~2^!(?^= ^|$))^|^^^^^:^:\//i-1^"
ECHO:    set ^"help^=^!help^:\/^=/^!^"
ECHO:    set ^^^"cmd^=echo(^^^&call ^"%%~f0^" find repl /v /jmatchq /inc inc /f ^"%%~f0^"^^^|^^^|echo Help not found for option %%help%%^^^"
ECHO:) else ( %%^= /?Topic ^=%%
ECHO:    set ^"find^=^^:^:^:?(.*)^"
ECHO:    set ^"repl^=$txt^=$1^"
ECHO:    set ^"inc^=/^^^^^:^:\/^!help^:/^=\/^!$/i/+1^:/^^^^^:^:\//-1^"
ECHO:    set ^^^"cmd^=^"%%~f0^" find repl /v /jmatchq /inc inc /f ^"%%~f0^"^^^|^^^|(echo(^^^&echo Help not found for topic %%help%%^^)^^^"
ECHO:)
ECHO:if defined noMore (
ECHO:  setlocal
ECHO:  set ^"pathext^=.^"
ECHO:  call %%cmd%%
ECHO:) else (%%cmd%%) ^| more /e
ECHO:exit /b 0
ECHO:
ECHO:^:exitErr
ECHO:^>^&2 (
ECHO:  echo ERROR^: %%~1.
ECHO:  echo   Use JREPL /? or JREPL /?? to get help.
ECHO:  (goto) 2^>nul
ECHO:  exit /b 2
ECHO:)
ECHO:************* JScript portion **********/
ECHO:var _g^=new Object()^;
ECHO:_g.loc^=^'^'^;
ECHO:_g.objSh^=WScript.CreateObject(^"WScript.Shell^")^;
ECHO:try {
ECHO:  var env^=_g.objSh.Environment(^"Process^"),
ECHO:      cnt,
ECHO:      counter^=0,
ECHO:      ln^=0,
ECHO:      skip^=false,
ECHO:      quit^=false,
ECHO:      fso,
ECHO:      stdin^=WScript.StdIn,
ECHO:      stdout^=WScript.Stdout,
ECHO:      stderr^=WScript.Stderr,
ECHO:      output,
ECHO:      input^;
ECHO:  if (env(^'/VT^')^!^=^'^') _g.objExec^=_g.objSh.Exec(^"powershell.exe -nop -ep Bypass -c \^"exit\^"^")^;
ECHO:  _g.ForReading^=1^;
ECHO:  _g.ForWriting^=2^;
ECHO:  _g.ForAppending^=8^;
ECHO:  _g.FileFormat ^= env(^'/UTF^') ? -1 ^: 0^;
ECHO:  _g.TemporaryFolder^=2^;
ECHO:  fso ^= new ActiveXObject(^"Scripting.FileSystemObject^")^;
ECHO:  _g.inFile^=env(^'/F^')^;
ECHO:  _g.inFileA^=_g.inFile.split(^'^|^')^;
ECHO:  _g.outFile^=env(^'/O^')^;
ECHO:  _g.outFileA^=_g.outFile.split(^'^|^')^;
ECHO:  if (_g.outFileA[0]^=^=^'-^') {
ECHO:    if (_g.outFileA[1]^=^=^=undefined) {_g.outFileA[1]^=_g.inFileA[1]^; _g.outFileA[2]^=_g.inFileA[2]^;}
ECHO:    _g.outFile ^= _g.inFileA[0]+^'.new^'+(_g.outFileA[1]?^'^|^'+_g.outFileA[1]^:^'^')+(_g.outFileA[2]?^'^|^'+_g.outFileA[2]^:^'^')^;
ECHO:    if (env(^'/APP^')) fso.CopyFile( _g.inFileA[0], _g.inFileA[0]+^'.new^', true )^;
ECHO:  }
ECHO:  _g.tempFile^=^'^'^;
ECHO:  _g.delim^=env(^'/D^')^;
ECHO:  _g.loc^=^" defining EOL^"
ECHO:  eol^=eval(^'^"^'+env(^'/EOL^')+^'^"^')^;
ECHO:  _g.loc^=^"^"^;
ECHO:
ECHO:  _g.ADOStream ^= function( name, mode, format, noBom) {
ECHO:    var that ^= this^;
ECHO:    var bomSize ^= 0^;
ECHO:    try {
ECHO:      var stream ^= WScript.CreateObject(^"ADODB.Stream^")^;
ECHO:    } catch(ex) {
ECHO:      throw new Error(215,^'ADO unavailable^')^;
ECHO:    }
ECHO:    try {
ECHO:      stream.CharSet ^= format^;
ECHO:    } catch(ex) {
ECHO:      throw new Error(215,^'ADO character set ^"^'+format+^'^" is invalid or unavailable^')^;
ECHO:    }
ECHO:    stream.LineSeparator ^= (mode^=^=_g.ForReading) ? 10 ^: -1^;
ECHO:    stream.Open()^;
ECHO:    if (mode ^!^=^= _g.ForReading ^&^& noBom) {
ECHO:      stream.WriteText(^"^")^;
ECHO:      stream.Position ^= bomSize ^= stream.Size^;
ECHO:    }
ECHO:    switch (mode) {
ECHO:      case _g.ForReading^:
ECHO:        stream.LoadFromFile(name)^;
ECHO:        break^;
ECHO:      case _g.ForAppending^:
ECHO:        stream.LoadFromFile(name)^;
ECHO:        stream.Position ^= stream.Size^;
ECHO:      case _g.ForWriting^:
ECHO:        break^;
ECHO:      default^:
ECHO:        throw new Error(215, ^'Invalid file mode^')^;
ECHO:    }
ECHO:    this.AtEndOfStream ^= stream.EOS^;
ECHO:
ECHO:    this.ReadLine ^= function() {
ECHO:      if (mode^!^=_g.ForReading) throw new Error(215, ^'Bad file mode^')^;
ECHO:      var str ^= stream.ReadText(-2)^;
ECHO:      that.AtEndOfStream ^= stream.EOS^;
ECHO:      return str.slice(-1)^=^=^'\r^' ? str.slice(0,-1) ^: str^;
ECHO:    }
ECHO:
ECHO:    this.Read ^= function(size) {
ECHO:      if (mode^!^=_g.ForReading) throw new Error(215, ^'Bad file mode^')^;
ECHO:      var str ^= stream.ReadText(size)
ECHO:      that.AtEndOfStream ^= stream.EOS^;
ECHO:      return str^;
ECHO:    }
ECHO:
ECHO:    this.SkipLine ^= function() {
ECHO:      if (mode^!^=_g.ForReading) throw new Error(215, ^'Bad file mode^')^;
ECHO:      stream.SkipLine()^;
ECHO:      that.AtEndOfStream ^= stream.EOS^;
ECHO:    }
ECHO:
ECHO:    this.Write ^= function(str) {
ECHO:      if (mode^=^=_g.ForReading) throw new Error(215, ^'Bad file mode^')^;
ECHO:      stream.WriteText(str)^;
ECHO:    }
ECHO:
ECHO:    this.WriteLine ^= function(str) {
ECHO:      if (mode^=^=_g.ForReading) throw new Error(215, ^'Bad file mode^')^;
ECHO:      stream.WriteText(str,1)^;
ECHO:    }
ECHO:
ECHO:    this.Close ^= function() {
ECHO:      if (mode^!^=^=_g.ForReading){
ECHO:        if (bomSize) {
ECHO:          var noBomStream ^= WScript.CreateObject(^"ADODB.Stream^")^;
ECHO:          noBomStream.Type ^= 1^;
ECHO:          noBomStream.Mode ^= 3^;
ECHO:          noBomStream.Open()^;
ECHO:          stream.Position ^= bomSize^;
ECHO:          stream.CopyTo(noBomStream)^;
ECHO:          noBomStream.SaveToFile( name, 2 )^;
ECHO:          noBomStream.Flush()^;
ECHO:          noBomStream.Close()^;
ECHO:          noBomStream ^= null^;
ECHO:        } else stream.SaveToFile( name, 2 )^;
ECHO:      }
ECHO:      stream.Close()^;
ECHO:      stream^=null^;
ECHO:    }
ECHO:  }
ECHO:
ECHO:  _g.openInput ^= function( fileName ) {
ECHO:    var file^;
ECHO:    if (fileName) {
ECHO:      file ^= fileName.split(^'^|^')^;
ECHO:      if (file[1]) {
ECHO:        file ^= new _g.ADOStream( file[0], _g.ForReading, file[1], file[2] )^;
ECHO:        return file^;
ECHO:      }
ECHO:      else return fso.OpenTextFile( fileName, _g.ForReading, false, _g.FileFormat )^;
ECHO:    }
ECHO:    else return stdin^;
ECHO:  }
ECHO:
ECHO:  _g.charMap ^= new Object()^;
ECHO:  _g.readVar ^= function( val, ref, ext ) {
ECHO:    var input, buf^=1024^;
ECHO:    if (^!env(^'/XFILE^') ^|^| ^!val) return (ref ^&^& val) ? env(val) ^: val^;
ECHO:    _g.loc^=^' reading ^'+env(^'/LOCK^')+ext^;
ECHO:    input^=fso.OpenTextFile( env(^'/LOCK^')+ext, _g.ForReading )^;
ECHO:    val^=^'^'^;
ECHO:    while (^!input.AtEndOfStream) {
ECHO:      val+^=input.Read(buf)^;
ECHO:      buf*^=2^;
ECHO:    }
ECHO:    input.Close()^;
ECHO:    _g.loc^=^'^'
ECHO:    return val.slice(0,-2)^;
ECHO:  }
ECHO:
ECHO:  _g.xbytes ^= env(^'/XBYTES^')^;
ECHO:  if (_g.xbytes ^&^& ^!(fso.FileExists(_g.xbytes))) try {
ECHO:    // Unable to create file with CERTUTIL, so now try with ADO
ECHO:    var Stream^=WScript.CreateObject(^'ADODB.Stream^'),
ECHO:        Node^=WScript.CreateObject(^'Microsoft.XMLDOM^').createElement(^'e^')^;
ECHO:    Node.dataType^=^'bin.base64^'^;
ECHO:    Node.text^=^'AAECAwQFBgcICQoLDA0ODxAREhMUFRYXGBkaGxwdHh8gISIjJCUmJygpKissLS4v^'
ECHO:    + ^'MDEyMzQ1Njc4OTo7PD0+P0BBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWltcXV5f^'
ECHO:    + ^'YGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6e3x9fn+AgYKDhIWGh4iJiouMjY6P^'
ECHO:    + ^'kJGSk5SVlpeYmZqbnJ2en6ChoqOkpaanqKmqq6ytrq+wsbKztLW2t7i5uru8vb6/^'
ECHO:    + ^'wMHCw8TFxsfIycrLzM3Oz9DR0tPU1dbX2Nna29zd3t/g4eLj5OXm5+jp6uvs7e7v^'
ECHO:    + ^'8PHy8/T19vf4+fr7/P3+/w^=^=^'^;
ECHO:    Stream.Type^=1^;
ECHO:    Stream.Open()^;
ECHO:    Stream.Write(Node.nodeTypedValue)^;
ECHO:    Stream.SaveToFile(_g.xbytes)^;
ECHO:  } catch(e) {
ECHO:    _g.xbytes ^= ^'^'^;
ECHO:  }
ECHO:  var decode ^= _g.xbytes ?
ECHO:    // Default dynamic character set decode() for v7.4 and beyond
ECHO:    function(str, charSet, searchSwitch) {
ECHO:      function u(codeUnit) {return ^'\\u^'+lpad(codeUnit.toString(16),4,^'0^')^;}
ECHO:      function xToUTF16(byte,charSet) {
ECHO:        if (typeof _g.charMap[charSet]^=^=^=^'undefined^') {
ECHO:          if (charSet^=^=^'default^' ^&^& _g.utf) {
ECHO:            _g.charMap[charSet]^=false
ECHO:          } else {
ECHO:            var stream ^= _g.openInput( _g.xbytes+(charSet^=^=^'default^'?^'^'^:^'^|^'+charSet) )^;
ECHO:            try {
ECHO:              _g.charMap[charSet] ^= stream.Read(256)^;
ECHO:              stream.Close()^;
ECHO:              if (_g.charMap[charSet].length^!^=256) _g.charMap[charSet]^=false^;
ECHO:            } catch(e) {
ECHO:              _g.charMap[charSet]^=false^;
ECHO:            }
ECHO:          }
ECHO:        }
ECHO:        return  u( _g.charMap[charSet] ? _g.charMap[charSet].charCodeAt(byte) ^: byte )^;
ECHO:      }
ECHO:      function xRange(min,max,charSet) {
ECHO:        var str^=^'^', i^;
ECHO:        for (i^=min^; i^<^=max^; i++ ) str+^=xToUTF16(i,charSet)^;
ECHO:        return str^;
ECHO:      }
ECHO:      function uToUTF16(codePoint) {
ECHO:        if (codePoint ^<^= 0xFFFF) return u(codePoint)^;
ECHO:        codePoint -^= 0x10000^;
ECHO:        return u(0xD800^|(codePoint^>^>10)) + u(0xDC00^|(codePoint^&1023))^;
ECHO:      }
ECHO:      if (charSet^=^=^=undefined) charSet^=^'default^'^;
ECHO:      if (charSet^=^=^'input^') charSet ^= _g.inFileA[1] ? _g.inFileA[1] ^: ^'default^'^;
ECHO:      if (charSet^=^=^'output^') charSet ^= _g.outFileA[1] ? _g.outFileA[1] ^: ^'default^'^;
ECHO:      return str.replace(
ECHO:        /\\(?^:\\^|b^|c^|f^|n^|q^|r^|t^|v^|x([0-9a-fA-F]{2})^|x\{([0-9a-fA-F]{2}),([^^}]+)}^|u[0-9a-fA-F]{4}^|u\{([0-9a-fA-F]+)\}^|x\{([0-9a-fA-F]{2})-([0-9a-fA-F]{2})(?^:,([^^}]+))?})/g,
ECHO:        function($0,$1,$2,$3,$4,$5,$6,$7) {
ECHO:          if ($0^=^=^'\\q^') return ^'^"^'^;
ECHO:          if ($0^=^=^'\\c^') return ^'^^'^;
ECHO:          if ($1) $0^=xToUTF16(parseInt($1,16),charSet)^;
ECHO:          if ($2) $0^=xToUTF16(parseInt($2,16),$3)^;
ECHO:          if ($4) $0^=uToUTF16(parseInt($4,16))^;
ECHO:          if ($5) $0^=xRange(parseInt($5,16),parseInt($6,16),($7?$7^:charSet))^;
ECHO:          return searchSwitch^=^=^=false ? $0 ^: eval(^'^"^'+$0+^'^"^')^;
ECHO:        }
ECHO:      )^;
ECHO:    }
ECHO:    ^: // Pre-v7.4 decode() that assumes Windows-1252, only used if XBYTES.DAT not available or disabled.
ECHO:    function(str, ignore, searchSwitch) {
ECHO:      function toUTF16(codePoint) {
ECHO:        function u(codeUnit) {return ^'\\u^'+lpad(codeUnit.toString(16),4,^'0^')^;}
ECHO:        if (codePoint ^<^= 0xFFFF) return u(codePoint)^;
ECHO:        codePoint -^= 0x10000^;
ECHO:        return u(0xD800^|(codePoint^>^>10)) + u(0xDC00^|(codePoint^&1023))^;
ECHO:      }
ECHO:      str^=str.replace(
ECHO:        /\\(\\^|b^|c^|f^|n^|q^|r^|t^|v^|x80^|x82^|x83^|x84^|x85^|x86^|x87^|x88^|x89^|x8[aA]^|x8[bB]^|x8[cC]^|x8[eE]^|x91^|x92^|x93^|x94^|x95^|x96^|x97^|x98^|x99^|x9[aA]^|x9[bB]^|x9[cC]^|x9[dD]^|x9[eE]^|x9[fF]^|x[0-9a-fA-F]{2}^|u[0-9a-fA-F]{4}^|u\{([0-9a-fA-F]+)\}^|x\{([0-9a-fA-F]{2}),[^^}]+\})/g,
ECHO:        function($0,$1,$2,$3) {
ECHO:          if ($3) {
ECHO:            $1^=^'x^'+$3^;
ECHO:            $0^=^'\\^'+$1^;
ECHO:          }
ECHO:          switch ($1.toLowerCase()) {
ECHO:            case ^'q^'^:   return ^'^"^'^;
ECHO:            case ^'c^'^:   return ^'^^'^;
ECHO:            case ^'x80^'^: return ^'\u20AC^'^;
ECHO:            case ^'x82^'^: return ^'\u201A^'^;
ECHO:            case ^'x83^'^: return ^'\u0192^'^;
ECHO:            case ^'x84^'^: return ^'\u201E^'^;
ECHO:            case ^'x85^'^: return ^'\u2026^'^;
ECHO:            case ^'x86^'^: return ^'\u2020^'^;
ECHO:            case ^'x87^'^: return ^'\u2021^'^;
ECHO:            case ^'x88^'^: return ^'\u02C6^'^;
ECHO:            case ^'x89^'^: return ^'\u2030^'^;
ECHO:            case ^'x8a^'^: return ^'\u0160^'^;
ECHO:            case ^'x8b^'^: return ^'\u2039^'^;
ECHO:            case ^'x8c^'^: return ^'\u0152^'^;
ECHO:            case ^'x8e^'^: return ^'\u017D^'^;
ECHO:            case ^'x91^'^: return ^'\u2018^'^;
ECHO:            case ^'x92^'^: return ^'\u2019^'^;
ECHO:            case ^'x93^'^: return ^'\u201C^'^;
ECHO:            case ^'x94^'^: return ^'\u201D^'^;
ECHO:            case ^'x95^'^: return ^'\u2022^'^;
ECHO:            case ^'x96^'^: return ^'\u2013^'^;
ECHO:            case ^'x97^'^: return ^'\u2014^'^;
ECHO:            case ^'x98^'^: return ^'\u02DC^'^;
ECHO:            case ^'x99^'^: return ^'\u2122^'^;
ECHO:            case ^'x9a^'^: return ^'\u0161^'^;
ECHO:            case ^'x9b^'^: return ^'\u203A^'^;
ECHO:            case ^'x9c^'^: return ^'\u0153^'^;
ECHO:            case ^'x9d^'^: return ^'\u009D^'^;
ECHO:            case ^'x9e^'^: return ^'\u017E^'^;
ECHO:            case ^'x9f^'^: return ^'\u0178^'^;
ECHO:            default^:    if ($2) $0^=toUTF16(parseInt($2,16))^;
ECHO:                        return searchSwitch^=^=^=false ? $0 ^: eval(^'^"^'+$0+^'^"^')^;
ECHO:          }
ECHO:        }
ECHO:      )^;
ECHO:      return str^;
ECHO:    }
ECHO:  ^;
ECHO:
ECHO:  _g.getCount ^= function() {
ECHO:    if (cnt^>^=0) return^;
ECHO:    cnt^=0^;
ECHO:    if (_g.inFile^=^=^'^') {
ECHO:      _g.tempFile^=fso.GetSpecialFolder(_g.TemporaryFolder).path+^'\\^'+fso.GetTempName()^;
ECHO:      _g.inFile^=_g.tempFile^;
ECHO:      var output^=fso.OpenTextFile(_g.tempFile,_g.ForWriting,true,_g.FileFormat)^;
ECHO:      while (^!input.AtEndOfStream) {
ECHO:        output.WriteLine(input.ReadLine())^;
ECHO:        cnt++
ECHO:      }
ECHO:      output.Close()^;
ECHO:    } else {
ECHO:      while (^!input.AtEndOfStream) {
ECHO:        input.SkipLine()^;
ECHO:        cnt++^;
ECHO:      }
ECHO:      input.Close()^;
ECHO:    }
ECHO:    input ^= _g.openInput(_g.inFile)^;
ECHO:  }
ECHO:
ECHO:  _g.loc^=^' opening input file^'^;
ECHO:  input ^= _g.openInput(_g.inFile)^;
ECHO:  _g.loc^=^'^'^;
ECHO:
ECHO:  if (env(^'/C^')) _g.getCount()^;
ECHO:
ECHO:  openOutput( _g.outFile, env(^'/APP^'), _g.FileFormat )^;
ECHO:
ECHO:  if (env(^'/XREG^')) {
ECHO:    _g.loc^=^' while loading /XREG library^'^;
ECHO:    _g.libs^=env(^'/XREG^').split(^'/^')^;
ECHO:    for (_g.i^=0^; _g.i^<_g.libs.length^; _g.i++) {
ECHO:      _g.lib^=fso.OpenTextFile(_g.libs[_g.i],_g.ForReading)^;
ECHO:      if (^!_g.lib.AtEndOfStream) eval(_g.lib.ReadAll())^;
ECHO:      _g.lib.Close()^;
ECHO:    }
ECHO:    _g.loc^=^' while initializing /XREG library^'^;
ECHO:    _g.newRegExp ^= function(pattern,flags){ return new XRegExp(pattern,flags)^; }
ECHO:    XRegExp.install(^'natives^')^;
ECHO:    _g.loc^=^'^'^;
ECHO:    _g.XRegExp ^= true^;
ECHO:  } else {
ECHO:    _g.newRegExp ^= function(pattern,flags){ return new RegExp(pattern,flags)^; }  
ECHO:    _g.XRegExp ^= false^;
ECHO:  }  
ECHO:
ECHO:  if (env(^'/JLIB^')) {
ECHO:    _g.loc^=^' while loading /JLIB code^'^;
ECHO:    _g.libs^=env(^'/JLIB^').split(^'/^')^;
ECHO:    for (_g.i^=0^; _g.i^<_g.libs.length^; _g.i++) {
ECHO:      _g.lib^=fso.OpenTextFile(_g.libs[_g.i],_g.ForReading)^;
ECHO:      if (^!_g.lib.AtEndOfStream) eval(_g.lib.ReadAll())^;
ECHO:      _g.lib.Close()^;
ECHO:    }
ECHO:    _g.loc^=^'^'^;
ECHO:  }
ECHO:
ECHO:  _g.loc^=^' in /JBEG code^'^;
ECHO:  eval( _g.readVar( env(^'/JBEG^'), env(^'/V^'), ^'.JBEG^' ) )^;
ECHO:  _g.loc^=^'^'^;
ECHO:
ECHO:  _g.defineObjectInternal^=function(){
ECHO:    _g.loc^=^' while defining ^'+_g.defineObjectObj^;
ECHO:    eval(_g.defineObjectStr)^;
ECHO:    _g.loc^=^'^'^;
ECHO:  }
ECHO:  _g.defineObject^=function(str,obj) {
ECHO:    _g.defineObjectStr^=str^;
ECHO:    _g.defineObjectObj^=obj^;
ECHO:    _g.defineObjectInternal()^;
ECHO:  }
ECHO:
ECHO:  _g.main^=function() {
ECHO:    _g.rtn^=1^;
ECHO:    var args^=WScript.Arguments^;
ECHO:    var search ^=  env(^'/FindReplVar^') ? _g.readVar( args.Item(0), env(^'/V^')^|^|env(^'/UTF^'), ^'.FIND^' ) ^: args.Item(0)^;
ECHO:    var replace ^= env(^'/FindReplVar^') ? _g.readVar( args.Item(1), env(^'/V^')^|^|env(^'/UTF^'), ^'.REPL^' ) ^: args.Item(1)^;
ECHO:    var hiLite^=env(^'/H^')^!^=^'^'^;
ECHO:    var hiLiteOn^=eval(^'^"^'+env(^'/HON^')+^'^"^')^;
ECHO:    var hiLiteOff^=eval(^'^"^'+env(^'/HOFF^')+^'^"^')^;
ECHO:    var multi^=env(^'/M^')^!^=^'^'^;
ECHO:    var literal^=env(^'/L^')^!^=^'^'^;
ECHO:    var alterations^=env(^'/A^')^!^=^'^'^;
ECHO:    var srcVar^=env(^'/S^')^;
ECHO:    var jexpr^=env(^'/J^')^!^=^'^'^;
ECHO:    var jmatch^=env(^'/JMATCH^')^!^=^'^'^;
ECHO:    var jmatchq^=env(^'/JMATCHQ^')^!^=^'^'^;
ECHO:    var jquick^=env(^'/JQ^')^!^=^'^'^;
ECHO:    var translate^=env(^'/T^')^;
ECHO:    var filter ^= _g.readVar( env(^'/P^'), env(^'/V^'), ^'.P^' )^;
ECHO:    var keep, reject, context, krfile^=false, krcount^=false^;
ECHO:    var rtnVar^=env(^'/RTN^')^;
ECHO:    if (reject^=env(^'/R^')) {
ECHO:      if (^!/^^(\d+(^:\d+)?^|COUNT)(^:FILE)?$/i.test(reject)) throw new Error(209, ^'Invalid /R Context^')^;
ECHO:      context ^= reject.toUpperCase().split(^'^:^')
ECHO:      krfile^=(context[context.length-1]^=^=^'FILE^')^;
ECHO:      if (context[0]^=^=^'COUNT^') {
ECHO:        context[0]^=context[1]^=0^;
ECHO:        krcount^=true^;
ECHO:      } else {
ECHO:        context[0]^=Number(context[0])^;
ECHO:        context[1]^=(context.length^=^=1 ^|^| context[1]^=^=^'FILE^')?context[0]^:Number(context[1])^;
ECHO:      }
ECHO:    }
ECHO:    if (keep^=env(^'/K^')) {
ECHO:      //if (^!/^^\d+(^:\d+)?(^:FILE)?$/i.test(keep)) throw new Error(208, ^'Invalid /K Context^')^;
ECHO:      if (^!/^^(\d+(^:\d+)?^|COUNT)(^:FILE)?$/i.test(keep)) throw new Error(208, ^'Invalid /K Context^')^;
ECHO:      context ^= keep.toUpperCase().split(^'^:^')
ECHO:      krfile^=(context[context.length-1]^=^=^'FILE^')^;
ECHO:      if (context[0]^=^=^'COUNT^'){
ECHO:        context[0]^=context[1]^=0^;
ECHO:        krcount^=true^;
ECHO:      } else {
ECHO:        context[0]^=Number(context[0])^;
ECHO:        context[1]^=(context.length^=^=1 ^|^| context[1]^=^=^'FILE^')?context[0]^:Number(context[1])^;
ECHO:      }
ECHO:    }
ECHO:    var options ^= (keep^|^|reject)?^"^"^:^"g^"^;
ECHO:    _g.begLn ^= _g.readVar( env(^'/JBEGLN^'), env(^'/V^'), ^'.JBEGLN^' )^;
ECHO:    _g.endLn ^= _g.readVar( env(^'/JENDLN^'), env(^'/V^'), ^'.JENDLN^' )^;
ECHO:
ECHO:    _g.incBlock ^= new Array()^;
ECHO:    _g.excBlock ^= new Array()^;
ECHO:    _g.incBlock.dynamic ^= false^;
ECHO:    _g.excBlock.dynamic ^= false^;
ECHO:    var blockMatch,
ECHO:        blockSearch ^= /(?^:(-?\d+)^|(?^:\/((?^:\\\/^|[^^/])+)\/^|^'((?^:^'^'^|[^^^'])+)^')([ibe]*)(\/)?)([+-]\d+)?(^:(?^:(-?\d+)^|(\+\d+)^|(?^:\/((?^:\\\/^|[^^/])+)\/^|^'((?^:^'^'^|[^^^'])+)^')([ibe]*))([+-]\d+)?)?(?^:,(?^=.)^|$)?^|(.+)/g^;
ECHO:    /*                    1            2                   3               4       5     6         7    8       9            1                   1               1        1                         1
ECHO:                                                                                                                             0                   1               2        3                         4
ECHO:        line or range begin
ECHO:          spec
ECHO:            1 ^= line number
ECHO:            2 ^= regex
ECHO:              4 ^= i^|b^|e flags
ECHO:              5 ^= singleton
ECHO:            3 ^= string
ECHO:              4 ^= i^|b^|e flags
ECHO:              5 ^= singleton
ECHO:          6 ^= offset
ECHO:        7 ^= range end
ECHO:          spec
ECHO:            8 ^= line number
ECHO:            9 ^= offset from range begin
ECHO:            10 ^= regex
ECHO:              12 ^= i^|b^|e flags
ECHO:            11 ^= string
ECHO:              12 ^= i^|b^|e flags
ECHO:          13 ^= offset
ECHO:        14 ^= error
ECHO:    */
ECHO:    _g.Block ^= function(match) {
ECHO:      if (match[14]) throw new Error(210, ^'Invalid block syntax^')^;
ECHO:      this.offset^=match[6]?Number(match[6])^:0^;
ECHO:      if (match[1]) {
ECHO:        this.type^=^'lineNum^'^;
ECHO:        if ((this.spec^=Number(match[1])) ^< 0) _g.getCount()^;
ECHO:        this.lineNum^=this.spec+this.offset+(this.spec^<0?cnt+1^:0)^;
ECHO:      } else {
ECHO:        this.type^=^'regex^'^;
ECHO:        this.spec^=_g.newRegExp( (match[4].search(^'b^')+1?^'^^'^:^'^') + (
ECHO:            match[2] ? decode(match[2],^'input^',false) ^:
ECHO:            decode(match[3].replace(/^'^'/g,^"^'^"),^'input^',true).replace(/([.^^$*+?()[{\\^|])/g,^"\\$1^")
ECHO:          ) + (match[4].search(^'e^')+1?^'$^'^:^'^'),
ECHO:          match[4].search(^'i^')+1?^'i^'^:^'^'
ECHO:        )^;
ECHO:        this.spec.singleton^=match[5]?true^:false^;
ECHO:        this.lineNum^=void 0^;
ECHO:        if (this.offset^<0) throw new Error(211, ^'Regex/String offset cannot be negative^')^;
ECHO:      }
ECHO:      if (match[7]) {
ECHO:        this.endOffset^=Number(match[13])^;
ECHO:        if (match[8]) {
ECHO:          this.endType^=^'lineNum^'^;
ECHO:          if ((this.endSpec^=Number(match[8])) ^< 0) _g.getCount()^;
ECHO:          this.endLineNum^=this.endSpec+this.endOffset+(this.endSpec^<0?cnt+1^:0)^;
ECHO:        } else if (match[9]) {
ECHO:          this.endType^=^'offset^'^;
ECHO:          this.endSpec^=Number(match[9])^;
ECHO:          this.endLineNum^=this.lineNum+this.endSpec+this.endOffset^;
ECHO:        } else {
ECHO:          this.endType^=^'regex^'^;
ECHO:          this.endSpec^=_g.newRegExp( (match[12].search(^'b^')+1?^'^^'^:^'^') + (
ECHO:              match[10] ? decode(match[10],^'input^',false) ^:
ECHO:              decode(match[11].replace(/^'^'/g,^"^'^"),^'input^',true).replace(/([.^^$*+?()[{\\^|])/g,^"\\$1^")
ECHO:            ) + (match[12].search(^'e^')+1?^'$^'^:^'^'),
ECHO:            match[12].search(^'i^')+1?^'i^'^:^'^'
ECHO:          )^;
ECHO:          this.endLineNum^=void 0^;
ECHO:          if (this.endOffset^<-1) throw new Error(212, ^'End-range Regex/String offset cannot be less than -1^')^;
ECHO:        }
ECHO:      } else {
ECHO:         this.endType^=void 0^;
ECHO:         this.endSpec^=void 0^;
ECHO:         this.endLineNum^=this.lineNum^;
ECHO:      }
ECHO:    }
ECHO:    _g.setBlocks ^= function(blocks,str) {
ECHO:      if (blocks.dynamic^=^=true) {
ECHO:        for (var i^=0^; i^<blocks.length^; i++) {
ECHO:          var block ^= blocks[i]^;
ECHO:          if (ln^>block.endLineNum ^&^& block.type^=^=^'regex^' ^&^& ^!block.spec.singleton)
ECHO:            block.lineNum^=block.endLineNum^=void 0^;
ECHO:          if (^!block.lineNum ^&^& block.spec.test(str)) {
ECHO:            block.lineNum ^= ln+block.offset^;
ECHO:            if (^!block.endLineNum) {
ECHO:              if (^!block.endType)
ECHO:                block.endLineNum^=block.lineNum^;
ECHO:              else if (block.endType^=^=^'offset^')
ECHO:                block.endLineNum^=block.lineNum+block.endSpec+block.endOffset^;
ECHO:            }
ECHO:          }
ECHO:          if (^!block.endLineNum ^&^& ln^>block.lineNum ^&^& block.endSpec.test(str))
ECHO:            block.endLineNum ^= ln+block.endOffset^;
ECHO:        }
ECHO:      }
ECHO:    }
ECHO:    var str ^= _g.readVar( env(^'/INC^'), env(^'/V^'), ^'.INC^' )^;
ECHO:    while ( (blockMatch^=blockSearch.exec(str)) ^!^=^= null ) {
ECHO:      _g.loc^=^' while parsing /INC block[^'+_g.incBlock.length+^']^'^;
ECHO:      var block ^= new _g.Block(blockMatch)^;
ECHO:      _g.incBlock.dynamic^=(_g.incBlock.dynamic ^|^| block.type^=^=^'regex^' ^|^| block.endType^=^=^'regex^')^;
ECHO:      _g.incBlock.push(block)^;
ECHO:    }
ECHO:    str ^= _g.readVar( env(^'/EXC^'), env(^'/V^'), ^'.EXC^' )^;
ECHO:    while ( (blockMatch^=blockSearch.exec(str)) ^!^=^= null ) {
ECHO:      _g.loc^=^' while parsing /EXC block[^'+_g.excBlock.length+^']^'^;
ECHO:      var block ^= new _g.Block(blockMatch)^;
ECHO:      _g.excBlock.dynamic^=(_g.excBlock.dynamic ^|^| block.type^=^=^'regex^' ^|^| block.endType^=^=^'regex^')^;
ECHO:      _g.excBlock.push(new _g.Block(blockMatch))^;
ECHO:    }
ECHO:    _g.loc^=^'^'^;
ECHO:
ECHO:    if (multi) options+^=^'m^'^;
ECHO:    if (env(^'/MATCH^')) {
ECHO:      if (replace.toUpperCase()^=^=^'COUNT^') {
ECHO:        replace^=^'$txt^=false^;counter++^;^'^;
ECHO:        krcount^=true^;
ECHO:      } else replace^=^'$txt^=$0^'^;
ECHO:    }
ECHO:    _g.krcount^=krcount^;
ECHO:    if (_g.begLn) _g.defineObject(^"_g.begLn^=function($txt){_g.loc^=^' in /JBEGLN code^'^;^"+_g.begLn+^"^;_g.loc^=^'^'^;return $txt^;}^",^'/JBEGLN code^')^;
ECHO:    if (_g.endLn) _g.defineObject(^"_g.endLn^=function($txt){_g.loc^=^' in /JENDLN code^'^;^"+_g.endLn+^"^;_g.loc^=^'^'^;return $txt^;}^",^'/JENDLN code^')^;
ECHO:    if (env(^'/I^')) options+^=^'i^'^;
ECHO:
ECHO:    var lnWidth^=parseInt(env(^'/N^'),10),
ECHO:        offWidth^=parseInt(env(^'/OFF^'),10)^;
ECHO:    if (lnWidth^<0) lnWidth ^= 0^;
ECHO:    if (offWidth^<0) offWidth ^= 0^;
ECHO:    _g.lnPrefix^=lnWidth^>0^;
ECHO:    _g.offPrefix^=offWidth^>0^;
ECHO:    var lnPad^=lnWidth^>0?^'^"^'+(Array(lnWidth+1).join(^'0^'))+^'^"^'^:^'^',
ECHO:        offPad^=offWidth^>0?^'^"^'+(Array(offWidth+1).join(^'0^'))+^'^"^'^:^'^',
ECHO:        xcnt^=0, test,
ECHO:        filterMatchOffset ^= offWidth^>0^&^&filter^!^=^'^' ? ^'+_g.filterMatchOffset^' ^: ^'^'^;
ECHO:
ECHO:    function writeMatch(str,ln,lnPad,off,offPad) {
ECHO:      return ^'if(^'+str+^'^!^=^=false){_g.rtn^=0^;output.Write(^'
ECHO:           + (lnWidth^=^=0 ? ^'^' ^: ^'lpad(^'+ln+^',^'+lnPad+^')+_g.delim+^')
ECHO:           + (offWidth^=^=0 ? ^'^' ^: ^'lpad(^'+off+^',^'+offPad+^')+_g.delim+^')
ECHO:           + str+^'+eol)^;}^'^;
ECHO:    }
ECHO:
ECHO:    if (env(^'/VT^')^!^=^'^') while (_g.objExec.Status ^=^= 0) WScript.Sleep(50)^;
ECHO:
ECHO:    if (translate^=^=^'none^') {  // Normal
ECHO:      if (hiLite ^&^& ^!krcount ^&^& (keep^|^|reject)) options+^=^'g^'^;
ECHO:      if (krfile) { // Load KEEP or REJECT File
ECHO:        _g.loc^=^' loading ^'+(keep?^'/K^'^:^'/R^')+^' Search file^'^;
ECHO:        var f ^= _g.openInput(search)^;
ECHO:        search^=^'^'^;
ECHO:        while (^!f.AtEndOfStream) {
ECHO:          str^=f.ReadLine()^;
ECHO:          if (env(^'/XSEQ^')) str^=decode(str,^'input^',literal)^;
ECHO:          if (literal) str^=str.replace(/([.^^$*+?()[{\\^|])/g,^"\\$1^")^;
ECHO:          if (env(^'/B^')) str^=^"^^^"+str^;
ECHO:          if (env(^'/E^')) str^=str+^"$^"^;
ECHO:          search+^=(search?^'^|^'^:^'^')+str^;
ECHO:        }
ECHO:        f.Close()^;
ECHO:      } else { // Load Normal Search
ECHO:        if (env(^'/XSEQ^')) {
ECHO:          if (^!jexpr) replace^=decode(replace,^'output^')^;
ECHO:          search^=decode(search,^'input^',literal)^;
ECHO:        }
ECHO:        if (literal) {
ECHO:          search^=search.replace(/([.^^$*+?()[{\\^|])/g,^"\\$1^")^;
ECHO:          if (^!jexpr) replace^=replace.replace(/\$/g,^"$$$$^")^;
ECHO:        }
ECHO:        if (env(^'/B^')) search^=^"^^^"+search^;
ECHO:        if (env(^'/E^')) search^=search+^"$^"^;
ECHO:        _g.loc^=^' in Search regular expression^'^;
ECHO:      }
ECHO:      search^=_g.newRegExp(search,options)^;
ECHO:      _g.loc^=^'^'^;
ECHO:      if (keep^|^|reject){
ECHO:        jquick^=jexpr^=(krcount ^|^| hiLite ^|^| filter^!^=^'^')^;
ECHO:        replace ^= krcount ? ^'$txt^=false^;counter++^;^' ^: jquick ? ^'$txt^=$0^;if(_g.matchOffset^=^=null)_g.matchOffset^=$off^'+filterMatchOffset+^'^;^' ^: ^'$^&^'^;
ECHO:      }
ECHO:      if (jexpr) {
ECHO:        _g.loc^=^' in Search regular expression^'^;
ECHO:        test^=_g.newRegExp(^'.^|^'+search,options)^;
ECHO:        _g.loc^=^'^'^;
ECHO:        ^'x^'.replace(test,function(){xcnt^=arguments.length-2^; return ^'^'^;})^;
ECHO:        _g.replFunc^=^'_g.replFunc^=function($0^'^;
ECHO:        for (var i^=1^; i^<xcnt^; i++) _g.replFunc+^=^',$^'+i^;
ECHO:        _g.replFunc+^=^',$off,$src){_g.loc^=^" in Replace code^"^;^'^;
ECHO:        if (jquick^|^|jmatchq) {
ECHO:          _g.replFunc+^=^'var $txt^;^'+replace+^'^;^'^;
ECHO:          if (hiLite) _g.replFunc+^=^'$txt^=^"^'+hiLiteOn+^'^"+$txt+^"^'+hiLiteOff+^'^"^;^'^;
ECHO:          _g.replFunc+^=
ECHO:            jmatch ? writeMatch(^'$txt^',^'ln^',lnPad,^'$off^'+filterMatchOffset,offPad)+^'_g.loc^=^"^"^;return $0^;}^'
ECHO:                   ^: ^'_g.loc^=^"^"^;return $txt^;}^'^;
ECHO:        } else {
ECHO:          var jstr ^= ^'eval(_g.replace)^'^;
ECHO:          if (hiLite) jstr ^= ^'^"^'+hiLiteOn+^'^"+^'+jstr+^'+^"^'+hiLiteOff+^'^"^'^;
ECHO:          _g.replFunc+^=
ECHO:            jmatch ? writeMatch(jstr,^'ln^',lnPad,^'$off^'+filterMatchOffset,offPad)+^'_g.loc^=^"^"^;return $0^;}^'
ECHO:                   ^: ^'_g.rtn2^=^'+jstr+^'^;_g.loc^=^"^"^;return _g.rtn2^;}^'^;
ECHO:        }
ECHO:        _g.defineObject(_g.replFunc,^'/J or /JMATCH code^')^;
ECHO:        _g.replace ^= replace^;
ECHO:      } else {
ECHO:        _g.replace ^= hiLite ? hiLiteOn + replace + hiLiteOff ^: replace^;
ECHO:      }
ECHO:    } else {                         // /T
ECHO:      if (translate.toLowerCase()^=^=^'file^') {
ECHO:        var f
ECHO:        _g.loc^=^' loading /T Search file^'^;
ECHO:        f ^= _g.openInput(search)^;
ECHO:        search^=[]^;
ECHO:        while (^!f.AtEndOfStream) search[search.length]^=f.ReadLine()^;
ECHO:        f.Close()^;
ECHO:        _g.loc^=^' loading /T Replace file^'^;
ECHO:        f ^= _g.openInput(replace)^;
ECHO:        replace^=[]^;
ECHO:        while (^!f.AtEndOfStream) replace[replace.length]^=f.ReadLine()^;
ECHO:        f.Close()^;
ECHO:        _g.loc^=^'^'^;
ECHO:      } else {
ECHO:        if (translate.length^>1) throw new Error(203, ^'Invalid /T delimiter^')^;
ECHO:        if (translate.length^=^=0 ^&^& env(^'/XSEQ^')) {
ECHO:          search^=decode(search,^'input^',literal)^;
ECHO:          replace^=decode(replace,^'output^')^;
ECHO:        }
ECHO:        search^=search.split(translate)^;
ECHO:        var replace^=replace.split(translate)^;
ECHO:      }
ECHO:      if (search.length^>99 ^&^& ^!_g.XRegExp) throw new Error(202, ^'/T expression count exceeds 99^')^;
ECHO:      if (search.length^!^=replace.length) throw new Error(201, ^'Mismatched search and replace /T expressions^')^;
ECHO:      var j^=1^;
ECHO:      if (^!jexpr) jquick^=1^;
ECHO:      if (jquick) _g.replace^=^'^'^;
ECHO:      else _g.replace^=[]^;
ECHO:      for (var i^=0^; i^<search.length^; i++) {
ECHO:        if (env(^'/XSEQ^')) search[i]^=decode(search[i],^'input^',literal)^;
ECHO:        if (literal) {
ECHO:          search[i]^=search[i].replace(/([.^^$*+?()[{\\^|])/g,^"\\$1^")^;
ECHO:        } else {
ECHO:          _g.loc^=^' in Search regular expression^'^;
ECHO:          test^=_g.newRegExp(^'.^|^'+search[i],options+(_g.XRegExp?env(^'/TFLAG^')^:^'^'))^;
ECHO:          _g.loc^=^'^'^;
ECHO:          ^'x^'.replace(test,function(){xcnt^=arguments.length-3^;return ^'^'^;})^;
ECHO:        }
ECHO:        if (j+xcnt^>99 ^&^& ^!_g.XRegExp) throw new Error(202, ^'/T expressions + captured expressions exceeds 99^')^;
ECHO:        if (env(^'/B^')) search[i]^=^"^^^"+search[i]^;
ECHO:        if (env(^'/E^')) search[i]^=search[i]+^"$^"^;
ECHO:        if (_g.XRegExp) search[i]^=^"?^<T^"+i+^"^>^"+search[i]^;
ECHO:        if (jquick^|jmatchq) {
ECHO:          if (^!jexpr) {
ECHO:            replace[i]^=^"^'^" + (env(^'/XSEQ^')^=^=^'^'?replace[i]^:decode(replace[i],^'output^')).replace(/[\\^']/g,^"\\$^&^") + ^"^'^"^;
ECHO:            replace[i]^=replace[i].replace(/\n/g, ^"\\n^")^;
ECHO:            replace[i]^=replace[i].replace(/\r/g, ^"\\r^")^;
ECHO:            if (^!literal) {
ECHO:              if (_g.XRegExp) {
ECHO:                replace[i]^=^'$txt^=^'+replace[i].replace(
ECHO:                  /\$([$^&^`0]^|\\^'^|\{0\}^|(\d)(\d)?^|\{((\d)(\d)?)\}^|\{([^^}]+)\})/g,
ECHO:                  function($0,$1,$2,$3,$4,$5,$6,$7){
ECHO:                    return ($1^=^=^"$^") ? ^"$^"^:
ECHO:                           ($1^=^=^"^&^" ^|^| $1^=^=^"0^" ^|^| $1^=^=^"{0}^") ? ^"^'+$0+^'^"^:
ECHO:                           ($1^=^=^"^`^") ? ^"^'+$src.substr(0,$off)+^'^"^:
ECHO:                           ($1^=^=^"\\^'^") ? ^"^'+$src.substr($off+$0.length)+^'^"^:
ECHO:                           ($7) ? ^"^'+$0.^"+$7+^"+^'^"^:
ECHO:                           (Number($1)-j^<^=xcnt ^&^& Number($1)^>^=j) ? ^"^'+^"+$0+^"+^'^"^:
ECHO:                           (Number($2)-j^<^=xcnt ^&^& Number($2)^>^=j) ? ^"^'+$^"+$2+^"+^'^"+$3^:
ECHO:                           (Number($4)-j^<^=xcnt ^&^& Number($4)^>^=j) ? ^"^'+$^"+$4+^"+^'^"^:
ECHO:                           (Number($5)-j^<^=xcnt ^&^& Number($5)^>^=j) ? ^"^'+$^"+$5+^"+^'^"+$6^:
ECHO:                           $0^;
ECHO:                  }
ECHO:                )^;
ECHO:              } else {
ECHO:                replace[i]^=^'$txt^=^'+replace[i].replace(
ECHO:                  /\$([$^&^`0]^|\\^'^|(\d)(\d)?)/g,
ECHO:                  function($0,$1,$2,$3){
ECHO:                    return ($1^=^=^"$^") ? ^"$^"^:
ECHO:                           ($1^=^=^"^&^") ? ^"^'+$0+^'^"^:
ECHO:                           ($1^=^=^"^`^") ? ^"^'+$src.substr(0,$off)+^'^"^:
ECHO:                           ($1^=^=^"\\^'^") ? ^"^'+$src.substr($off+$0.length)+^'^"^:
ECHO:                           (Number($1)-j^<^=xcnt ^&^& Number($1)^>^=j) ? ^"^'+^"+$0+^"+^'^"^:
ECHO:                           (Number($2)-j^<^=xcnt ^&^& Number($2)^>^=j) ? ^"^'+$^"+$2+^"+^'^"+$3^:
ECHO:                           $0^;
ECHO:                  }
ECHO:                )^;
ECHO:              }
ECHO:            } else replace[i]^=^'$txt^=^'+replace[i]^;
ECHO:          }
ECHO:          _g.replace+^=^'if(arguments[^'+j+^']^!^=^=undefined){^'+replace[i]+^'^;}^'^;
ECHO:        } else {
ECHO:          _g.replace[j]^=replace[i]^;
ECHO:        }
ECHO:        j+^=xcnt+1^;
ECHO:      }
ECHO:      search^=^'(^'+search.join(^')^|(^')+^')^'^;
ECHO:      _g.loc^=^' in Search regular expression^'^;
ECHO:      search^=_g.newRegExp( search, options+(_g.XRegExp?env(^'/TFLAG^')^:^'^') )^;
ECHO:      _g.loc^=^'^'^;
ECHO:      _g.replFunc^=^'_g.replFunc^=function($0^'^;
ECHO:      for (var i^=1^; i^<j^; i++) _g.replFunc+^=^',$^'+i^;
ECHO:      _g.replFunc+^=^',$off,$src){_g.loc^=^" in Replace code^"^;^'^;
ECHO:      if (jquick^|^|jmatchq) {
ECHO:        _g.replFunc+^=^'var $txt^;^'+_g.replace^;
ECHO:        if (hiLite) _g.replFunc+^=^'$txt^=^"^'+hiLiteOn+^'^"+$txt+^"^'+hiLiteOff+^'^"^;^'^;
ECHO:        _g.replFunc+^=(
ECHO:           jmatch ? writeMatch(^'$txt^',^'ln^',lnPad,^'$off^'+filterMatchOffset,offPad)+^'_g.loc^=^"^"^;return $0^;}^'
ECHO:                  ^: ^'_g.loc^=^"^"^;return $txt^;}^' )^;
ECHO:      } else {
ECHO:        var jstr ^= ^'eval(_g.replace[_g.i])^'^;
ECHO:        if (hiLite) jstr ^= ^'^"^'+hiLiteOn+^'^"+^'+jstr+^'+^"^'+hiLiteOff+^'^"^'^;
ECHO:        _g.replFunc+^=^'for(_g.i^=1^;_g.i^<arguments.length-2^;_g.i++)if(arguments[_g.i]^!^=^=undefined)^'+ (
ECHO:           jmatch ? writeMatch(jstr,^'ln^',lnPad,^'$off^'+filterMatchOffset,offPad)+^'_g.loc^=^"^"^;return $0^;}^'
ECHO:                  ^: ^'{_g.rtn2^=^'+jstr+^'^;_g.loc^=^"^"^;return _g.rtn2^;}}^' )^;
ECHO:      }
ECHO:      _g.defineObject(_g.replFunc,^'/J or /JMATCH code^')^;
ECHO:      jexpr^=true^;
ECHO:    }
ECHO:
ECHO:    var str1, str2^;
ECHO:    var repl^=jexpr?_g.replFunc^:_g.replace^;
ECHO:
ECHO:    if (filter^!^=^'^') {
ECHO:      if (env(^'/PREPL^')) {
ECHO:        _g.defineObject(
ECHO:          ^'_g.filterReplace^=function(){ return ^'
ECHO:            + env(^'/PREPL^').replace(/\$(\d+)/g,^'arguments[$1]^')
ECHO:            .replace(/{([^^}]*)}/g,^'($1).replace(_g.search,_g.filterReplace2)^')
ECHO:            +^'^;}^'
ECHO:          ,^'/PREPL^'
ECHO:        )^;
ECHO:      } else if (offWidth^>0) {
ECHO:        _g.filterReplace^=function(str) {
ECHO:          _g.filterMatchOffset ^= arguments[arguments.length-2]^;
ECHO:          return str.replace(_g.search,_g.filterReplace2)^;
ECHO:        }
ECHO:      } else {
ECHO:        _g.filterReplace^=function(str) {
ECHO:          return str.replace(_g.search,_g.filterReplace2)^;
ECHO:        }
ECHO:      }
ECHO:      _g.loc^=^' in /P FilterRegex^'^;
ECHO:      filter ^= _g.newRegExp( decode(filter,^'input^',false), env(^'/PFLAG^').toLowerCase()+(env(^'/M^')?^'m^'^:^'^') )^;
ECHO:      _g.loc^=^'^'^;
ECHO:      _g.search^=search^;
ECHO:      search^=filter^;
ECHO:      _g.filterReplace2^=repl^;
ECHO:      repl^=_g.filterReplace^;
ECHO:    }
ECHO:
ECHO:    if (srcVar) {
ECHO:      str1^=_g.readVar( srcVar, srcVar, ^'.S^' )^;
ECHO:      str2^=str1.replace(search,repl)^;
ECHO:      if (str1^!^=str2) _g.rtn^=0^;
ECHO:      if (^!jmatch ^&^& (^!alterations ^|^| str1^!^=str2)) output.Write(str2+(multi?^'^'^:eol))^;
ECHO:    } else if (multi){
ECHO:      var buf^=1024^;
ECHO:      str1^=^"^"^;
ECHO:      while (^!input.AtEndOfStream) {
ECHO:        str1+^=input.Read(buf)^;
ECHO:        buf*^=2^;
ECHO:      }
ECHO:      str2^=str1.replace(search,repl)^;
ECHO:      if (^!jmatch) output.Write(str2)^;
ECHO:      if (str1^!^=str2) _g.rtn^=0^;
ECHO:    } else if (keep^|^|reject){
ECHO:      var match, arr, filterResult, post, pre^=new Array()^;
ECHO:      var cmd^=^'while(^!input.AtEndOfStream^&^&^!quit){match^=reject^;str1^=input.ReadLine()^;^'^;
ECHO:      if ( _g.incBlock.length ^|^| _g.excBlock.length ^|^| lnWidth
ECHO:           ^|^| _g.begLn ^|^| _g.endLn ^|^| env(env(^'/V^')?env(^'/JEND^')^:^'/JEND^')
ECHO:         ) cmd+^=^'ln++^;^'^;
ECHO:      if (_g.incBlock.dynamic) cmd+^=^'_g.setBlocks(_g.incBlock,str1)^;^'^;
ECHO:      if (_g.excBlock.dynamic) cmd+^=^'_g.setBlocks(_g.excBlock,str1)^;^'^;
ECHO:      if (_g.begLn) cmd+^=^'str1^=_g.begLn(str1)^;^'^;
ECHO:      if (jquick) cmd+^=^'_g.matchOffset^=null^;^'^;
ECHO:      str1^=^'^'^;str2^=^'if(^'^;
ECHO:      if (_g.incBlock.length) {str1+^=str2+^'inc()^'^;str2^=^'^&^&^'^;}
ECHO:      if (_g.excBlock.length) {str1+^=str2+^'^!exc()^'^;str2^=^'^&^&^'^;}
ECHO:      if (_g.begLn^|^|_g.endLn^|^|jexpr^|^|env(env(^'/V^')?env(^'/JBEG^')^:^'/JBEG^')) {str1+^=str2+^'^!skip^'^;}
ECHO:      if (str1) cmd+^=str1+^')^'^;
ECHO:      if (jquick) {
ECHO:        cmd+^=^'{str1^=str1.replace(search,repl)^;match^=_g.matchOffset^!^=null?^!reject^:reject^;}^'^;
ECHO:      } else {
ECHO:        cmd+^=^'if ((arr^=search.exec(str1))^!^=^=null){match^=^!reject^;_g.matchOffset^=arr.index}^'^;
ECHO:      }
ECHO:      if (_g.endLn) cmd +^= ^'str1^=_g.endLn(str1)^;^'^;
ECHO:      cmd+^=^'if (str1^!^=^=false ^&^& match) {_g.rtn^=0^;^'^;
ECHO:      if (context[0]) cmd+^=^'while(pre.length){str2^=pre.pop()^;^'+writeMatch(^'str2^',^'ln-pre.length-1^',lnPad,^'^"^"^',offWidth)+^'}^'^;
ECHO:      cmd+^=writeMatch(^'str1^',^'ln^',lnPad,^'_g.matchOffset^',offPad)^;
ECHO:      if (context[1]) cmd+^=^'post^=context[1]^;}else if(post--^>0){^'+writeMatch(^'str1^',^'ln^',lnPad,^'^"^"^',offWidth)^;
ECHO:      if (context[0]) cmd+^=^'}else{pre.unshift(str1)^;if(pre.length^>context[0])pre.pop()^;^'^;
ECHO:      cmd+^=^'}}^'^;
ECHO:      if (env(^'/DBUG^')) output.WriteLine(cmd)^;
ECHO:      else eval(cmd)^;
ECHO:    } else {
ECHO:      var cmd^=^'while(^!input.AtEndOfStream^&^&^!quit){str2^=str1^=input.ReadLine()^;^'^;
ECHO:      if ( _g.incBlock.length ^|^| _g.excBlock.length ^|^| lnWidth
ECHO:           ^|^| _g.begLn ^|^| _g.endLn^|^| jexpr ^|^| env(env(^'/V^')?env(^'/JEND^')^:^'/JEND^')
ECHO:         ) cmd+^=^'ln++^;^'^;
ECHO:      if (_g.incBlock.dynamic) cmd+^=^'_g.setBlocks(_g.incBlock,str2)^;^'^;
ECHO:      if (_g.excBlock.dynamic) cmd+^=^'_g.setBlocks(_g.excBlock,str2)^;^'^;
ECHO:      if (_g.begLn) cmd+^=^'str2^=_g.begLn(str2)^;^'^;
ECHO:      str1^=^'^'^;str2^=^'if(^'^;
ECHO:      if (_g.incBlock.length) {str1+^=str2+^'inc()^'^;str2^=^'^&^&^'^;}
ECHO:      if (_g.excBlock.length) {str1+^=str2+^'^!exc()^'^;str2^=^'^&^&^'^;}
ECHO:      if (_g.begLn^|^|_g.endLn^|^|jexpr^|^|env(env(^'/V^')?env(^'/JBEG^')^:^'/JBEG^')) {str1+^=str2+^'^!skip^'^;}
ECHO:      if (str1) cmd+^=str1+^')^'^;
ECHO:      cmd+^=^'str2^=str2.replace(search,repl)^;^'^;
ECHO:      if (_g.endLn) cmd+^=^'str2^=_g.endLn(str2)^;^'^;
ECHO:      if (^!jmatch) {
ECHO:        str1^=^'^'^;str2^=^'if(^'^;
ECHO:        if (_g.endLn^|^|jexpr) {str1+^=str2+^'str2^!^=^=false^'^;str2^=^'^&^&^'^;}
ECHO:        if (alterations) {str1+^=str2+^'str1^!^=str2^'^;}
ECHO:        if (str1) cmd+^=str1+^')^'^;
ECHO:        cmd+^=^'output.Write(^'+(lnWidth^>0?^'lpad(ln,^'+lnPad+^')+_g.delim+^'^:^'^')+^'str2+eol)^;^'^;
ECHO:        cmd+^=^'if (str1^!^=str2) _g.rtn^=0^;^'^;
ECHO:      }
ECHO:      cmd+^=^'}^'
ECHO:      if (env(^'/DBUG^')) output.WriteLine(cmd)^;
ECHO:      else eval(cmd)^;
ECHO:    }
ECHO:  }
ECHO:
ECHO:  _g.main()^;
ECHO:
ECHO:  _g.loc^=^' in /JEND code^'^;
ECHO:  eval( _g.readVar( env(^'/JEND^'), env(^'/V^'), ^'.JEND^' ) )^;
ECHO:  _g.loc^=^'^'^;
ECHO:  if (_g.krcount) output.WriteLine(counter)^;
ECHO:  if (_g.inFile) input.Close()^;
ECHO:  if (_g.outFile) output.Close()^;
ECHO:  if (_g.outFileA[0]^=^=^'-^') {
ECHO:    fso.GetFile(_g.inFileA[0]).Delete()^;
ECHO:    fso.GetFile(_g.inFileA[0]+^'.new^').Move(_g.inFileA[0])^;
ECHO:  }
ECHO:  if (_g.tempFile) fso.GetFile(_g.tempFile).Delete()^;
ECHO:
ECHO:
ECHO:  if (env(^'/RTN^')) {
ECHO:    _g.rtnVar ^= function() {
ECHO:      var val, str1, str2, buf^=1024, arr, n^;
ECHO:      input^=_g.openInput(_g.outFile)
ECHO:      val^=^'^'^;
ECHO:      while (^!input.AtEndOfStream) {
ECHO:        val+^=input.Read(buf)^;
ECHO:        buf*^=2^;
ECHO:      }
ECHO:      input.Close()^;
ECHO:      if (env(^'/RTN_LINE^')^&^&(n^=parseInt(env(^'/RTN_LINE^')))) {
ECHO:        arr^=val.split(/\r?\n/)^;
ECHO:        n ^= n^>0 ? n-1 ^: arr.length+n^;
ECHO:        val ^= typeof arr[n]^=^=^=^'undefined^' ? ^'^' ^: arr[n]^;
ECHO:      } else if ((env(^'/MATCH^')^|^|env(^'/JMATCH^')^|^|env(^'/JMATCHQ^'))^&^&eol^&^&val.slice(-eol.length)^=^=^=eol){
ECHO:        val^=val.slice(0,-eol.length)^;
ECHO:      }
ECHO:      output^=null^;
ECHO:      openOutput(_g.outFile, ^"^", 0 )^;
ECHO:      str1^=^'x^'+val.replace(/%%/g,^'%%3^').replace(/\n/mg,^'%%~1^').replace(/\r/mg,^'%%2^').replace(/^"/g,^'%%4^')^;
ECHO:      str2^=str1.replace(/[^!^^]/g,^'^^$^&^')^;
ECHO:      if (str2.length + env(^'/RTN^').length ^> 8181) throw new Error(213, ^'Result too long to fit within variable^')^;
ECHO:      if (str2.indexOf(^'\x00^')^>^=0) throw new Error(214, ^'Null bytes (0x00) cannot be returned in a variable^')^;
ECHO:      output.WriteLine(str1)^;
ECHO:      output.WriteLine(str2)^;
ECHO:      output.Close()^;
ECHO:    }
ECHO:    _g.rtnVar()^;
ECHO:  }
ECHO:
ECHO:  WScript.Quit(_g.rtn)^;
ECHO:} catch(e) {
ECHO:  WScript.Stderr.WriteLine(^"JScript runtime error^"+_g.loc+^"^: ^"+e.message)^;
ECHO:  WScript.Quit(3)^;
ECHO:}
ECHO:
ECHO:function lpad( val, arg2, arg3 ) {
ECHO:  var rtn^=val.toString(), len, pad, cnt^;
ECHO:  if (typeof arg2 ^=^=^= ^"string^") {
ECHO:    pad ^= arg2^;
ECHO:    len ^= arg2.length^;
ECHO:  } else {
ECHO:    len ^= arg2^;
ECHO:    pad ^= arg3 ? arg3 ^: ^'                                                  ^'^;
ECHO:    while (pad.length ^< len) pad+^=pad^;
ECHO:  }
ECHO:  return (rtn.length^<len) ? pad.slice(0,len-rtn.length)+rtn ^: rtn^;
ECHO:}
ECHO:
ECHO:function rpad( val, arg2, arg3 ) {
ECHO:  var rtn^=val.toString(), len, pad, cnt^;
ECHO:  if (typeof arg2 ^=^=^= ^"string^") {
ECHO:    pad ^= arg2^;
ECHO:    len ^= arg2.length^;
ECHO:  } else {
ECHO:    len ^= arg2^;
ECHO:    pad ^= typeof arg3 ^=^=^= ^"string^" ? arg3 ^: ^'                                                  ^'^;
ECHO:    while (pad.length ^< len) pad+^=pad^;
ECHO:  }
ECHO:  return (rtn.length^<pad.length) ? rtn+pad.slice(rtn.length-len) ^: rtn^;
ECHO:}
ECHO:
ECHO:function inc(n) {
ECHO:  for (var i^=n?n^:0, end^=n?n+1^:_g.incBlock.length^; i^<end^; i++) {
ECHO:    var block ^= _g.incBlock[i]^;
ECHO:    if (ln^>^=block.lineNum ^&^& ln^<^=(block.endLineNum?block.endLineNum^:ln)) return true^;
ECHO:  }
ECHO:  return (_g.incBlock.length^=^=0)^;
ECHO:}
ECHO:
ECHO:function exc(n) {
ECHO:  for (var i^=n?n^:0, end^=n?n+1^:_g.excBlock.length^; i^<end^; i++) {
ECHO:    var block ^= _g.excBlock[i]^;
ECHO:    if (ln^>^=block.lineNum ^&^& ln^<^=(block.endLineNum?block.endLineNum^:ln)) return true^;
ECHO:  }
ECHO:  return false^;
ECHO:}
ECHO:
ECHO:function openOutput( fileName, append, utf ) {
ECHO:  _g.loc^=^' opening output file^'^;
ECHO:  if (output ^&^& output^!^=^=stdout) output.Close()^;
ECHO:  if (fileName) {
ECHO:    var file ^= fileName.split(^'^|^')^;
ECHO:    if (file[1]) output^=new _g.ADOStream( file[0], append?_g.ForAppending^:_g.ForWriting, file[1], file[2] )^;
ECHO:    else output^=fso.OpenTextFile( fileName, append?_g.ForAppending^:_g.ForWriting, true, utf?-1^:0 )^;
ECHO:  }
ECHO:  else output^=stdout^;
ECHO:  _g.loc^=^'^'^;
ECHO:}
EXIT /B

:CREATE_JREPLStrings
@ECHO OFF
ECHO:(.*scenelist.*)	$txt=$1	'$^^'	SCENELISTS
ECHO:(.*objectCatalogue.*)	$txt=$1	'$^^'	OBJECTCATALOGUES
ECHO:(.*defaultinventory.*)	$txt=$1	'$^^'	DEFAULTINVENTORY
ECHO:(.*/navi.*)(.*xml.*)	$txt=$1+$2	'$^^'	NAVIGATORS
ECHO:(.*config_.*)	$txt=$1	'$^^'	CONFIGS
ECHO:(.*/screens/.*)	$txt=$1	'$^^'	SCREENS
ECHO:(.*e.home.*)(.*/RSS_Feeds.*)	$txt=$1+$2	'$^^'	RSS FEEDS
ECHO:(.*CommercePoints.*)(.*.xml.*)	$txt=$1+$2	'$^^'	COMMERCE POINTS
ECHO:(.*VERS_.*)(.*xml.*)	$txt=$1+$2	'$^^'	SCENE VERSION XMLS
ECHO:(.*config.xml.*)	$txt=$1	'$^^'	CONFIG XML
ECHO:(.*VERS_.*)(.*xml.*)	$txt=$1+$2	'$^^'	SCENE VERSION XMLS
ECHO:(.*ProfanityDictionary.*)(.*.BIN.*)	$txt=$1+$2	'$^^'	PROFANITYDICTIONARIES
ECHO:(.*ServiceIDs.*)(.*.xml.*)	$txt=$1+$2	'$^^'	SERVICE IDS
ECHO:(.*(SaveDataService\/avatar.*\.jpg^|Avatar-.*\.jpg).*)	$txt=$1	/.*e.home.*/i	AVATAR PFP
ECHO:(.*Inventory-.*\.xml.*^|.*Profile-.*)	$txt=$1	'$^^'	INVENTORY AND PROFILE SETTING XML
ECHO:(.*\.mp4.*)	$txt=$1	/c\.home^|^^alpha\.lootgear\.com\/moviedb.*\.mp4/i	MP4
ECHO:(.*\.mp3.*)	$txt=$1	/.*c.home.*/i	MP3
ECHO:(.*\.m4v.*)	$txt=$1	/.*c.home.*/i	M4V
ECHO:(.*\.dds.*)	$txt=$1	/.*c.home.*/i	DDS
ECHO:(.*\.png.*)	$txt=$1	/.*c.home.*/i	PNG
ECHO:(.*\.jpg.*)	$txt=$1	/c\.home^|SaveDataService\/avatar.*\.jpg^|Avatar-.*\.jpg/i	JPG
ECHO:(.*\.jpeg.*)	$txt=$1	/.*c.home.*/i	JPEG
ECHO:(.*\.(mp4^|mp3^|m4v^|dds^|png^|jpg^|jpeg).*)	$txt=$1	/c\.home^|^^alpha\.lootgear\.com\/moviedb.*\.mp4^|SaveDataService\/avatar.*\.jpg^|Avatar-.*\.jpg/i	MEDIA
ECHO:(.*\.hsml.*)	$txt=$1	/.*c.home.*/i	HSTML
ECHO:(.*\.do.*)	$txt=$1	/.*c.home.*/i	PACONTROLLERS
ECHO:(.*/helptext/.*)	$txt=$1	'$^^'	HELPTEXT
ECHO:(.*(NPWR00432^|NPIA00005^|/clan/).*)	$txt=$1	'$^^'	CLUBHOUSE XML
ECHO:(.*objects/(90B121DD-33C94336-83D3F23C-78699CE5^|F14C0D58-A3934173-99C50269-84DCB78C^|EB6ECA9F-389B4140-96F12563-BE7264F8).*\.(txt^|xml).*)	$txt=$1	/.*c.home.*/i	MOTD AND NEWSVIEWER
ECHO:(.*objects/90B121DD-33C94336-83D3F23C-78699CE5.*\.(txt^|xml).*)	$txt=$1	/.*c.home.*/i	MOTD-90B
ECHO:(.*objects/F14C0D58-A3934173-99C50269-84DCB78C.*\.(txt^|xml).*)	$txt=$1	/.*c.home.*/i	MOTD-F14
ECHO:(.*objects/EB6ECA9F-389B4140-96F12563-BE7264F8.*\.(txt^|xml).*)	$txt=$1	/.*c.home.*/i	NEWSVIEWER-EB6
ECHO:(.*\.xml.*)	$txt=$1	/.*scenelist.*^|.*\/navi.*^|.*CommercePoints.*^|.*VERS_.*^|.*\/screens\/.*^|.*\/RSS_Feeds.*^|.*ServiceIDs.*^|.*Inventory-.*^|.*ceb\/masterobject\/config.*^|.*\/helptext\/.*^|.*NPWR00432.*^|.*objects\/EB6ECA9F-389B4140-96F12563-BE7264F8.*^|.*objects\/90B121DD-33C94336-83D3F23C-78699CE5.*^|.*objects\/F14C0D58-A3934173-99C50269-84DCB78C.*/i	XML
ECHO:(.*(?:homeps3-content\.online\.scee\.com^|c\.home))(.*)(/objects.*)	$txt=$1+$2+$3	/.*ObjectCatalogue.*/i	OBJECT_FOLDER
ECHO:(.*(?:homeps3-content\.online\.scee\.com^|c\.home))(.*)(/scenes.*)	$txt=$1+$2+$3	'$^^'	SCENE_FOLDER
ECHO:(.*(?:homeps3-content\.online\.scee\.com^|c\.home))(.*)(/objects.*?)(\.(sdat^|bar))(.*)	$txt=$1+$2+$3+$4+$6	/.*ObjectCatalogue.*/i	OBJECT_SDATS
ECHO:(.*(?:homeps3-content\.online\.scee\.com^|c\.home))(.*)(/scenes.*?)(\.(sdat^|bar))(.*)	$txt=$1+$2+$3+$4+$6	'$^^'	SCENE_SDATS
ECHO:(.*(?:homeps3-content\.online\.scee\.com^|c\.home))(.*)(/objects.*?)(\.odc)(.*)	$txt=$1+$2+$3+$4+$5	'$^^'	OBJECT_ODC
ECHO:(.*(?:homeps3-content\.online\.scee\.com^|c\.home))(.*)(/scenes.*?)(\.sdc)(.*)	$txt=$1+$2+$3+$4+$5	'$^^'	SCENE_SDC
ECHO:(.*(?:homeps3-content\.online\.scee\.com^|c\.home))(.*)(/objects.*?)(\.png)(.*)	$txt=$1+$2+$3+$4+$5	'$^^'	OBJECT_THUMB
ECHO:(.*(?:homeps3-content\.online\.scee\.com^|c\.home))(.*)(/scenes.*?)(\.png)(.*)	$txt=$1+$2+$3+$4+$5	'$^^'	SCENE_THUMB
EXIT /B

:CREATE_exceptions_corrupted
@ECHO OFF
ECHO:3F907BC6DC52E7310F61DF081BC5D6753027D86D
ECHO:8D923C800D0B04916879F6F54A4E3C75132EAC03
ECHO:8DF2A99272D9EAA8AB72B801348C3A11BA216BC3
ECHO:0BF4C25322C739A8F50D669A2DDE09666D8647DF
ECHO:141C332E471A42380BC3BE9DE2600BAF2C29F0C3
ECHO:14D7F6A12668F62E0F43EDCB5805C8F533F2D651
ECHO:001C57C773B1E7D8EA9F298F97F082511F591A68
ECHO:744BEA31486DC455BB2505C89AAB9222CC57A0BE
ECHO:F5CD2930244634A50A83B0D2E23702FA6AA96FB2
ECHO:E37EAA9A71785F49D119B1AF88D3C42A4041C741
ECHO:7F9616CCFAD221292C9089088CC3F49CF83464F2
ECHO:FE86A8B2E7D1FB5171FE4B200C8C8DC50ECD4B8D
ECHO:22AC98A72F3D76DCDFE724156967AAACAE4724DD
ECHO:A369102DA58553ED586AE7D08BAA0E7F50EF155E
ECHO:6D224DBF2CA22F680AEECFBFEE709853A8D0CE19
ECHO:812D4BBA58B842347C0FBFCB6C68C15CAB865DCC
ECHO:79DFE9801D561E46F67FD7AA7F37A1CE13B72C75
ECHO:2A7B01DBC5E30B21C8665C538C33F268CE7A33D5
ECHO:CD28E79996DDCFBBF21B8A001C3F4E708DC26886
ECHO:C5015B95BE03A8F6021F6E1EA566E6D3F6B879C4
ECHO:E0F61DADE38BE2DA99CF2AD885C8B628BE294A35
ECHO:55983984C7AA017FE98C2743ACE79BD47E0461C3
ECHO:F298A0A046FD5EAE2973DDA02100DA653DC5D30C
EXIT /B

:CREATE_exceptions_modified
@ECHO OFF
ECHO:A4D22C976259349F7E86A66075CAB7CDD8521AAF
ECHO:8693F66138B3C23B01F0FB959AA0AF02B79FBC25
ECHO:EBC856DC129B442AFE891354FD9B3895275FAFF1
ECHO:74D5C400A7145F0DBD0BCCBABDEEC79A3D41F9ED
ECHO:B708848A86CFA4D114F398A5B07E965026D81650
ECHO:37CABB80F2F5E9BA414CFBFE9D087515815F3D15
ECHO:E8B2CE57C3135E06F53DE85B6AC1255E099BF968
ECHO:A78A1B104293ABB4425141F054265538EC7AF545
ECHO:791BD2903FF9B66725D0D9CDB52BE2E4236E1FF7
ECHO:7464D3BBCF64EEC3CCAC3EA21839E68B3E9BAFD1
ECHO:80063ABFADACAADE02E907D4023A68404E1351C1
ECHO:4AF7F9CE69C03C5BDFA404F990E45B0894D61665
ECHO:24E96D9D8D3A234B33AB0CDCC66A42C7E59D302D
ECHO:3D9F3774D95BC6EC8FB8263A13C636D5F7039F81
ECHO:8A7182492F7666C131884B97DC44E5B9D942342D
ECHO:0C98D7FDE0C698A801D680BE4B5F4957F7EFE40B
ECHO:EE69C1DBDA9F0A96CDF0E31101D3CE76B9B18E4C
ECHO:F05170C2683D48667C3DFBD06CE811ABBAC2E03D
EXIT /B